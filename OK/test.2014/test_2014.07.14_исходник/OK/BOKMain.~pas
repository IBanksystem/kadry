unit BOKMain;
{ номер кадров group_id=70 !!! когда дельфи пишет ошибку в строке 36650 на самом деле ошибка в плюс 27 строке 36677 }
interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Menus, ActnList, ImgList, ComCtrls, ToolWin, Base,
  AboutDlg, StdCtrls, DB, DBClient, CheckLst, DBCtrls, Grids, //QRExport,
  DBGrids,ComObj, Buttons, Utils, Mask, strutils, errDlg, DBActns,
  Jpeg,SelDlg, DateUtils, ShellAPI;

type
  TBOKForm = class(TBaseForm)
    CoolBar: TCoolBar;
    psMenuBar: TPageScroller;
    psToolBar: TPageScroller;
    ToolBar: TToolBar;
    StatusBar: TStatusBar;
    ImageList: TImageList;
    ActionList: TActionList;
    MainMenu: TMainMenu;
    MenuBar: TToolBar;
    Splitter: TSplitter;
    actToolBar: TAction;
    actStatusBar: TAction;
    actAbout: TAction;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    TBNew: TToolButton;
    N12: TMenuItem;
    N13: TMenuItem;
    cdsSSOKPost_SET: TClientDataSetEx;
    dsSSOKPost_SET: TDataSource;
    cdsSSOKEducation_SET: TClientDataSetEx;
    dsSSOKEducation_SET: TDataSource;
    cdsSSOKInstitution_SET: TClientDataSet;
    dsSSOKInstitution_SET: TDataSource;
    cdsSSOKNationality_SET: TClientDataSetEx;
    dsSSOKNationality_SET: TDataSource;
    cdsSSOKParty_SET: TClientDataSetEx;
    dsSSOKParty_SET: TDataSource;
    cdsSSOKDegree_SET: TClientDataSetEx;
    dsSSOKDegree_SET: TDataSource;
    cdsSSOKAcademic_SET: TClientDataSetEx;
    dsSSOKAcademic_SET: TDataSource;
    cdsSSOKLanguage_SET: TClientDataSetEx;
    dsSSOKLanguage_SET: TDataSource;
    cdsSSOKLevelLanguage_SET: TClientDataSetEx;
    dsSSOKLevelLanguage_SET: TDataSource;
    cdsSSOKTypePeriod_SET: TClientDataSetEx;
    dsSSOKTypePeriod_SET: TDataSource;
    cdsSSOKRelation_SET: TClientDataSetEx;
    dsSSOKRelation_SET: TDataSource;
    cdsSSOKQualification_SET: TClientDataSetEx;
    dsSSOKQualification_SET: TDataSource;
    cdsSSOKLeave_SET: TClientDataSetEx;
    dsSSOKLeave_SET: TDataSource;
    cdsSSOKMotiveDismissial_SET: TClientDataSetEx;
    dsSSOKMotiveDismissial_SET: TDataSource;
    cdsSSOKYouth_SET: TClientDataSetEx;
    dsSSOKYouth_SET: TDataSource;
    cdsSSOKDepartmentType_SET: TClientDataSetEx;
    dsSSOKDepartmentType_SET: TDataSource;
    cdsSSOKArticle_SET: TClientDataSetEx;
    dsSSOKArticle_SET: TDataSource;
    cdsSSOKDepartment_SET: TClientDataSetEx;
    dsSSOKDepartment_SET: TDataSource;
    actSSOKPost: TAction;
    actSSOKEducation: TAction;
    actSSOKNationality: TAction;
    actSSOKParty: TAction;
    actSSOKDegree: TAction;
    actSSOKAcademic: TAction;
    actSSOKLanguage: TAction;
    actSSOKLevelLanguage: TAction;
    actSSOKTypePeriod: TAction;
    actSSOKRelation: TAction;
    actSSOKQualification: TAction;
    actSSOKLeave: TAction;
    actSSOKMotiveDismissial: TAction;
    actSSOKYouth: TAction;
    actSSOKDepartmentType: TAction;
    actSSOKDepartment: TAction;
    actSSOKArticle: TAction;
    actSSOKCommandType: TAction;
    actSSOKTemplateCommand: TAction;
    cdsSSOKCommandType_Set: TClientDataSetEx;
    dsSSOKCommandType_Set: TDataSource;
    cdsSSOKTemplateCommand_SET: TClientDataSetEx;
    dsSSOKTemplateCommand_SET: TDataSource;
    TBOrder: TToolButton;
    FormPanel: TPanel;
    Panel1: TPanel;
    Panel5: TPanel;
    OpenPanel: TPanel;
    OpenCenterPanel: TPanel;
    gbAddress: TGroupBox;
    Label78: TLabel;
    btnOnOpenPanel: TButton;
    gbPassport: TGroupBox;
    gbPersonal: TGroupBox;
    dbeOK_FAMILY: TDBEdit;
    dbeOK_BIRTHDAY: TDBEdit;
    actTable: TAction;
    actForm: TAction;
    ToolButton3: TToolButton;
    actNew: TAction;
    actUndoChanges: TAction;
    actEdit: TAction;
    actUnactive: TAction;
    ToolButton5: TToolButton;
    ActPrev: TAction;
    actFilter: TAction;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    TablePanel: TPanel;
    Panel6: TPanel;
    cdbgOK_PERSONAL: TClientDBGrid;
    cdsOKPersonal: TClientDataSetEx;
    dsOKPersonal: TDataSource;
    cdsSSokgender_SET: TClientDataSetEx;
    cdsSSOKFamilyStatus_SET: TClientDataSetEx;
    cdsSSOKRegType_SET: TClientDataSetEx;
    dsSSOKREGTYPE_SET: TDataSource;
    dsSSOKFAMILYSTATUS_SET: TDataSource;
    dsSSokgender_SET: TDataSource;
    TBTable: TToolButton;
    dbeOK_PATRONYMIC: TDBEdit;
    dbeOK_FIRST_NAME: TDBEdit;
    Label26: TLabel;
    dbeOK_PASS_SERIYA: TDBEdit;
    Label27: TLabel;
    dbeOK_PASS_NUM: TDBEdit;
    dbeOK_PASS_DATE: TDBEdit;
    Label22: TLabel;
    Label19: TLabel;
    Label17: TLabel;
    dbeOK_Home_Address: TDBEdit;
    Label21: TLabel;
    Label23: TLabel;
    Label30: TLabel;
    actSaveNew: TAction;
    dbeOKGender: TDBEdit;
    dblcbOKGender: TDBLookupComboBox;
    dblcbOKFamilyStatus: TDBLookupComboBox;
    dbeOKFamilyStatus: TDBEdit;
    dblcbOKNationality: TDBLookupComboBox;
    dbeOKNationality: TDBEdit;
    dblcbOKRegType: TDBLookupComboBox;
    ToolButton11: TToolButton;
    actDetails: TAction;
    lbStatus: TLabel;
    cdsOKPersonal_NEW: TClientDataSetEx;
    dsOKPersonal_NEW: TDataSource;
    cdbgOKPERSONAL_NEW: TClientDBGrid;
    ToolButton12: TToolButton;
    dbeOKdistr: TDBEdit;
    Label34: TLabel;
    dbeOK_TELEFON: TDBEdit;
    dbeOK_RECORD_BOOK_SERIES: TDBEdit;
    dbeOK_RECORD_BOOK_NUMBER: TDBEdit;
    Label32: TLabel;
    Label33: TLabel;
    Label24: TLabel;
    ToolButton13: TToolButton;
    actRef: TAction;
    RefPanel: TPanel;
    PC: TPageControl;
    TabMessage: TTabSheet;
    Memo1: TMemo;
    actSaveExist: TAction;
    DetailsPanel: TPanel;
    N52: TMenuItem;
    N54: TMenuItem;
    N55: TMenuItem;
    N56: TMenuItem;
    N57: TMenuItem;
    ActPrev1: TMenuItem;
    actRefresh1: TMenuItem;
    actFiltr1: TMenuItem;
    actTable1: TMenuItem;
    actForm1: TMenuItem;
    N58: TMenuItem;
    N59: TMenuItem;
    ToolButton1: TToolButton;
    ToolButton10: TToolButton;
    ToolButton14: TToolButton;
    ToolButton15: TToolButton;
    ToolButton16: TToolButton;
    ToolButton17: TToolButton;
    ToolButton18: TToolButton;
    DataSetRefreshSt: TDataSetRefresh;
    Label37: TLabel;
    cdsSSokStatus_SET: TClientDataSetEx;
    dsSSokStatus_SET: TDataSource;
    dsOKEducation: TDataSource;
    cdsOKEducation: TClientDataSetEx;
    cdsSSOkBasis_Set: TClientDataSetEx;
    dsSSOkBasis_Set: TDataSource;
    GroupBox43: TGroupBox;
    GroupBox44: TGroupBox;
    PCDetails: TPageControl;
    TabOKEducation_0: TTabSheet;
    GroupBox24: TGroupBox;
    cdbgOKEducation: TClientDBGrid;
    GroupBox25: TGroupBox;
    TabSheet_13: TTabSheet;
    TabDegree_2: TTabSheet;
    GroupBox28: TGroupBox;
    TabSheet_1: TTabSheet;
    TabSheet_6: TTabSheet;
    TabSheet_8: TTabSheet;
    TabSheet_7: TTabSheet;
    TabOKRise_9: TTabSheet;
    TabSheet_16: TTabSheet;
    TabDetailsMessage: TTabSheet;
    TabSheet_14: TTabSheet;
    TabSheet_3: TTabSheet;
    TabOKScientific_4: TTabSheet;
    TabSheet_5: TTabSheet;
    TabSheet_10: TTabSheet;
    TabSheet_11: TTabSheet;
    DBText2: TDBText;
    DBText3: TDBText;
    DBText4: TDBText;
    dbeDetailsPCode: TDBEdit;
    DataSetFirst1: TDataSetFirst;
    DataSetPrior1: TDataSetPrior;
    DataSetNext1: TDataSetNext;
    DataSetLast1: TDataSetLast;
    ActDetailNew: TAction;
    ActDetailSave: TAction;
    ActDetailDelete: TAction;
    ActDetailUndo: TAction;
    GroupBox29: TGroupBox;
    cdbgOKAcademic: TClientDBGrid;
    GroupBox45: TGroupBox;
    Label73: TLabel;
    Label75: TLabel;
    BitBtn2: TBitBtn;
    dblcbSSOKAcademic: TDBLookupComboBox;
    BitBtn6: TBitBtn;
    dbedAcademicDate: TDBEdit;
    BitBtn7: TBitBtn;
    BitBtn8: TBitBtn;
    cdsOKAcademic: TClientDataSetEx;
    dsOKAcademic: TDataSource;
    cdbgOKDegree: TClientDBGrid;
    GroupBox46: TGroupBox;
    Label52: TLabel;
    Label60: TLabel;
    BitBtn9: TBitBtn;
    dblcbSSOKdegree: TDBLookupComboBox;
    BitBtn10: TBitBtn;
    dbedDegreeDate: TDBEdit;
    BitBtn11: TBitBtn;
    BitBtn12: TBitBtn;
    cdsOKDegree: TClientDataSetEx;
    dsOKDegree: TDataSource;
    TabSheet_19: TTabSheet;
    TabSheet_20: TTabSheet;
    TabSheet_18: TTabSheet;
    TabSheet_17: TTabSheet;
    TabSheet_12: TTabSheet;
    GroupBox26: TGroupBox;
    cdbgOKAward: TClientDBGrid;
    GroupBox31: TGroupBox;
    Label61: TLabel;
    Label71: TLabel;
    BitBtn13: TBitBtn;
    BitBtn14: TBitBtn;
    dbedAwardInfo: TDBEdit;
    BitBtn15: TBitBtn;
    BitBtn16: TBitBtn;
    cdsOKAward: TClientDataSetEx;
    dsOKAward: TDataSource;
    dbedAwardDate: TDBEdit;
    cdsOKScientific: TClientDataSetEx;
    dsOKScientific: TDataSource;
    cdsOkvoyage: TClientDataSetEx;
    dsOKvoyage: TDataSource;
    cdsOkLanguage: TClientDataSetEx;
    dsOKLanguage: TDataSource;
    cdsOkRelation: TClientDataSetEx;
    dsOkRelation: TDataSource;
    GroupBox23: TGroupBox;
    cdbgOKScientific: TClientDBGrid;
    GroupBox27: TGroupBox;
    Label72: TLabel;
    Label74: TLabel;
    BitBtn17: TBitBtn;
    BitBtn18: TBitBtn;
    dbedScientificInfo: TDBEdit;
    BitBtn19: TBitBtn;
    BitBtn20: TBitBtn;
    dbedScientificDate: TDBEdit;
    GroupBox30: TGroupBox;
    cdbgOKvoyage: TClientDBGrid;
    GroupBox32: TGroupBox;
    Label76: TLabel;
    Label77: TLabel;
    BitBtn21: TBitBtn;
    BitBtn22: TBitBtn;
    DBEdit3: TDBEdit;
    BitBtn23: TBitBtn;
    BitBtn24: TBitBtn;
    DBEdit4: TDBEdit;
    GroupBox33: TGroupBox;
    cdbgOKLanguage: TClientDBGrid;
    GroupBox34: TGroupBox;
    Label79: TLabel;
    Label80: TLabel;
    BitBtn25: TBitBtn;
    BitBtn26: TBitBtn;
    BitBtn27: TBitBtn;
    BitBtn28: TBitBtn;
    GroupBox35: TGroupBox;
    cdbgOKRelation: TClientDBGrid;
    GroupBox37: TGroupBox;
    cdbgOKPeriod: TClientDBGrid;
    GroupBox39: TGroupBox;
    cdbgOKRise: TClientDBGrid;
    GroupBox40: TGroupBox;
    BitBtn37: TBitBtn;
    BitBtn38: TBitBtn;
    BitBtn39: TBitBtn;
    BitBtn40: TBitBtn;
    DBEdit12: TDBEdit;
    GroupBox41: TGroupBox;
    cdbgOKElection: TClientDBGrid;
    GroupBox42: TGroupBox;
    Label87: TLabel;
    Label88: TLabel;
    BitBtn41: TBitBtn;
    BitBtn42: TBitBtn;
    BitBtn43: TBitBtn;
    BitBtn44: TBitBtn;
    DBEdit14: TDBEdit;
    GroupBox47: TGroupBox;
    cdbgOKPremium: TClientDBGrid;
    GroupBox48: TGroupBox;
    Label89: TLabel;
    Label90: TLabel;
    BitBtn45: TBitBtn;
    BitBtn46: TBitBtn;
    DBEdit15: TDBEdit;
    BitBtn47: TBitBtn;
    BitBtn48: TBitBtn;
    DBEdit16: TDBEdit;
    GroupBox49: TGroupBox;
    cdbgOKArmy: TClientDBGrid;
    GroupBox50: TGroupBox;
    Label91: TLabel;
    Label92: TLabel;
    BitBtn49: TBitBtn;
    BitBtn50: TBitBtn;
    BitBtn51: TBitBtn;
    BitBtn52: TBitBtn;
    DBEdit18: TDBEdit;
    GroupBox51: TGroupBox;
    cdbgOKParty: TClientDBGrid;
    GroupBox52: TGroupBox;
    Label93: TLabel;
    Label94: TLabel;
    BitBtn53: TBitBtn;
    BitBtn54: TBitBtn;
    DBEd_Pvp: TDBEdit;
    BitBtn55: TBitBtn;
    BitBtn56: TBitBtn;
    DBEd_Gvp: TDBEdit;
    GroupBox53: TGroupBox;
    cdbgOKYouth: TClientDBGrid;
    GroupBox54: TGroupBox;
    Label95: TLabel;
    Label96: TLabel;
    BitBtn57: TBitBtn;
    BitBtn58: TBitBtn;
    DBEdit21: TDBEdit;
    BitBtn59: TBitBtn;
    BitBtn60: TBitBtn;
    DBEdit22: TDBEdit;
    GroupBox57: TGroupBox;
    cdbgOKLeave: TClientDBGrid;
    GroupBox59: TGroupBox;
    cdbgOKconvictions: TClientDBGrid;
    GroupBox61: TGroupBox;
    cdbgOKaddinform: TClientDBGrid;
    GroupBox62: TGroupBox;
    GroupBox65: TGroupBox;
    cdbgOKPenalty: TClientDBGrid;
    GroupBox66: TGroupBox;
    Label107: TLabel;
    Label108: TLabel;
    BitBtn81: TBitBtn;
    BitBtn82: TBitBtn;
    DBEdit33: TDBEdit;
    BitBtn83: TBitBtn;
    BitBtn84: TBitBtn;
    DBEdit34: TDBEdit;
    GroupBox67: TGroupBox;
    cdbgOKChangeFIO: TClientDBGrid;
    GroupBox68: TGroupBox;
    Label109: TLabel;
    Label110: TLabel;
    BitBtn85: TBitBtn;
    BitBtn86: TBitBtn;
    DBEdit35: TDBEdit;
    BitBtn87: TBitBtn;
    BitBtn88: TBitBtn;
    DBEdit36: TDBEdit;
    DBLCBlanglevel: TDBLookupComboBox;
    dblcbParty: TDBLookupComboBox;
    dblcbYouth: TDBLookupComboBox;
    dblcbPenalty: TDBLookupComboBox;
    DBEdit1: TDBEdit;
    Label111: TLabel;
    DBLCBlang: TDBLookupComboBox;
    dsOKPeriod: TDataSource;
    dsOKPremium: TDataSource;
    dsOKRise: TDataSource;
    dsOKElection: TDataSource;
    dsOKArmy: TDataSource;
    dsOKYouth: TDataSource;
    dsOKParty: TDataSource;
    dsOKLeave: TDataSource;
    cdsOKRise: TClientDataSetEx;
    cdsOKPeriod: TClientDataSetEx;
    cdsOKPremium: TClientDataSetEx;
    cdsOKElection: TClientDataSetEx;
    cdsOKLeave: TClientDataSetEx;
    cdsOKYouth: TClientDataSetEx;
    cdsOKArmy: TClientDataSetEx;
    cdsOKParty: TClientDataSetEx;
    Label127: TLabel;
    DBEdit46: TDBEdit;
    Label86: TLabel;
    Label128: TLabel;
    Label129: TLabel;
    DBEdit47: TDBEdit;
    DBEdit48: TDBEdit;
    Label130: TLabel;
    dsOKConvictions: TDataSource;
    dsOKPenalty: TDataSource;
    dsSSOKDepartment_RO: TDataSource;
    cdsOKPenalty: TClientDataSetEx;
    cdsOKConvictions: TClientDataSetEx;
    cdsSSOKDepartment_RO: TClientDataSetEx;
    dsSSOKArmy_SET: TDataSource;
    dsOKAddInform: TDataSource;
    dsSSOKFitnessArmy_SET: TDataSource;
    cdsSSOKFitnessArmy_SET: TClientDataSetEx;
    cdsSSOKArmy_SET: TClientDataSetEx;
    cdsOKAddInform: TClientDataSetEx;
    DBLookupComboBox6: TDBLookupComboBox;
    Label131: TLabel;
    Label132: TLabel;
    DBEdit50: TDBEdit;
    Label133: TLabel;
    Label135: TLabel;
    Label136: TLabel;
    DBEdit52: TDBEdit;
    DBEdit53: TDBEdit;
    Label137: TLabel;
    DBEdit55: TDBEdit;
    Label138: TLabel;
    Label139: TLabel;
    Label140: TLabel;
    Label141: TLabel;
    DBLookupComboBox7: TDBLookupComboBox;
    Label134: TLabel;
    Label142: TLabel;
    DBEd_Gpn: TDBEdit;
    Label143: TLabel;
    DBEd_Ppn: TDBEdit;
    Label144: TLabel;
    dsSSOKPenalty_Set: TDataSource;
    dsOKChangeFIO: TDataSource;
    dsOKPost: TDataSource;
    cdsOKPost: TClientDataSetEx;
    cdsSSOKPenalty_Set: TClientDataSetEx;
    cdsOKChangeFIO: TClientDataSetEx;
    DBEdit65: TDBEdit;
    Label151: TLabel;
    Label152: TLabel;
    dsOKFiltr: TDataSource;
    cdsOKFiltr: TClientDataSetEx;
    DBEdit66: TDBEdit;
    DBEdit67: TDBEdit;
    Label153: TLabel;
    Label154: TLabel;
    Label155: TLabel;
    DBEdit68: TDBEdit;
    Memo2: TMemo;
    dsSSOKVacancy_Set: TDataSource;
    TabOKStat: TTabSheet;
    actAppoint: TAction;
    actDismiss: TAction;
    dsOKStatSalary: TDataSource;
    dsOKStat: TDataSource;
    cdsOKStat: TClientDataSetEx;
    cdsOKStatSalary: TClientDataSetEx;
    dsOKRezerv: TDataSource;
    cdsSSOKVacancy_Set: TClientDataSetEx;
    cdsOKRezerv: TClientDataSetEx;
    actStatNew: TAction;
    actStatSave: TAction;
    actStatDelete: TAction;
    actStatUndo: TAction;
    actStatSalary: TAction;
    dbeokRegion: TDBEdit;
    dsSDistr: TDataSource;
    dsSRegion: TDataSource;
    cdsSRegion: TClientDataSetEx;
    cdsSDistr: TClientDataSetEx;
    dsOKPhoto: TDataSource;
    dsSDistr_RO: TDataSource;
    cdsOKPhoto: TClientDataSetEx;
    cdsTempSource: TClientDataSetEx;
    cdsSDistr_RO: TClientDataSetEx;
    DBLCBokregion: TDBLookupComboBox;
    DBLCBokdistr: TDBLookupComboBox;
    Label106: TLabel;
    Label156: TLabel;
    actChangeFIO: TAction;
    Button2: TButton;
    Panel2: TPanel;
    GroupBox21: TGroupBox;
    Label2: TLabel;
    lbDistrRO2: TLabel;
    Label5: TLabel;
    lbGdePropisan2: TLabel;
    bbSaveForm: TButton;
    dbedHOME_ADDRESSFACT: TDBEdit;
    DBEdit71: TDBEdit;
    DBLookupComboBox12: TDBLookupComboBox;
    DBEdit72: TDBEdit;
    GroupBox22: TGroupBox;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    lbFormRegPlace: TLabel;
    DBEdit75: TDBEdit;
    DBEdit76: TDBEdit;
    DBEdit77: TDBEdit;
    dbedFormPASS_REG: TDBEdit;
    GroupBox63: TGroupBox;
    Label12: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label31: TLabel;
    Label40: TLabel;
    Label41: TLabel;
    Label42: TLabel;
    Label43: TLabel;
    Label44: TLabel;
    DBEdit79: TDBEdit;
    DBEdit80: TDBEdit;
    DBEdit81: TDBEdit;
    DBEdit82: TDBEdit;
    DBEdit83: TDBEdit;
    DBLookupComboBox18: TDBLookupComboBox;
    DBLookupComboBox19: TDBLookupComboBox;
    DBEdit84: TDBEdit;
    DBLCBnationality: TDBLookupComboBox;
    DBEdnationality: TDBEdit;
    DBEdit87: TDBEdit;
    DBEdit88: TDBEdit;
    Button3: TButton;
    Label58: TLabel;
    actDetailsFirst: TAction;
    actDetailsPrev: TAction;
    actDetailsNext: TAction;
    actDetailsLast: TAction;
    N61: TMenuItem;
    N63: TMenuItem;
    N64: TMenuItem;
    N65: TMenuItem;
    N66: TMenuItem;
    N67: TMenuItem;
    N68: TMenuItem;
    N69: TMenuItem;
    N70: TMenuItem;
    N71: TMenuItem;
    N72: TMenuItem;
    N73: TMenuItem;
    N74: TMenuItem;
    N75: TMenuItem;
    N76: TMenuItem;
    N77: TMenuItem;
    N78: TMenuItem;
    N79: TMenuItem;
    N80: TMenuItem;
    N81: TMenuItem;
    actOrder: TAction;
    actSSOKPenalty: TAction;
    N7: TMenuItem;
    TabPhoto: TTabSheet;
    actPhotoInsert: TAction;
    actPhotoRemove: TAction;
    SignaturePanel: TPanel;
    ScrollBox: TScrollBox;
    actPhotoAttach: TAction;
    actPhotoActualSize: TAction;
    Panel4: TPanel;
    BitBtn89: TBitBtn;
    BitBtn90: TBitBtn;
    BitBtn91: TBitBtn;
    BitBtn92: TBitBtn;
    actPhotoSave: TAction;
    BitBtn93: TBitBtn;
    Panel7: TPanel;
    Panel8: TPanel;
    imgPreview: TImage;
    actAnketa: TAction;
    actLichKartaA: TAction;
    Button4: TButton;
    Button5: TButton;
    dsSDistrRO2: TDataSource;
    cdsSDistrRO2: TClientDataSetEx;
    dblcbOKEducationTitle: TDBLookupComboBox;
    Label50: TLabel;
    dsSSOKEducationTitle_SET: TDataSource;
    cdsSSOKEducationTitle_SET: TClientDataSetEx;
    Label49: TLabel;
    DBLookupComboBox21: TDBLookupComboBox;
    TabOKPersonal: TTabSheet;
    GroupBox18: TGroupBox;
    ToolButton2: TToolButton;
    actRef2: TAction;
    actObiektivka: TAction;
    DBEdit73: TDBEdit;
    Label51: TLabel;
    OptionsPanel: TPanel;
    Label53: TLabel;
    gbStateBook: TGroupBox;
    Label57: TLabel;
    Label59: TLabel;
    Label63: TLabel;
    Label64: TLabel;
    clbActive: TColorBox;
    clbArrest: TColorBox;
    clbAphClose: TColorBox;
    clbHand: TColorBox;
    actOptions: TAction;
    Label65: TLabel;
    edBossNew: TEdit;
    N8: TMenuItem;
    Label54: TLabel;
    Label56: TLabel;
    edOfficeAddress: TEdit;
    Button7: TButton;
    actRezervShow: TAction;
    actRezervSet: TAction;
    actToExcel: TAction;
    ToolButton19: TToolButton;
    ToolButton20: TToolButton;
    actDelete: TAction;
    BitBtn98: TBitBtn;
    BitBtn97: TBitBtn;
    Label66: TLabel;
    DBEdit90: TDBEdit;
    DBLookupComboBox23: TDBLookupComboBox;
    cdsSSOKProfmember_SET: TClientDataSetEx;
    dsSSOKProfmember_SET: TDataSource;
    Label67: TLabel;
    DBEdit91: TDBEdit;
    DBLookupComboBox24: TDBLookupComboBox;
    cdsUsers: TClientDataSetEx;
    DBLookupComboBox28: TDBLookupComboBox;
    dblcbelection: TDBLookupComboBox;
    dsSSOKelection_SET: TDataSource;
    cdsSSOKelection_SET: TClientDataSetEx;
    chbTabVisible: TCheckBox;
    Button6: TButton;
    actLichKartaB: TAction;
    dsTempSource: TDataSource;
    GroupBox1: TGroupBox;
    Label47: TLabel;
    CBDetails: TComboBox;
    BitBtn80: TBitBtn;
    BitBtn77: TBitBtn;
    BitBtn78: TBitBtn;
    BitBtn79: TBitBtn;
    Label121: TLabel;
    Label157: TLabel;
    DBEdit13: TDBEdit;
    DBEdit49: TDBEdit;
    DBLookupComboBox30: TDBLookupComboBox;
    DBLookupComboBox31: TDBLookupComboBox;
    actObiektivkaRTF: TAction;
    actLichKartaB_rtf: TAction;
    actStat: TAction;
    cdsTemp: TClientDataSetEx;
    dsTemp: TDataSource;
    actStatDep: TAction;
    GroupBox70: TGroupBox;
    Label105: TLabel;
    Label174: TLabel;
    Label98: TLabel;
    Label62: TLabel;
    cdbgOKStat: TClientDBGrid;
    bbStatNew: TBitBtn;
    bbStatUndo: TBitBtn;
    bbStatSave: TBitBtn;
    bbStatDelete: TBitBtn;
    DBEdit23: TDBEdit;
    gbStatSalary: TGroupBox;
    cdbgOKStatSalary: TClientDBGrid;
    bbStatSalaryNew: TBitBtn;
    Label158: TLabel;
    Label161: TLabel;
    lbVacancy: TLabel;
    lbHire: TLabel;
    Label162: TLabel;
    Label163: TLabel;
    lbPost: TLabel;
    lbdepartment: TLabel;
    DBEdit96: TDBEdit;
    Label164: TLabel;
    Label165: TLabel;
    DBEdit97: TDBEdit;
    BitBtn61: TBitBtn;
    actChangePassport: TAction;
    actAppointNew: TAction;
    BitBtn62: TBitBtn;
    dsSSOKBaseMove_RO: TDataSource;
    cdsSSOKBaseMove_Set: TClientDataSetEx;
    CBdep: TComboBox;
    Source: TClientDataSetEx;
    dsSSOKmotive_SET: TDataSource;
    cdsSSOKmotive_SET: TClientDataSetEx;
    DBLookupComboBox33: TDBLookupComboBox;
    DBLookupComboBox34: TDBLookupComboBox;
    Label159: TLabel;
    Label160: TLabel;
    Label166: TLabel;
    edDep: TEdit;
    DBEdPost: TEdit;
    DBLCBpost: TComboBox;
    Splitter3: TSplitter;
    TreeV: TTreeView;
    Panel3: TPanel;
    Pages: TPageControl;
    TabSheet2: TTabSheet;
    ScrollBox1: TScrollBox;
    GroupBox2: TGroupBox;
    cdsDerevo: TClientDataSetEx;
    GroupBox3: TGroupBox;
    ClientDBGrid1: TClientDBGrid;
    lbDepCode: TLabel;
    lbDepName: TLabel;
    Label167: TLabel;
    DBLookupComboBox2: TDBLookupComboBox;
    Label168: TLabel;
    DBLookupComboBox4: TDBLookupComboBox;
    Button10: TButton;
    Button11: TButton;
    Button12: TButton;
    Button13: TButton;
    BitBtn64: TBitBtn;
    BitBtn94: TBitBtn;
    BitBtn95: TBitBtn;
    edFilial: TEdit;
    DBEdit5: TDBEdit;
    Label68: TLabel;
    DBEdit6: TDBEdit;
    Label69: TLabel;
    BitBtn63: TBitBtn;
    actDekret: TAction;
    BitBtn96: TBitBtn;
    actDekretOut: TAction;
    actShuBankda: TAction;
    chbGluk: TCheckBox;
    chbSaveFiltr: TCheckBox;
    actLichKarta: TAction;
    dsOKRezervDetail: TDataSource;
    cdsOKRezervDetail: TClientDataSetEx;
    cdsokRezervPost1: TClientDataSetEx;
    cdsokRezervDep1: TClientDataSetEx;
    cdsokRezervPost2: TClientDataSetEx;
    cdsokRezervDep2: TClientDataSetEx;
    dsokRezervPost1: TDataSource;
    dsokRezervDep1: TDataSource;
    dsokRezervPost2: TDataSource;
    dsokRezervDep2: TDataSource;
    dsSMfo1: TDataSource;
    dsSMfo2: TDataSource;
    dsPers: TDataSource;
    cdsSMfo2: TClientDataSetEx;
    cdsPers: TClientDataSetEx;
    cdsSMfo1: TClientDataSetEx;
    bbSaveOptions: TBitBtn;
    dsSSOKSpecial_SET: TDataSource;
    cdsSSOKSpecial_SET: TClientDataSetEx;
    Label170: TLabel;
    dbedSpec: TDBEdit;
    dblcbSpec: TDBLookupComboBox;
    cbSpecial: TComboBox;
    edSpecial: TEdit;
    Label171: TLabel;
    dsSSokSpecial_RO: TDataSource;
    cdsSSokSpecial_RO: TClientDataSetEx;
    Label172: TLabel;
    lbSpecial: TLabel;
    dblcbArmyGroup: TDBLookupComboBox;
    dblcbCategoryArmy: TDBLookupComboBox;
    dblcbMilitaryrank: TDBLookupComboBox;
    dblcbStaff: TDBLookupComboBox;
    dblcbTypeForce: TDBLookupComboBox;
    dsSSOKarmygroup: TDataSource;
    cdsSSOKarmygroup: TClientDataSetEx;
    dsssokCATEGORYARMY: TDataSource;
    dsssokMILITARYRANK: TDataSource;
    dsssokSTAFF: TDataSource;
    dsssokTYPEFORCE: TDataSource;
    cdsssokCATEGORYARMY: TClientDataSetEx;
    cdsssokMILITARYRANK: TClientDataSetEx;
    cdsssokSTAFF: TClientDataSetEx;
    cdsssokTYPEFORCE: TClientDataSetEx;
    ToolButton21: TToolButton;
    actReAccept: TAction;
    ToolButton4: TToolButton;
    N15: TMenuItem;
    Excel1: TMenuItem;
    N17: TMenuItem;
    N18: TMenuItem;
    N19: TMenuItem;
    N20: TMenuItem;
    GroupBox4: TGroupBox;
    Label173: TLabel;
    edDepartmentcodeNew: TEdit;
    Label176: TLabel;
    edDEPARTMENTNUMnew: TEdit;
    edDepartmentNameNew: TEdit;
    Label175: TLabel;
    bbFindDep: TBitBtn;
    actFindDep: TAction;
    Label177: TLabel;
    DBEdit8: TDBEdit;
    Label178: TLabel;
    DBEdit9: TDBEdit;
    IIASPanel: TPanel;
    ToolButton22: TToolButton;
    actIIAS: TAction;
    GroupBox5: TGroupBox;
    Label180: TLabel;
    Label182: TLabel;
    Label183: TLabel;
    Label184: TLabel;
    Label189: TLabel;
    Label190: TLabel;
    Label192: TLabel;
    Label194: TLabel;
    DBEdit10: TDBEdit;
    DBEdit19: TDBEdit;
    DBEdit20: TDBEdit;
    DBLookupComboBox8: TDBLookupComboBox;
    DBEdit38: TDBEdit;
    ed_iias_birth_distr: TDBEdit;
    ed_iias_birth_region: TDBEdit;
    dblcb_iias_birth_region: TDBLookupComboBox;
    dblcb_iias_birth_distr: TDBLookupComboBox;
    edBirth: TDBEdit;
    ed_iias_str: TDBEdit;
    DBLCB_iias_str: TDBLookupComboBox;
    GroupBox6: TGroupBox;
    Label198: TLabel;
    Label199: TLabel;
    DBEdit58: TDBEdit;
    DBEdit59: TDBEdit;
    GroupBox7: TGroupBox;
    Label200: TLabel;
    Label202: TLabel;
    Label205: TLabel;
    Label206: TLabel;
    Label207: TLabel;
    Label208: TLabel;
    Label209: TLabel;
    bbSaveIIAS: TButton;
    DBEdit70: TDBEdit;
    DBLookupComboBox20: TDBLookupComboBox;
    DBLookupComboBox22: TDBLookupComboBox;
    Button15: TButton;
    DBLookupComboBox25: TDBLookupComboBox;
    DBEdit94: TDBEdit;
    DBEdit95: TDBEdit;
    DBEdit98: TDBEdit;
    Label210: TLabel;
    ed_iias_uvd_distr: TDBEdit;
    dblcb_iias_uvd_distr: TDBLookupComboBox;
    dsDistr: TDataSource;
    cdsDistr: TClientDataSetEx;
    Label211: TLabel;
    DBEdit100: TDBEdit;
    ed_iias_birth_region_prim: TDBEdit;
    ed_iias_birth_distr_prim: TDBEdit;
    lbBirth: TLabel;
    Label212: TLabel;
    Label179: TLabel;
    DBEdit24: TDBEdit;
    Label181: TLabel;
    DBLCB_iias_live_str: TDBLookupComboBox;
    Label185: TLabel;
    ed_iias_live_region: TDBEdit;
    dblcb_iias_live_region: TDBLookupComboBox;
    Label186: TLabel;
    ed_iias_live_distr: TDBEdit;
    dblcb_iias_live_distr: TDBLookupComboBox;
    ed_iias_live_distr_prim: TDBEdit;
    Label187: TLabel;
    ed_iias_live_region_prim: TDBEdit;
    Label188: TLabel;
    Label193: TLabel;
    DBLookupComboBox16: TDBLookupComboBox;
    Label195: TLabel;
    DBEdit54: TDBEdit;
    Label196: TLabel;
    DBEdit56: TDBEdit;
    Label197: TLabel;
    dblcbS_STR: TDBLookupComboBox;
    Label201: TLabel;
    DBEdit57: TDBEdit;
    dsS_STR: TDataSource;
    cdsS_STR: TClientDataSetEx;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet3: TTabSheet;
    BitBtn1: TBitBtn;
    BitBtn3: TBitBtn;
    BitBtn4: TBitBtn;
    BitBtn5: TBitBtn;
    DBEdit106: TDBEdit;
    Label221: TLabel;
    TabSheet4: TTabSheet;
    BitBtn99: TBitBtn;
    BitBtn100: TBitBtn;
    BitBtn101: TBitBtn;
    BitBtn102: TBitBtn;
    Label215: TLabel;
    Label216: TLabel;
    DBLookupComboBox17: TDBLookupComboBox;
    Label218: TLabel;
    Label222: TLabel;
    DBEdit104: TDBEdit;
    Label234: TLabel;
    DBLookupComboBox36: TDBLookupComboBox;
    Label236: TLabel;
    DBEdit115: TDBEdit;
    Label217: TLabel;
    DBEdit107: TDBEdit;
    Label220: TLabel;
    DBEdit108: TDBEdit;
    Label223: TLabel;
    DBEdit109: TDBEdit;
    Label224: TLabel;
    DBEdit110: TDBEdit;
    Label225: TLabel;
    DBEdit111: TDBEdit;
    DBEdit112: TDBEdit;
    Label226: TLabel;
    cdsPrizSystem: TClientDataSetEx;
    dsPrizSystem: TDataSource;
    dsPR_OFF: TDataSource;
    cdsPR_OFF: TClientDataSetEx;
    dsDoljn: TDataSource;
    cdsDoljn: TClientDataSetEx;
    dblcbDoljn: TDBLookupComboBox;
    DBEdit105: TDBEdit;
    PageControl2: TPageControl;
    TabSheet5: TTabSheet;
    Label82: TLabel;
    Label81: TLabel;
    Label118: TLabel;
    Label117: TLabel;
    Label116: TLabel;
    Label115: TLabel;
    Label114: TLabel;
    Label113: TLabel;
    Label112: TLabel;
    DBLCBrelation: TDBLookupComboBox;
    DBEdit709: TDBEdit;
    DBEdit708: TDBEdit;
    DBEdit706: TDBEdit;
    DBEdit705: TDBEdit;
    DBEdit704: TDBEdit;
    DBEdit703: TDBEdit;
    DBEdit702: TDBEdit;
    DBEdit701: TDBEdit;
    BitBtn32: TBitBtn;
    BitBtn31: TBitBtn;
    BitBtn30: TBitBtn;
    BitBtn29: TBitBtn;
    TabSheet6: TTabSheet;
    BitBtn103: TBitBtn;
    BitBtn104: TBitBtn;
    BitBtn105: TBitBtn;
    BitBtn106: TBitBtn;
    DBEdit114: TDBEdit;
    DBEdit116: TDBEdit;
    Label219: TLabel;
    Label228: TLabel;
    Label230: TLabel;
    Label232: TLabel;
    Label237: TLabel;
    DBLookupComboBox29: TDBLookupComboBox;
    DBLookupComboBox27: TDBLookupComboBox;
    DBLookupComboBox32: TDBLookupComboBox;
    ds_region: TDataSource;
    cds_region: TClientDataSetEx;
    ds_STR: TDataSource;
    cds_STR: TClientDataSetEx;
    ds_distr: TDataSource;
    cds_distr: TClientDataSetEx;
    ds_yesno: TDataSource;
    cds_yesno: TClientDataSetEx;
    ed_iias_live_str: TDBEdit;
    N14: TMenuItem;
    PageControl3: TPageControl;
    TabSheet7: TTabSheet;
    bbEducationCancel: TBitBtn;
    bbEducationDelete: TBitBtn;
    bbEducationNew: TBitBtn;
    bbEducationSave: TBitBtn;
    dbedDiplomNum: TDBEdit;
    DBEdit102: TDBEdit;
    dbedDiplomDate: TDBEdit;
    DBEdit85: TDBEdit;
    dbedProfession: TDBEdit;
    DBLCBinstitution: TDBLookupComboBox;
    dblcbSSOKBasis: TDBLookupComboBox;
    dblcbSSOKEducation: TDBLookupComboBox;
    dblcbSSOKQualification: TDBLookupComboBox;
    Label13: TLabel;
    Label203: TLabel;
    Label213: TLabel;
    Label214: TLabel;
    Label35: TLabel;
    Label38: TLabel;
    Label39: TLabel;
    Label48: TLabel;
    lbInstitution: TBitBtn;
    TabSheet8: TTabSheet;
    BitBtn107: TBitBtn;
    BitBtn108: TBitBtn;
    BitBtn109: TBitBtn;
    BitBtn110: TBitBtn;
    Label204: TLabel;
    Label229: TLabel;
    Label231: TLabel;
    Label233: TLabel;
    DBEdit37: TDBEdit;
    DBEdit39: TDBEdit;
    DBEdit40: TDBEdit;
    DBLookupComboBox3: TDBLookupComboBox;
    cdsNostraSet: TClientDataSetEx;
    dsNostraSet: TDataSource;
    TabSheet9: TTabSheet;
    BitBtn111: TBitBtn;
    BitBtn112: TBitBtn;
    BitBtn113: TBitBtn;
    BitBtn114: TBitBtn;
    Label70: TLabel;
    Label238: TLabel;
    DBEdit2: TDBEdit;
    DBEdit41: TDBEdit;
    DBEdit45: TDBEdit;
    Label241: TLabel;
    Label243: TLabel;
    DBEdit51: TDBEdit;
    DBEdit92: TDBEdit;
    Label244: TLabel;
    Label245: TLabel;
    dbedCOD_STR_birth_prim: TDBEdit;
    Label246: TLabel;
    DBLookupComboBox5: TDBLookupComboBox;
    DBLookupComboBox9: TDBLookupComboBox;
    Label247: TLabel;
    Label248: TLabel;
    dblcbCOD_STR_birth: TDBLookupComboBox;
    Label239: TLabel;
    DBEdit42: TDBEdit;
    Label240: TLabel;
    DBEdit44: TDBEdit;
    Label235: TLabel;
    DBEdit17: TDBEdit;
    BitBtn115: TBitBtn;
    actShowPhoto: TAction;
    GroupBox8: TGroupBox;
    BitBtn116: TBitBtn;
    cdsOKPhotoBMP: TClientDataSetEx;
    dsOKPhotoBMP: TDataSource;
    GroupBox9: TGroupBox;
    imgSignature: TImage;
    MemoBMP: TMemo;
    TabSheet_21: TTabSheet;
    TabSheet_22: TTabSheet;
    GroupBox10: TGroupBox;
    cdbgokhospital: TClientDBGrid;
    GroupBox11: TGroupBox;
    Label227: TLabel;
    Label242: TLabel;
    Label249: TLabel;
    Label250: TLabel;
    Label251: TLabel;
    BitBtn117: TBitBtn;
    BitBtn118: TBitBtn;
    BitBtn119: TBitBtn;
    BitBtn120: TBitBtn;
    dbedHospitalDateClose: TDBEdit;
    dbedHospitalDateOpen: TDBEdit;
    DBLookupComboBox15: TDBLookupComboBox;
    GroupBox13: TGroupBox;
    Label252: TLabel;
    Label253: TLabel;
    Label254: TLabel;
    Label256: TLabel;
    BitBtn121: TBitBtn;
    BitBtn122: TBitBtn;
    BitBtn123: TBitBtn;
    BitBtn124: TBitBtn;
    DBEdit113: TDBEdit;
    DBEdit117: TDBEdit;
    DBEdit118: TDBEdit;
    TabSheet_23: TTabSheet;
    GroupBox12: TGroupBox;
    cdbgokprivilege: TClientDBGrid;
    GroupBox14: TGroupBox;
    BitBtn125: TBitBtn;
    BitBtn126: TBitBtn;
    BitBtn127: TBitBtn;
    BitBtn128: TBitBtn;
    GroupBox15: TGroupBox;
    cdbgokincrease: TClientDBGrid;
    Label262: TLabel;
    Label263: TLabel;
    DBEdit122: TDBEdit;
    DBEdit123: TDBEdit;
    DBEdit124: TDBEdit;
    Label264: TLabel;
    DBEdit125: TDBEdit;
    dsokhospital: TDataSource;
    dsokprivilege: TDataSource;
    dsokincrease: TDataSource;
    cdsokprivilege: TClientDataSetEx;
    cdsokincrease: TClientDataSetEx;
    cdsokhospital: TClientDataSetEx;
    dsSSokprivilege_SET: TDataSource;
    cdsSSokprivilege_SET: TClientDataSetEx;
    dsSSokhospital_SET: TDataSource;
    cdsSSokhospital_SET: TClientDataSetEx;
    Label265: TLabel;
    DBEdit126: TDBEdit;
    Label255: TLabel;
    Label257: TLabel;
    DBEdit120: TDBEdit;
    Label258: TLabel;
    DBEdit121: TDBEdit;
    Label259: TLabel;
    DBEdit128: TDBEdit;
    DBLookupComboBox11: TDBLookupComboBox;
    dsSSokincrease_SET: TDataSource;
    cdsSSokincrease_SET: TClientDataSetEx;
    Label260: TLabel;
    DBEdit119: TDBEdit;
    ToolButton23: TToolButton;
    TabTabel: TTabSheet;
    actTabel: TAction;
    GroupBox16: TGroupBox;
    GroupBox17: TGroupBox;
    dsTabel: TDataSource;
    cdsTabel: TClientDataSetEx;
    Button16: TButton;
    Button17: TButton;
    Button18: TButton;
    Button19: TButton;
    DBLookupComboBox26: TDBLookupComboBox;
    DBEdit127: TDBEdit;
    Label261: TLabel;
    Label266: TLabel;
    DBEdit129: TDBEdit;
    Label267: TLabel;
    DBEdit130: TDBEdit;
    Label268: TLabel;
    DBEdit131: TDBEdit;
    Label269: TLabel;
    DBEdit132: TDBEdit;
    Label270: TLabel;
    DBEdit133: TDBEdit;
    Label271: TLabel;
    DBEdit134: TDBEdit;
    Label272: TLabel;
    DBEdit135: TDBEdit;
    Label273: TLabel;
    TabSheet10: TTabSheet;
    GroupBox19: TGroupBox;
    cdbgok_business_voyage: TClientDBGrid;
    GroupBox20: TGroupBox;
    Label274: TLabel;
    Label275: TLabel;
    Label276: TLabel;
    Label277: TLabel;
    Label279: TLabel;
    Label280: TLabel;
    Label281: TLabel;
    BitBtn130: TBitBtn;
    BitBtn131: TBitBtn;
    BitBtn132: TBitBtn;
    BitBtn133: TBitBtn;
    DBEdit103: TDBEdit;
    DBEdit136: TDBEdit;
    DBEdit137: TDBEdit;
    DBLookupComboBox35: TDBLookupComboBox;
    DBEdit139: TDBEdit;
    DBEdit140: TDBEdit;
    DBEdit141: TDBEdit;
    Label282: TLabel;
    DBLookupComboBox37: TDBLookupComboBox;
    Label283: TLabel;
    DBLookupComboBox38: TDBLookupComboBox;
    DSss_ok_theme_business_voyage: TDataSource;
    DSss_ok_org_business_voyage: TDataSource;
    dsStr_Set: TDataSource;
    CDSss_ok_theme_business_voyage: TClientDataSetEx;
    CDSss_ok_org_business_voyage: TClientDataSetEx;
    cdsStr_Set: TClientDataSetEx;
    dsok_business_voyage: TDataSource;
    cdsok_business_voyage: TClientDataSetEx;
    Label278: TLabel;
    DBEdit138: TDBEdit;
    edRegion_RO2: TDBEdit;
    dblcbRegion_RO2: TDBLookupComboBox;
    edDistrRO_2: TDBEdit;
    dblcbDistrRO_2: TDBLookupComboBox;
    lbDistrRO2_: TLabel;
    lbGdePropisan2_: TLabel;
    edDistrRO2: TDBEdit;
    dblcbRegion_RO3: TDBLookupComboBox;
    DBEdit145: TDBEdit;
    dblcbDistrRO_3: TDBLookupComboBox;
    DBLookupComboBox43: TDBLookupComboBox;
    DSss_ok_passport_type: TDataSource;
    CDSss_ok_passport_type: TClientDataSetEx;
    cdsTabelLeave: TClientDataSetEx;
    GB_tabel_date: TGroupBox;
    cdbgTabel: TClientDBGrid;
    medBankDate: TMaskEdit;
    BitBtn136: TBitBtn;
    TabKurs: TTabSheet;
    GroupBox38: TGroupBox;
    BitBtn137: TBitBtn;
    GroupBox55: TGroupBox;
    GroupBox56: TGroupBox;
    GroupBox64: TGroupBox;
    GroupBox69: TGroupBox;
    BitBtn135: TBitBtn;
    BitBtn140: TBitBtn;
    BitBtn141: TBitBtn;
    cdsSSOKkv_kurs_SET: TClientDataSetEx;
    dsSSOKkv_kurs_SET: TDataSource;
    ToolButton24: TToolButton;
    actKurs: TAction;
    BitBtn142: TBitBtn;
    BitBtn143: TBitBtn;
    dsOKKurs: TDataSource;
    cdsOKKurs: TClientDataSetEx;
    DBEdit147: TDBEdit;
    DBLookupComboBox44: TDBLookupComboBox;
    DBEdit149: TDBEdit;
    DBLookupComboBox47: TDBLookupComboBox;
    Label287: TLabel;
    DBLookupComboBox48: TDBLookupComboBox;
    ClientDBGrid3: TClientDBGrid;
    cdbgOKKurs: TClientDBGrid;
    cdbgSSOKkv_kurs: TClientDBGrid;
    CDSssok_theme_business_voyage_SET: TClientDataSetEx;
    DSssok_theme_business_voyage_SET: TDataSource;
    cdsssok_org_business_voyage_SET: TClientDataSetEx;
    dsssok_org_business_voyage_SET: TDataSource;
    ListDetail: TListBox;
    TabSheet11: TTabSheet;
    cdsOK_kurs: TClientDataSetEx;
    dsOK_kurs: TDataSource;
    GroupBox72: TGroupBox;
    ClientDBGrid5: TClientDBGrid;
    Label293: TLabel;
    dblcbFormSS_OK_REGPLACE: TDBLookupComboBox;
    dsSS_OK_regplace: TDataSource;
    cdsSS_OK_regplace: TClientDataSetEx;
    dsSS_OK_city: TDataSource;
    cdsSS_OK_city: TClientDataSetEx;
    cdsOK_Kurs2: TClientDataSetEx;
    dsOKKurs2: TDataSource;
    Label294: TLabel;
    DBLookupComboBox50: TDBLookupComboBox;
    DBLookupComboBox51: TDBLookupComboBox;
    Label296: TLabel;
    DBEdit25: TDBEdit;
    TabSheet12: TTabSheet;
    GroupBox73: TGroupBox;
    CDBGok_zp_rate: TClientDBGrid;
    dsss_ok_zp_rate: TDataSource;
    dsss_ok_zp_rate_type: TDataSource;
    cdsss_ok_zp_rate: TClientDataSetEx;
    cdsss_ok_zp_rate_type: TClientDataSetEx;
    dsok_zp_rate: TDataSource;
    CDSok_zp_rate: TClientDataSetEx;
    GroupBox74: TGroupBox;
    Label297: TLabel;
    Label298: TLabel;
    Label299: TLabel;
    Label301: TLabel;
    BitBtn147: TBitBtn;
    BitBtn148: TBitBtn;
    BitBtn149: TBitBtn;
    BitBtn150: TBitBtn;
    DBEd_zp_rate_date: TDBEdit;
    DBEdit101: TDBEdit;
    DBLCB_zp_rate: TDBLookupComboBox;
    DBEdit155: TDBEdit;
    DBLookupComboBox54: TDBLookupComboBox;
    Label302: TLabel;
    Label300: TLabel;
    DBEdit69: TDBEdit;
    DBEdit99: TDBEdit;
    dbedCOD_OBL_LIVE: TDBEdit;
    DBEdit156: TDBEdit;
    DBEdit157: TDBEdit;
    dbedCOD_OBL_birth: TDBEdit;
    DBEdit158: TDBEdit;
    Label303: TLabel;
    cdsRegion2: TClientDataSetEx;
    dsRegion2: TDataSource;
    ClientDataSetEx1: TClientDataSetEx;
    DataSource1: TDataSource;
    cdsSDistr_RO2: TClientDataSetEx;
    dsSDistr_RO2: TDataSource;
    LbOklad: TLabel;
    Label304: TLabel;
    DBLookupComboBox52: TDBLookupComboBox;
    Label305: TLabel;
    Label1: TLabel;
    Label36: TLabel;
    medOK_beginDAte: TDBEdit;
    medOK_endDAte: TDBEdit;
    DBEdit142: TDBEdit;
    DBEdit144: TDBEdit;
    DBEdit159: TDBEdit;
    DBEdit160: TDBEdit;
    Label306: TLabel;
    Label307: TLabel;
    Label308: TLabel;
    Label309: TLabel;
    Label310: TLabel;
    DBEdit161: TDBEdit;
    DBEdit162: TDBEdit;
    Label311: TLabel;
    Label312: TLabel;
    DBEdit163: TDBEdit;
    DBEdit164: TDBEdit;
    DBEdit165: TDBEdit;
    DBEdit166: TDBEdit;
    Label313: TLabel;
    Label314: TLabel;
    Label315: TLabel;
    Label316: TLabel;
    DBEdit167: TDBEdit;
    DBEdit168: TDBEdit;
    DBEdit169: TDBEdit;
    DBEdit170: TDBEdit;
    Label317: TLabel;
    Label318: TLabel;
    Label319: TLabel;
    Label320: TLabel;
    DBEdit171: TDBEdit;
    DBEdit172: TDBEdit;
    Label321: TLabel;
    Label322: TLabel;
    cdsSSOKelection_Set2: TClientDataSetEx;
    dsSSOKelection_Set2: TDataSource;
    cdsSSOKelection_Set3: TClientDataSetEx;
    dsSSOKelection_Set3: TDataSource;
    Label323: TLabel;
    DBEdit173: TDBEdit;
    DBLookupComboBox55: TDBLookupComboBox;
    PCMainOK: TPageControl;
    IIASPanel_: TTabSheet;
    OptionsPanel_: TTabSheet;
    OpenPanel_: TTabSheet;
    RefPanel_: TTabSheet;
    TablePanel_: TTabSheet;
    FormPanel_: TTabSheet;
    DetailsPanel_: TTabSheet;
    Label326: TLabel;
    Label329: TLabel;
    dsSRegionRO2: TDataSource;
    cdsSRegionRO2: TClientDataSetEx;
    dsSS_OK_POST: TDataSource;
    cdsSS_OK_POST: TClientDataSetEx;
    cdsSS_OK_DEPARTMENT: TClientDataSetEx;
    dsSS_OK_DEPARTMENT: TDataSource;
    lbShowBank: TLabel;
    PageControl4: TPageControl;
    TabSheet13: TTabSheet;
    TabSheet14: TTabSheet;
    GroupBox58: TGroupBox;
    Label99: TLabel;
    Label100: TLabel;
    Label145: TLabel;
    Label146: TLabel;
    Label147: TLabel;
    Label148: TLabel;
    Label149: TLabel;
    Label150: TLabel;
    Label289: TLabel;
    Label290: TLabel;
    BitBtn65: TBitBtn;
    BitBtn66: TBitBtn;
    DBEDdate_in_leave: TDBEdit;
    BitBtn67: TBitBtn;
    BitBtn68: TBitBtn;
    DBEdit26: TDBEdit;
    DBLookupComboBox13: TDBLookupComboBox;
    DBEdit60: TDBEdit;
    DBEdit61: TDBEdit;
    DBEdit62: TDBEdit;
    DBEdit63: TDBEdit;
    DBEdit64: TDBEdit;
    DBEdit152: TDBEdit;
    DBEdit153: TDBEdit;
    edDay: TEdit;
    GroupBox75: TGroupBox;
    Label3: TLabel;
    Label11: TLabel;
    dbed_date_recall_begin: TDBEdit;
    dbed_date_recall_end: TDBEdit;
    Label45: TLabel;
    Label46: TLabel;
    DBEdit86: TDBEdit;
    DBEdit143: TDBEdit;
    BitBtn152: TBitBtn;
    BitBtn153: TBitBtn;
    Label85: TLabel;
    DBEdit150: TDBEdit;
    Label284: TLabel;
    dbed_PASS_DATE_END: TDBEdit;
    Label288: TLabel;
    Label291: TLabel;
    DBEdit32: TDBEdit;
    Label292: TLabel;
    dblcbGOsubmit: TDBLookupComboBox;
    cdsSS_OK_GOSUBMIT: TClientDataSetEx;
    dsSS_OK_GOSUBMIT: TDataSource;
    lb1: TLabel;
    Memo3: TMemo;
    BitBtn151: TBitBtn;
    ToolButton25: TToolButton;
    actRefreshRef: TAction;
    DSiias_birth_region: TDataSource;
    CDS_iias_birth_region: TClientDataSetEx;
    DS_iias_birth_distr: TDataSource;
    DS_iias_live_region: TDataSource;
    CDS_iias_live_region: TClientDataSetEx;
    DS_iias_live_distr: TDataSource;
    CDS_iias_live_distr: TClientDataSetEx;
    CDS_iias_birth_distr: TClientDataSet;
    dsDistrNew: TDataSource;
    cdsDistrNew: TClientDataSetEx;
    dsRegionNew: TDataSource;
    cdsRegionNew: TClientDataSetEx;
    ds_DBLCBdistr: TDataSource;
    cds_DBLCBdistr: TClientDataSetEx;
    ds_DBLCB_SRegion: TDataSource;
    cds_DBLCB_SRegion: TClientDataSetEx;
    ds_dblcbRegion_RO3: TDataSource;
    cds_dblcbRegion_RO3: TClientDataSetEx;
    ds_dblcbDistrRO_3: TDataSource;
    cds_dblcbDistrRO_3: TClientDataSetEx;
    ds_dblcbDistrRO_2: TDataSource;
    cds_dblcbDistrRO_2: TClientDataSetEx;
    ds_dblcbRegion_RO2: TDataSource;
    cds_dblcbRegion_RO2: TClientDataSetEx;
    actStatPersonal: TAction;
    actStatPersonalDep: TAction;
    BitBtn157: TBitBtn;
    BitBtn156: TBitBtn;
    BitBtn159: TBitBtn;
    actStatStag: TAction;
    BitBtn160: TBitBtn;
    actCopyPers: TAction;
    DBText1: TDBText;
    BitBtn161: TBitBtn;
    cdbgKursDva: TClientDBGrid;
    cdsKursDva: TClientDataSetEx;
    BitBtn162: TBitBtn;
    dsKursDva: TDataSource;
    TabCopyPers: TTabSheet;
    cdsTemp2: TClientDataSetEx;
    DBEdit78: TDBEdit;
    Label332: TLabel;
    Label333: TLabel;
    DBEdit151: TDBEdit;
    dsOK_Kurs3: TDataSource;
    cdsOK_Kurs3: TClientDataSetEx;
    TabSheet15: TTabSheet;
    GroupBox36: TGroupBox;
    CDBGok_freedays: TClientDBGrid;
    dsOK_Tabel: TDataSource;
    cdsOK_Tabel: TClientDataSetEx;
    gbTabelWork: TGroupBox;
    ClientDBGrid4: TClientDBGrid;
    MemoTabelworkList: TMemo;
    GroupBox71: TGroupBox;
    mcTabelwork: TMonthCalendar;
    MemoTabelworkDate: TMemo;
    bbPrazdnikDayInTabel: TBitBtn;
    BitBtn144: TBitBtn;
    rgTabelWork: TRadioGroup;
    BitBtn145: TBitBtn;
    BitBtn146: TBitBtn;
    gbTabel: TGroupBox;
    MCTabel: TMonthCalendar;
    memoTabel: TMemo;
    bbGotovoGbTabel: TBitBtn;
    bbCloseGbTabel: TBitBtn;
    rgTabel: TRadioGroup;
    bbClearGbTabel: TBitBtn;
    GB: TGroupBox;
    GB_PERS: TGroupBox;
    RG_avans: TRadioGroup;
    BitBtn165: TBitBtn;
    BitBtn167: TBitBtn;
    BitBtn164: TBitBtn;
    medBankDate2: TMaskEdit;
    cdsOK_FreeDays: TClientDataSetEx;
    dsOK_FreeDays: TDataSource;
    DBEdit154: TDBEdit;
    DBEdit174: TDBEdit;
    DBEdit175: TDBEdit;
    bbGB_PERS: TBitBtn;
    Label334: TLabel;
    Label335: TLabel;
    Label336: TLabel;
    BitBtn169: TBitBtn;
    BitBtn170: TBitBtn;
    BitBtn171: TBitBtn;
    BitBtn172: TBitBtn;
    edPrimFreeDays1: TEdit;
    Label337: TLabel;
    actGOSubmitDismiss: TAction;
    gb_Xalk: TGroupBox;
    DBLookupComboBox41_: TDBLookupComboBox;
    Label341: TLabel;
    DBEdit179: TDBEdit;
    DBLookupComboBox39: TDBLookupComboBox;
    DBEdit177: TDBEdit;
    Label339: TLabel;
    DBLookupComboBox40: TDBLookupComboBox;
    DBEdit178: TDBEdit;
    Label340: TLabel;
    actGoRefuse: TAction;
    actGoUtverdit: TAction;
    actGOPodtverdit: TAction;
    actGOtoVveden: TAction;
    Label6: TLabel;
    DBEdit89: TDBEdit;
    Label4: TLabel;
    DBLookupComboBox14: TDBLookupComboBox;
    Label191: TLabel;
    dbedIronMaiden: TDBEdit;
    bbGOTO_IIAS: TBitBtn;
    BitBtn168: TBitBtn;
    GroupBox76: TGroupBox;
    Label324: TLabel;
    Label325: TLabel;
    edRegion_RO2_: TDBEdit;
    dblcbRegion_RO2_: TDBLookupComboBox;
    edDistrRO_2_: TDBEdit;
    dblcbDistrRO_2_: TDBLookupComboBox;
    dbedHOME_ADDRESSFACT_: TDBEdit;
    Label25: TLabel;
    Label29: TLabel;
    DBEdit146: TDBEdit;
    dblcbFormSS_OK_REGPLACE_: TDBLookupComboBox;
    dbedFormPASS_REG_: TDBEdit;
    Label286: TLabel;
    lbFormRegPlace_: TLabel;
    Label328: TLabel;
    ed_iias_str_NEW: TDBEdit;
    DBLCB_iias_str_NEW: TDBLookupComboBox;
    Label343: TLabel;
    DBEdit183: TDBEdit;
    Label344: TLabel;
    DBEdit184: TDBEdit;
    Label345: TLabel;
    DBEdit185: TDBEdit;
    DBLookupComboBox53: TDBLookupComboBox;
    DBLookupComboBox56: TDBLookupComboBox;
    DBEdit187: TDBEdit;
    DBEdit188: TDBEdit;
    Label347: TLabel;
    Label348: TLabel;
    Label349: TLabel;
    Label350: TLabel;
    DBEdit189: TDBEdit;
    DBLookupComboBox57: TDBLookupComboBox;
    DBEdit190: TDBEdit;
    Label351: TLabel;
    Label28: TLabel;
    DBLookupComboBox59: TDBLookupComboBox;
    Label20: TLabel;
    dbeOK_tabno: TDBEdit;
    Label18: TLabel;
    dblcbOKStatus: TDBLookupComboBox;
    bbApplication: TBitBtn;
    bbUvol: TBitBtn;
    BitBtn134: TBitBtn;
    cdsSSOKPost_new: TClientDataSetEx;
    dsSSOKPost_new: TDataSource;
    execprc: TClientDataSetEx;
    chbSvetaOnly: TCheckBox;
    Label169: TLabel;
    DBEdit11: TDBEdit;
    Label295: TLabel;
    DBEdit43: TDBEdit;
    DBLookupComboBox42: TDBLookupComboBox;
    Label342: TLabel;
    DBLookupComboBox45: TDBLookupComboBox;
    Label346: TLabel;
    DBEdit74: TDBEdit;
    cdsss_ok_education_count: TClientDataSetEx;
    dsss_ok_education_count: TDataSource;
    Label352: TLabel;
    DBLookupComboBox46: TDBLookupComboBox;
    DBEdit148: TDBEdit;
    DBEdit180: TDBEdit;
    Label353: TLabel;
    Button8: TButton;
    actObiektivkaAgroUz: TAction;
    TabSheet16: TTabSheet;
    OpenDlFile: TOpenDialog;
    cdsOK_diplom: TClientDataSetEx;
    dsOK_diplom: TDataSource;
    ClientDBGrid2: TClientDBGrid;
    Button9: TButton;
    Label356: TLabel;
    DBLookupComboBox49: TDBLookupComboBox;
    cdsSS_OK_vid_education: TClientDataSetEx;
    dsSS_OK_vid_education: TDataSource;
    DBEdit186: TDBEdit;
    BitBtn166: TBitBtn;
    Label357: TLabel;
    DBEdit191: TDBEdit;
    DBLookupComboBox58: TDBLookupComboBox;
    Label7: TLabel;
    DBEdit7: TDBEdit;
    DBLookupComboBox1: TDBLookupComboBox;
    Label285: TLabel;
    DBEdit192: TDBEdit;
    cdsSpravka: TClientDataSetEx;
    dsSpravka: TDataSource;
    DBEdit193: TDBEdit;
    gbXALKHaveData: TGroupBox;
    Label361: TLabel;
    DBLookupComboBox60: TDBLookupComboBox;
    Label362: TLabel;
    DBLookupComboBox61: TDBLookupComboBox;
    Label363: TLabel;
    DBLookupComboBox62: TDBLookupComboBox;
    Label364: TLabel;
    DBLookupComboBox63: TDBLookupComboBox;
    DBLookupComboBox64: TDBLookupComboBox;
    Label365: TLabel;
    Label366: TLabel;
    DBLookupComboBox65: TDBLookupComboBox;
    Label367: TLabel;
    Label368: TLabel;
    BitBtn178: TBitBtn;
    Label369: TLabel;
    DBLookupComboBox66: TDBLookupComboBox;
    GroupBox77: TGroupBox;
    Label370: TLabel;
    Label371: TLabel;
    Label373: TLabel;
    Label374: TLabel;
    Label375: TLabel;
    DBLookupComboBox67: TDBLookupComboBox;
    DBLookupComboBox68: TDBLookupComboBox;
    DBLookupComboBox70: TDBLookupComboBox;
    DBLookupComboBox71: TDBLookupComboBox;
    DBLookupComboBox72: TDBLookupComboBox;
    Label327: TLabel;
    Label372: TLabel;
    MemoTest: TMemo;
    PageControl5: TPageControl;
    TabSheet17: TTabSheet;
    TabSheet18: TTabSheet;
    GroupBox60: TGroupBox;
    ClientDBGrid6: TClientDBGrid;
    GroupBox78: TGroupBox;
    Label376: TLabel;
    Label377: TLabel;
    Label378: TLabel;
    Label379: TLabel;
    Label380: TLabel;
    Label381: TLabel;
    Label382: TLabel;
    DBEdit194: TDBEdit;
    DBEdit195: TDBEdit;
    DBEdit196: TDBEdit;
    DBEdit197: TDBEdit;
    DBEdit198: TDBEdit;
    DBEdit200: TDBEdit;
    DBEdit201: TDBEdit;
    DBEdit199: TDBEdit;
    DBEdit202: TDBEdit;
    DBEdit203: TDBEdit;
    DBEdit204: TDBEdit;
    BitBtn182: TBitBtn;
    BitBtn183: TBitBtn;
    bbSudDel2: TBitBtn;
    DBEdit205: TDBEdit;
    Label383: TLabel;
    DBEdit206: TDBEdit;
    ClientDBGrid7: TClientDBGrid;
    cdsMaxallaSpravka: TClientDataSetEx;
    dsMaxallaSpravka: TDataSource;
    GroupBox79: TGroupBox;
    edCopyFamily: TEdit;
    Label387: TLabel;
    edCopyMFO: TEdit;
    Label388: TLabel;
    BitBtn173: TBitBtn;
    dsOkPersonalcopy: TDataSource;
    cdsOkPersonalcopy: TClientDataSetEx;
    DBEdit207: TDBEdit;
    DBEdit208: TDBEdit;
    DBEdit209: TDBEdit;
    DBEdit210: TDBEdit;
    BitBtn70: TBitBtn;
    actProverkafilial: TAction;
    ClientDBGrid9: TClientDBGrid;
    Label389: TLabel;
    lbDekret: TLabel;
    dsOKStatSalary2: TDataSource;
    cdsOKStatSalary2: TClientDataSetEx;
    bbDoljnosti: TBitBtn;
    bbDep: TBitBtn;
    CDS_DBBranch: TClientDataSet;
    Label390: TLabel;
    DBEdit211: TDBEdit;
    BitBtn179: TBitBtn;
    BitBtn181: TBitBtn;
    BitBtn184: TBitBtn;
    lbFilial: TLabel;
    lb: TLabel;
    EdcopyNPS_ID: TEdit;
    Label391: TLabel;
    edCopyNewTabno: TEdit;
    tbCopyPers: TToolButton;
    GroupBox80: TGroupBox;
    Label354: TLabel;
    DBEdit181: TDBEdit;
    DBEdit182: TDBEdit;
    Label355: TLabel;
    lbl2: TLabel;
    EditFileName: TEdit;
    BtnAddlFile: TButton;
    BitBtn154: TBitBtn;
    BitBtn176: TBitBtn;
    BitBtn139: TBitBtn;
    BitBtn188: TBitBtn;
    Label360: TLabel;
    Label191stag: TLabel;
    dbedIronMaidenStag: TDBEdit;
    BitBtn163: TBitBtn;
    Label392: TLabel;
    BitBtn189: TBitBtn;
    BitBtn190: TBitBtn;
    Label393: TLabel;
    DBEdit212: TDBEdit;
    DBLookupComboBox69: TDBLookupComboBox;
    BitBtn191: TBitBtn;
    dsSSOKPostCategory: TDataSource;
    cdsSSOKPostCategory: TClientDataSetEx;
    BitBtn192: TBitBtn;
    Button20: TButton;
    DBText5: TDBText;
    dsss_ok_addinform: TDataSource;
    cdsss_ok_addinform: TClientDataSetEx;
    GroupBox81: TGroupBox;
    Label386: TLabel;
    Label385: TLabel;
    Label338: TLabel;
    Label104: TLabel;
    Label103: TLabel;
    DBLookupComboBox10: TDBLookupComboBox;
    DBEdit30: TDBEdit;
    DBEdit29: TDBEdit;
    DBEdit176: TDBEdit;
    Button14: TButton;
    BitBtn76: TBitBtn;
    BitBtn75: TBitBtn;
    BitBtn74: TBitBtn;
    BitBtn73: TBitBtn;
    BitBtn187: TBitBtn;
    BitBtn186: TBitBtn;
    BitBtn185: TBitBtn;
    BitBtn180: TBitBtn;
    GroupBox82: TGroupBox;
    Label102: TLabel;
    Label101: TLabel;
    DBEdit28: TDBEdit;
    DBEdit27: TDBEdit;
    BitBtn69: TBitBtn;
    BitBtn72: TBitBtn;
    BitBtn71: TBitBtn;
    bbSudDel: TBitBtn;
    EditFileNameSpravka: TEdit;
    Label358: TLabel;
    Button1: TButton;
    BitBtn174: TBitBtn;
    BitBtn177: TBitBtn;
    BitBtn175: TBitBtn;
    bbSudDel3: TBitBtn;
    Label359: TLabel;
    DBEdit31: TDBEdit;
    DBEdit93: TDBEdit;
    DBEdit213: TDBEdit;
    Label384: TLabel;
    Label394: TLabel;
    Label395: TLabel;
    Label396: TLabel;
    GroupBox83: TGroupBox;
    DBEd_poststring: TDBEdit;
    DBEd_depstring: TDBEdit;
    DBlcb_depstring3: TDBLookupComboBox;
    DBlcb_poststring3: TDBLookupComboBox;
    DBEd_depstring2: TDBEdit;
    DBEd_poststring2: TDBEdit;
    BitBtn138: TBitBtn;
    BitBtn33: TBitBtn;
    BitBtn34: TBitBtn;
    BitBtn35: TBitBtn;
    BitBtn36: TBitBtn;
    ChbArticle: TCheckBox;
    DBEdit801: TDBEdit;
    DBEdit802: TDBEdit;
    DBEdit806: TDBEdit;
    DBEdit807: TDBEdit;
    DBEdit808: TDBEdit;
    DBEdit811: TDBEdit;
    dblcbArticle: TDBLookupComboBox;
    dblcbBaseMove: TDBLookupComboBox;
    dblcbTypeperiod: TDBLookupComboBox;
    Label331: TLabel;
    Label330: TLabel;
    Label119: TLabel;
    Label120: TLabel;
    Label122: TLabel;
    Label123: TLabel;
    Label124: TLabel;
    Label125: TLabel;
    Label126: TLabel;
    Label55: TLabel;
    Label83: TLabel;
    Label84: TLabel;
    Label97: TLabel;
    Label397: TLabel;
    DBEdit214: TDBEdit;
    Label398: TLabel;
    DBEdit215: TDBEdit;
    Label399: TLabel;
    cdsPensioner: TClientDataSetEx;
    dsPensioner: TDataSource;
    bbApplicationRotation: TBitBtn;
    Label422: TLabel;
    DBEdit230: TDBEdit;
    TabPensioner: TTabSheet;
    GroupBox84: TGroupBox;
    GroupBox85: TGroupBox;
    Label400: TLabel;
    Label401: TLabel;
    Label402: TLabel;
    Label403: TLabel;
    Label404: TLabel;
    Label405: TLabel;
    Label406: TLabel;
    Label407: TLabel;
    Label408: TLabel;
    Label409: TLabel;
    Label410: TLabel;
    Label411: TLabel;
    Label413: TLabel;
    Label415: TLabel;
    Label418: TLabel;
    Label419: TLabel;
    Label420: TLabel;
    Label421: TLabel;
    DBEdit216: TDBEdit;
    DBEdit217: TDBEdit;
    DBEdit218: TDBEdit;
    DBEdit219: TDBEdit;
    DBEdit220: TDBEdit;
    DBEdit221: TDBEdit;
    DBEd_PensionerTabnoNEW: TDBEdit;
    DBLookupComboBox41: TDBLookupComboBox;
    DBEdit223: TDBEdit;
    DBEdit224: TDBEdit;
    DBEdit225: TDBEdit;
    DBEdit229: TDBEdit;
    DBEdit231: TDBEdit;
    DBLookupComboBox75: TDBLookupComboBox;
    DBEdit233: TDBEdit;
    DBLookupComboBox77: TDBLookupComboBox;
    DBEdit235: TDBEdit;
    BitBtn193: TBitBtn;
    BitBtn194: TBitBtn;
    ToolButton27: TToolButton;
    BitBtn129: TBitBtn;
    Label412: TLabel;
    DBText6: TDBText;
    GroupBox86: TGroupBox;
    edPensionerTabno: TEdit;
    BitBtn196: TBitBtn;
    BitBtn195: TBitBtn;
    TabRotation: TTabSheet;
    GroupBox87: TGroupBox;
    cdbgPensioner: TClientDBGrid;
    ClientDBGrid8: TClientDBGrid;
    GroupBox88: TGroupBox;
    GroupBox89: TGroupBox;
    Label424: TLabel;
    Label425: TLabel;
    Label426: TLabel;
    Label427: TLabel;
    Label429: TLabel;
    Label432: TLabel;
    Label433: TLabel;
    bClear: TButton;
    bCancel: TButton;
    medAppointmentDate: TMaskEdit;
    medBasisDate: TMaskEdit;
    edBasisNum: TEdit;
    cbBaseMoveR: TComboBox;
    edOfficeNameR: TEdit;
    edOfficeAddressNowR: TEdit;
    Label414: TLabel;
    Label416: TLabel;
    ToolButton26: TToolButton;
    BitBtn197: TBitBtn;
    MemoRotation2: TMemo;
    bbTabno1: TBitBtn;
    Label423: TLabel;
    bbTabno2: TBitBtn;
    BitBtn200: TBitBtn;
    BitBtn201: TBitBtn;
    edTabno1: TEdit;
    edTabno2: TEdit;
    MemoRotation1: TMemo;
    Label430: TLabel;
    lbGO_razreshil: TLabel;
    Label434: TLabel;
    Label435: TLabel;
    BitBtn202: TBitBtn;
    MemoTestR: TMemo;
    dsss_ok_addinform2: TDataSource;
    cdsss_ok_addinform2: TClientDataSetEx;
    DBTgosubmit: TDBText;
    LBgosubmit: TLabel;
    Source2: TClientDataSetEx;
    Label417: TLabel;
    Label428: TLabel;
    Label431: TLabel;
    Label436: TLabel;
    Label437: TLabel;
    Label438: TLabel;
    Label439: TLabel;
    Label440: TLabel;
    BitBtn155: TBitBtn;
    BitBtn158: TBitBtn;
    actOtpusk: TAction;
    actOtpuskOut: TAction;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure SplitterCanResize(Sender: TObject; var NewSize: Integer;
      var Accept: Boolean);
    procedure actToolBarExecute(Sender: TObject);
    procedure actStatusBarExecute(Sender: TObject);
    procedure actAboutExecute(Sender: TObject);
    procedure ActionListUpdate(Action: TBasicAction; var Handled: Boolean);
    procedure cdsSSOKPost_SETReconcileError(DataSet: TCustomClientDataSet;
      E: EReconcileError; UpdateKind: TUpdateKind;
      var Action: TReconcileAction);
    procedure FormShow(Sender: TObject);
    procedure actSSOKPostExecute(Sender: TObject);
    procedure actSSOKEducationExecute(Sender: TObject);
    procedure actSSOKNationalityExecute(Sender: TObject);
    procedure actSSOKPartyExecute(Sender: TObject);
    procedure actSSOKDegreeExecute(Sender: TObject);
    procedure actSSOKAcademicExecute(Sender: TObject);
    procedure actSSOKLanguageExecute(Sender: TObject);
    procedure actSSOKLevelLanguageExecute(Sender: TObject);
    procedure actSSOKTypePeriodExecute(Sender: TObject);
    procedure actSSOKRelationExecute(Sender: TObject);
    procedure actSSOKQualificationExecute(Sender: TObject);
    procedure actSSOKLeaveExecute(Sender: TObject);
    procedure actSSOKMotiveDismissialExecute(Sender: TObject);
    procedure actSSOKYouthExecute(Sender: TObject);
    procedure actSSOKDepartmentTypeExecute(Sender: TObject);
    procedure actSSOKDepartmentExecute(Sender: TObject);
    procedure actSSOKArticleExecute(Sender: TObject);
    procedure actSSOKCommandTypeExecute(Sender: TObject);
    procedure actSSOKTemplateCommandExecute(Sender: TObject);
    procedure ActPrevExecute(Sender: TObject);
    procedure GetRefCDBG(cdbgSSOK: TClientDBGrid);
    procedure GetRef(cdbgSSOK: TClientDBGrid);
    procedure cdsSSOKDepartment_SETAfterPost(DataSet: TDataSet);
    procedure actTableExecute(Sender: TObject);
    procedure actFormExecute(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure actSaveNewExecute(Sender: TObject);
    procedure cdsOKPersonal_NEWAfterOpen(DataSet: TDataSet);
    procedure actUndoChangesExecute(Sender: TObject);
    procedure actRefExecute(Sender: TObject);
    procedure actDetailsExecute(Sender: TObject);
    procedure actOrderExecute(Sender: TObject);
    procedure dbeOK_HOME_ADDRESSFACTChange(Sender: TObject);
    procedure actFilterExecute(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbeDetailsPCodeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbeDetailsPCodeExit(Sender: TObject);
    procedure cdsOK_BeforePost(DataSet: TDataSet);
    procedure cdsOK_AfterPost(DataSet: TDataSet);
    procedure TabOKEducation_0Show(Sender: TObject);
    procedure ActDetailNewExecute(Sender: TObject);
    procedure ActDetailSaveExecute(Sender: TObject);
    procedure ActDetailDeleteExecute(Sender: TObject);
    procedure cdsOKEducationAfterOpen(DataSet: TDataSet);
    procedure ActDetailUndoExecute(Sender: TObject);
    procedure cdsOKAcademicAfterOpen(DataSet: TDataSet);
    procedure TabSheet_1Show(Sender: TObject);
    procedure cdsOKDegreeAfterOpen(DataSet: TDataSet);
    procedure cdsOKAwardAfterOpen(DataSet: TDataSet);
    procedure TabDegree_2Show(Sender: TObject);
    procedure TabSheet_3Show(Sender: TObject);
    procedure cdsOKScientificAfterOpen(DataSet: TDataSet);
    procedure TabOKScientific_4Show(Sender: TObject);
    procedure TabSheet_5Show(Sender: TObject);
    procedure cdsOkLanguageAfterOpen(DataSet: TDataSet);
    procedure TabSheet_6Show(Sender: TObject);
    procedure cdsOkRelationAfterOpen(DataSet: TDataSet);
    procedure TabSheet_7Show(Sender: TObject);
    procedure cdsOKPeriodAfterOpen(DataSet: TDataSet);
    procedure TabSheet_8Show(Sender: TObject);
    procedure cdsOKRiseAfterOpen(DataSet: TDataSet);
    procedure TabOKRise_9Show(Sender: TObject);
    procedure cdsOKElectionAfterOpen(DataSet: TDataSet);
    procedure TabSheet_10Show(Sender: TObject);
    procedure cdsOKPremiumAfterOpen(DataSet: TDataSet);
    procedure TabSheet_11Show(Sender: TObject);
    procedure cdsOKArmyAfterOpen(DataSet: TDataSet);
    procedure TabSheet_12Show(Sender: TObject);
    procedure cdsOKPartyAfterOpen(DataSet: TDataSet);
    procedure TabSheet_13Show(Sender: TObject);
    procedure cdsOKYouthAfterOpen(DataSet: TDataSet);
    procedure TabSheet_14Show(Sender: TObject);
    procedure cdsOKLeaveAfterOpen(DataSet: TDataSet);
    procedure cdsOKConvictionsAfterOpen(DataSet: TDataSet);
    procedure cdsOKAddInformAfterOpen(DataSet: TDataSet);
    procedure cdsOKPenaltyAfterOpen(DataSet: TDataSet);
    procedure cdsOKChangeFIOAfterOpen(DataSet: TDataSet);
    procedure TabSheet_16Show(Sender: TObject);
    procedure TabSheet_17Show(Sender: TObject);
    procedure TabSheet_18Show(Sender: TObject);
    procedure TabSheet_19Show(Sender: TObject);
    procedure TabSheet_20Show(Sender: TObject);
    procedure cdsOKPostAfterOpen(DataSet: TDataSet);
    procedure cdsOKPostAfterPost(DataSet: TDataSet);
    procedure actStatSalaryExecute(Sender: TObject);
    procedure actStatSaveExecute(Sender: TObject);
    procedure actStatDeleteExecute(Sender: TObject);
    procedure actStatUndoExecute(Sender: TObject);
    procedure actStatNewExecute(Sender: TObject);
    procedure cdsOKStatBeforePost(DataSet: TDataSet);
    procedure actChangeFIOExecute(Sender: TObject);
    procedure actDismissExecute(Sender: TObject);
    procedure actAppointExecute(Sender: TObject);
    procedure actSaveExistExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actUnactiveExecute(Sender: TObject);
    procedure DBEd_RegionChange(Sender: TObject);
    procedure actDetailsFirstExecute(Sender: TObject);
    procedure actDetailsLastExecute(Sender: TObject);
    procedure actDetailsPrevExecute(Sender: TObject);
    procedure actDetailsNextExecute(Sender: TObject);
    procedure CBDetailsChange(Sender: TObject);
    procedure ViewRef(NumberRef : Integer);
    procedure actSSOKPenaltyExecute(Sender: TObject);
    procedure TabPhotoShow(Sender: TObject);
    procedure cdsOKPhotoAfterOpen(DataSet: TDataSet);
    procedure cdsOKPhotoBeforeGetRecords(Sender: TObject;
      var OwnerData: OleVariant);
    procedure actPhotoInsertExecute(Sender: TObject);
    procedure actPhotoRemoveExecute(Sender: TObject);
    procedure actPhotoAttachExecute(Sender: TObject);
    procedure actPhotoActualSizeExecute(Sender: TObject);
    procedure actPhotoSaveExecute(Sender: TObject);
    procedure dsOKPhotoDataChange(Sender: TObject; Field: TField);
    procedure actAnketaExecute(Sender: TObject);
    function PrepareOle(FileName: String; TypeApp: String): Variant;
    function check_date_yyyymmdd(yyyy: String; mm: String; dd: String;future_:string;check_dm:string): string;
    procedure actLichKartaAExecute(Sender: TObject);
    procedure dbeokRegionChange(Sender: TObject);
    procedure cdbgOKEducationEditButtonClick(Sender: TObject);
    procedure actRef2Execute(Sender: TObject);
    procedure actObiektivkaExecute(Sender: TObject);
    procedure actOptionsExecute(Sender: TObject);
    procedure edFilialExit(Sender: TObject);
    procedure edOfficeAddressExit(Sender: TObject);
    procedure ChbArticleClick(Sender: TObject);
    procedure actRezervSetExecute(Sender: TObject);
    procedure addLookUpField(DataSet_, LDataSet_: TDataSet;
                             FieldName_, KeyFields_, LookUpKeyFields_, LookUpResultField_: String;
                             CreateField: Boolean = False);
    procedure actToExcelExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure cdsSSOKDepartment_SETBeforePost(DataSet: TDataSet);
    procedure cdsOKPersonalBeforeEdit(DataSet: TDataSet);
    procedure cdsOKPersonalAfterOpen(DataSet: TDataSet);
//    procedure BitBtn99Click(Sender: TObject);
//    procedure BitBtn100Click(Sender: TObject);
    procedure dsOKPersonalDataChange(Sender: TObject; Field: TField);
    procedure chbTabVisibleClick(Sender: TObject);
    procedure actLichKartaBExecute(Sender: TObject);
    procedure actObiektivkaRTFExecute(Sender: TObject);
    procedure actLichKartaB_rtfExecute(Sender: TObject);
    procedure actStatExecute(Sender: TObject);
    procedure cdbgOK_PERSONALDblClick(Sender: TObject);
    procedure actChangePassportExecute(Sender: TObject);
    procedure dbeOK_PASS_NUMKeyPress(Sender: TObject; var Key: Char);
    procedure dbeOK_PASS_SERIYAKeyPress(Sender: TObject; var Key: Char);
    procedure actAppointNewExecute(Sender: TObject);
    procedure edDepChange(Sender: TObject);
    procedure DBEdPostChange(Sender: TObject);
    procedure DBLCBpostChange(Sender: TObject);
    procedure CBdepChange(Sender: TObject);
    procedure TreeVKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure TreeVClick(Sender: TObject);
    procedure actDekretExecute(Sender: TObject);
    procedure actDekretOutExecute(Sender: TObject);
    procedure actShuBankdaExecute(Sender: TObject);
    procedure PCDetailsChange(Sender: TObject);
    procedure dbedHOME_ADDRESSFACTChange(Sender: TObject);
    procedure cdsOKRezervDetailAfterOpen(DataSet: TDataSet);
    procedure cdsOKRezervBeforePost(DataSet: TDataSet);
    procedure bbSaveOptionsClick(Sender: TObject);
    procedure edSpecialChange(Sender: TObject);
    procedure cbSpecialChange(Sender: TObject);
    procedure actReAcceptExecute(Sender: TObject);
    procedure actFindDepExecute(Sender: TObject);
    procedure edDepFindKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actIIASExecute(Sender: TObject);
    procedure dblcbS_STRCloseUp(Sender: TObject);
    procedure actShowPhotoExecute(Sender: TObject);
    procedure BitBtn116Click(Sender: TObject);
    procedure cdsokhospitalAfterOpen(DataSet: TDataSet);
    procedure TabSheet_21Show(Sender: TObject);
    procedure cdsOkvoyageAfterOpen(DataSet: TDataSet);
    procedure EnterKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbedHospitalDateOpenKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbedHospitalDateCloseKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cdsokprivilegeAfterOpen(DataSet: TDataSet);
    procedure TabSheet_22Show(Sender: TObject);
    procedure TabSheet_23Show(Sender: TObject);
    procedure cdsokincreaseAfterOpen(DataSet: TDataSet);
    procedure actTabelExecute(Sender: TObject);
    procedure Button19Click(Sender: TObject);
    procedure Button17Click(Sender: TObject);
    procedure Button18Click(Sender: TObject);
    procedure Button16Click(Sender: TObject);
    procedure TabSheet10Show(Sender: TObject);
    procedure cdsok_business_voyageAfterOpen(DataSet: TDataSet);
    procedure DBEdit137KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure PrintTabel(days: string);
    procedure BitBtn137Click(Sender: TObject);
    procedure BitBtn135Click(Sender: TObject);
    procedure MCTabelClick(Sender: TObject);
    procedure bbGotovoGbTabelClick(Sender: TObject);
    procedure bbClearGbTabelClick(Sender: TObject);
    procedure bbCloseGbTabelClick(Sender: TObject);
    procedure ClientDBGrid4CellClick(Column: TColumn);
    procedure BitBtn145Click(Sender: TObject);
    procedure BitBtn146Click(Sender: TObject);
    procedure BitBtn144Click(Sender: TObject);
    procedure BitBtn140Click(Sender: TObject);
    procedure mcTabelworkClick(Sender: TObject);
    procedure bbPrazdnikDayInTabelClick(Sender: TObject);
    procedure BitBtn141Click(Sender: TObject);
    procedure actKursExecute(Sender: TObject);
    procedure BitBtn142Click(Sender: TObject);
    procedure cdsOKKursAfterOpen(DataSet: TDataSet);
    procedure BitBtn143Click(Sender: TObject);
    procedure ListDetailClick(Sender: TObject);
    procedure cdsOK_kursAfterOpen(DataSet: TDataSet);
    procedure TabSheet11Show(Sender: TObject);
    procedure cdsOK_Kurs2AfterOpen(DataSet: TDataSet);
    procedure DBEdit134KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure addLookUpField_OkPersonal;
    procedure CDSok_zp_rateAfterOpen(DataSet: TDataSet);
    procedure TabSheet12Show(Sender: TObject);
    procedure DBEd_zp_rate_dateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbedCOD_OBL_LIVEKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbedCOD_OBL_birthKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DBLookupComboBox27Click(Sender: TObject);
    procedure DBLookupComboBox9Click(Sender: TObject);
    procedure ed_iias_live_regionChange(Sender: TObject);
    procedure edRegion_RO2Change(Sender: TObject);
    procedure edDistrRO2Change(Sender: TObject);
    procedure cdsOKPeriodAfterScroll(DataSet: TDataSet);
    procedure cdsOKPeriodAfterRefresh(DataSet: TDataSet);
    procedure BitBtn151Click(Sender: TObject);
    procedure actRefreshRefExecute(Sender: TObject);
    procedure dblcb_iias_birth_distrEnter(Sender: TObject);
    procedure dblcb_iias_birth_distrCloseUp(Sender: TObject);
    procedure dblcb_iias_live_distrCloseUp(Sender: TObject);
    procedure dblcb_iias_live_distrEnter(Sender: TObject);
    procedure dblcbDistrNewCloseUp(Sender: TObject);
    procedure dblcbDistrNewEnter(Sender: TObject);
    procedure DBLCBdistrCloseUp(Sender: TObject);
    procedure DBLCBdistrEnter(Sender: TObject);
    procedure dblcbDistrRO_3CloseUp(Sender: TObject);
    procedure dblcbDistrRO_2CloseUp(Sender: TObject);
    procedure dblcbDistrRO_3Enter(Sender: TObject);
    procedure dblcbDistrRO_2Enter(Sender: TObject);
    procedure actStatPersonalExecute(Sender: TObject);
    procedure actStatPersonalDepExecute(Sender: TObject);
    procedure actStatStagExecute(Sender: TObject);
    procedure BitBtn160Click(Sender: TObject);
    procedure cdbgToExcel(cdbgREP: TClientDBGrid; rep1,rep2,rep3,rep4 : string);
    procedure BitBtn161Click(Sender: TObject);
    procedure BitBtn162Click(Sender: TObject);
    procedure cdsOK_Kurs3AfterOpen(DataSet: TDataSet);
    procedure TabSheet15Show(Sender: TObject);
    procedure cdsOK_TabelAfterOpen(DataSet: TDataSet);
    procedure BitBtn164Click(Sender: TObject);
    procedure bbGB_PERSClick(Sender: TObject);
    procedure TextOut_(gb_: tgroupbox; X, Y: Integer; const Text: string; i : integer);
    procedure RG_avansClick(Sender: TObject);
    procedure GB_PERSClick(Sender: TObject);
    procedure BitBtn165Click(Sender: TObject);
    procedure BitBtn167Click(Sender: TObject);
    procedure cdsOK_FreeDaysAfterOpen(DataSet: TDataSet);
    procedure ed_iias_strChange(Sender: TObject);
    procedure edBirthChange(Sender: TObject);
    procedure dbedIronMaidenChange(Sender: TObject);
    procedure ed_iias_live_strChange(Sender: TObject);
    procedure ed_iias_live_regionClick(Sender: TObject);
    procedure ed_iias_live_distrClick(Sender: TObject);
    procedure ed_iias_birth_regionClick(Sender: TObject);
    procedure dblcb_iias_birth_regionClick(Sender: TObject);
    procedure ed_iias_birth_distrClick(Sender: TObject);
    procedure dblcb_iias_birth_distrClick(Sender: TObject);
    procedure ed_iias_strClick(Sender: TObject);
    procedure DBLCB_iias_strClick(Sender: TObject);
    procedure ed_iias_live_strClick(Sender: TObject);
    procedure DBLCB_iias_live_strClick(Sender: TObject);
    procedure bbGOTO_IIASClick(Sender: TObject);
    procedure BitBtn168Click(Sender: TObject);
    procedure DBEdit156Exit(Sender: TObject);
    procedure dsOkRelationDataChange(Sender: TObject; Field: TField);
    procedure DBEdit158Exit(Sender: TObject);
    procedure dsOKPeriodDataChange(Sender: TObject; Field: TField);
    procedure DBEdit184Change(Sender: TObject);
    procedure DBEdit185Change(Sender: TObject);
    procedure DBEdit185Click(Sender: TObject);
    procedure DBLCB_iias_str_NEWClick(Sender: TObject);
    procedure ed_iias_str_NEWChange(Sender: TObject);
    procedure DBLookupComboBox53Click(Sender: TObject);
    procedure dbeOKFamilyStatusExit(Sender: TObject);
    procedure bbApplicationClick(Sender: TObject);
    procedure bbUvolClick(Sender: TObject);
    procedure BitBtn134Click(Sender: TObject);
    procedure DBLookupComboBox40CloseUp(Sender: TObject);
    procedure N23Click(Sender: TObject);
    procedure ed_iias_birth_region_primChange(Sender: TObject);
    procedure ed_iias_birth_distr_primChange(Sender: TObject);
    procedure ed_iias_birth_region_primClick(Sender: TObject);
    procedure ed_iias_birth_distr_primClick(Sender: TObject);
    procedure ed_iias_live_region_primClick(Sender: TObject);
    procedure ed_iias_live_distr_primClick(Sender: TObject);
    procedure cdsOKPersonalAfterScroll(DataSet: TDataSet);
    procedure cdbgOK_PERSONALDrawColumnCell(Sender: TObject;
      const Rect: TRect; DataCol: Integer; Column: TColumn;
      State: TGridDrawState);
    procedure dsOKEducationDataChange(Sender: TObject; Field: TField);
    procedure actObiektivkaAgroUzExecute(Sender: TObject);
    procedure BitBtn139Click(Sender: TObject);
    procedure BtnAddlFileClick(Sender: TObject);
    procedure cdsOK_diplomAfterOpen(DataSet: TDataSet);
    procedure PageControl3Change(Sender: TObject);
    procedure BitBtn154Click(Sender: TObject);
    procedure Obiektivka23(type_,file_name: string);
    procedure Button9Click(Sender: TObject);
    procedure BitBtn136Click(Sender: TObject);
    procedure BitBtn166Click(Sender: TObject);
    procedure bbSaveIIASClick(Sender: TObject);
    procedure IIAS_TabSheet_Check(num_: integer);
    procedure Form_TabSheet_Check(num_: integer);
    procedure bbSaveFormClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure BitBtn175Click(Sender: TObject);
    procedure BitBtn174Click(Sender: TObject);
    procedure cdsSpravkaAfterOpen(DataSet: TDataSet);
    procedure cdsSpravkaBeforePost(DataSet: TDataSet);
    procedure cdsOK_diplomBeforePost(DataSet: TDataSet);
    procedure DBLookupComboBox45Exit(Sender: TObject);
    procedure BitBtn178Click(Sender: TObject);
    procedure proverka(num_: integer;num_2: integer);
    procedure Button14Click(Sender: TObject);
    procedure BitBtn185Click(Sender: TObject);
    procedure BitBtn187Click(Sender: TObject);
    procedure BitBtn186Click(Sender: TObject);
    procedure cdsMaxallaSpravkaAfterOpen(DataSet: TDataSet);
    procedure BitBtn188Click(Sender: TObject);
    procedure bbSudDel3Click(Sender: TObject);
    procedure BitBtn180Click(Sender: TObject);
    procedure BitBtn173Click(Sender: TObject);
    procedure actProverkafilialExecute(Sender: TObject);
    procedure bbDoljnostiClick(Sender: TObject);
    procedure bbDepClick(Sender: TObject);
    procedure BitBtn179Click(Sender: TObject);
    procedure BitBtn181Click(Sender: TObject);
    procedure BitBtn184Click(Sender: TObject);
    procedure cdsOKStatAfterPost(DataSet: TDataSet);
    procedure dbedIronMaidenStagChange(Sender: TObject);
    procedure BitBtn163Click(Sender: TObject);
    procedure BitBtn189Click(Sender: TObject);
    procedure BitBtn190Click(Sender: TObject);
    procedure BitBtn191Click(Sender: TObject);
    procedure BitBtn192Click(Sender: TObject);
    procedure Button20Click(Sender: TObject);
    procedure tbCopyPersClick(Sender: TObject);
    procedure DBEdit31KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit93KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit213KeyPress(Sender: TObject; var Key: Char);
    procedure BitBtn193Click(Sender: TObject);
    procedure BitBtn194Click(Sender: TObject);
    procedure BitBtn195Click(Sender: TObject);
    procedure bbApplicationRotationClick(Sender: TObject);
    procedure ToolButton27Click(Sender: TObject);
    procedure BitBtn129Click(Sender: TObject);
    procedure cdsPensionerAfterOpen(DataSet: TDataSet);
    procedure BitBtn196Click(Sender: TObject);
    procedure bCancelClick(Sender: TObject);
    procedure bClearClick(Sender: TObject);
    procedure ToolButton26Click(Sender: TObject);
    procedure bbTabno1Click(Sender: TObject);
    procedure bbTabno2Click(Sender: TObject);
    procedure BitBtn200Click(Sender: TObject);
    procedure BitBtn197Click(Sender: TObject);
    procedure BitBtn201Click(Sender: TObject);
    procedure DBEdit230Change(Sender: TObject);
    procedure DBEdit42Change(Sender: TObject);
    procedure DBEdit156Change(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure actOtpuskExecute(Sender: TObject);
    procedure actOtpuskOutExecute(Sender: TObject);

  private
    { Private declarations }

  public
    { Public declarations }
    function GetSQLResultPar(SQLText:String; Par1:String = ''; Par2:String = ''; Par3:String = ''; Par4:String = ''; Par5:String = ''; Par6:String = ''; Par7:String = ''; Par8:String = ''; Par9:String = '') : Variant;
    function ExecSQLPar(SQLText:String; Par1:String = ''; Par2:String = ''; Par3:String = ''; Par4:String = ''; Par5:String = ''; Par6:String = ''; Par7:String = ''; Par8:String = '') : Integer;

  end;
  TData = class
  private
    FId: string;
    FName: string;
  public
    property Id: string read FId write FId;
    property Name: string read FName write FName;
  end;

function Convert(const s: string): string;//контрольная сумма

resourcestring
  SShowToolBar   = 'ShowToolBar'  ;
  SShowStatusBar = 'ShowStatusBar';

const
{ номер кадров 70 (семдесять)}
  order_by_tabel = ' order by dep_nn,department_code,category_code,fio';
  ERROR_NO = 'ORA-20000: ';
  SQL_yesno = 'select id,name from ss_syesno';
  SQL_Doljn = 'select dolj_id,dolj_name from s_doljn';
  SQL_Pr_off = 'select prich_id id,name_pr name from s_prich'   ;
  SQL_S_STR = 'select * from s_str order by name';
  SQL_S_STR_source = 'select code_str id,name from s_str order by name';
  SQL_S_DISTR = 'select * from s_distr';
  SQL_OKRezerv = 'select * from ok_rezerv';

  SQL_OKRezervDetail = 'select * from ok_rezerv_detail';
  SQL_ok_freedays = 'select * from ok_freedays';
  SQL_Derevo = 'select level, d.department_id id, d.DEPARTMENT_CODE ,'+
    ' d.DEPARTMENT_CODE||'') ''||d.department_name name_, d.department_code,'+
    ' d.department_name, d.department_type_code,'+
        ' d.high_dep_code, d.level_department_code, d.department_num '+
        ' from ss_ok_department d ';

  SQL_Users_SET = 'select id, user_name from users';

// обычные справочники
  SQL_SS_OK_POST = 'select * from ss_ok_post';
  SQL_SS_OK_DEPARTMENT = 'select * from ss_ok_department';

  SQL_ss_ok_zp_rate = 'select * from ss_ok_zp_rate';
  SQL_ss_ok_zp_rate_type = 'select * from ss_ok_zp_rate_type';

  SQL_SS_OK_city = 'select * from ss_ok_city';
//  SQL_ss_ok_passport_type = 'select * from ss_ok_passport_type';
  SQL_ss_ok_passport_type = 'select code_cert PASSPORT_TYPE_CODE, name_cert PASSPORT_TYPE_NAME from s_certificate';
  SQL_ss_ok_org_business_voyage = ' select * from ss_ok_org_business_voyage where state_notes like ''A'' ';
  SQL_ss_ok_theme_business_voyage = ' select * from ss_ok_theme_business_voyage where state_notes like ''A'' ';

  SQL_SSokprivilege_SET = ' select * from ss_ok_privilege where state_notes like ''A'' ';

  SQL_ssokincrease_SET = 'select * from ss_ok_increase ';
  SQL_ssokhospital_set = 'SELECT distinct /*+ INDEX (e ss_OK_hospital_PK)*/   e.hospital_code,e.hospital_name FROM ss_ok_hospital e ';

  SQL_SSOKBaseMove_Set          = 'SELECT * FROM ss_ok_base_move d where d.state_notes like ''A'' ';
  SQL_SSOKBaseMove_Source = 'SELECT to_char(base_move_code) id, base_move_name name '+
    ' FROM ss_ok_base_move where state_notes like ''A'' ';

  SQL_SSOKElection_SET          = 'SELECT /*+ INDEX (d ss_ok_election_pk)*/      * FROM ss_ok_election           d where d.state_notes like ''A'' ';
  SQL_SSOKElection_Source = 'select to_char( election_code) id, election_name name '+
    'FROM ss_ok_election where state_notes like ''A'' ';
  SQL_SSOKElection_Source3 = 'select to_char( election_code) id, election_address name '+
    'FROM ss_ok_election where state_notes like ''A'' ';

  SQL_SSOKEducation_SET         = 'SELECT /*+ INDEX (d ss_ok_education_pk)*/     * FROM ss_ok_education          d where d.state_notes like ''A'' ';
  SQL_SSOKEducation_Source         = 'SELECT to_char( EDUCATION_code ) id, EDUCATION_name  name '+
    ' FROM ss_ok_education where state_notes like ''A'' ';

  SQL_SSOKEducationTitle_SET    = 'SELECT /*+ INDEX (e OK_EDUCATION_TITLE_PK)*/  * FROM ss_ok_education_title    d where d.state_notes like ''A'' ';
//

  SQL_SSOKAcademic_SET          = 'select /*+ INDEX (d SS_OK_ACADEMIC_PK)*/      * from SS_OK_ACADEMIC           d where d.state_notes like ''A'' ';
  SQL_SSOKAcademic_source       = 'select to_char(academic_code) id, academic_name name '+
    ' from SS_OK_ACADEMIC where state_notes like ''A'' ';

  SQL_SSOKInstitution_SET       = 'SELECT /*+ INDEX (d ss_ok_institution_pk)*/   * FROM ss_ok_institution        d where d.state_notes like ''A'' ';
//

  SQL_SSOKQualification_SET     = 'select /*+ INDEX (d SS_OK_QUALIFICATION_PK)*/ * from SS_OK_QUALIFICATION      d where d.state_notes like ''A'' ';
  SQL_SSOKQualification_source  = 'select to_char(qualification_code) id, qualification_name name '+
    ' from SS_OK_QUALIFICATION where state_notes like ''A'' ';

  SQL_SSOKPenalty_SET           = 'SELECT /*+ INDEX (d ss_ok_penalty_pk)*/       * FROM ss_ok_penalty            d where d.state_notes like ''A'' ';
  SQL_SSOKPenalty_source          = 'SELECT to_char( penalty_code ) id, penalty_name name '+
    ' FROM ss_ok_penalty       where state_notes like ''A'' ';

  SQL_SSOKkv_kurs_SET       = 'select * from SS_OK_kv_kurs where state_notes like ''A'' ';
  SQL_ss_ok_org_business_voyage_SET       = 'select * from ss_ok_org_business_voyage where state_notes like ''A'' ';
  SQL_ss_ok_theme_business_voyage_SET       = 'select * from ss_ok_theme_business_voyage where state_notes like ''A'' ';

  SQL_SSOKPost_SET              = 'SELECT * FROM ss_ok_post d where d.state_notes like ''A'' ';
  SQL_cdsSSOKPostCategory = 'select sop.post_code, to_char(soc.salary) "salary",soc.category_name '+
    ' from ss_ok_post sop, ss_ok_category soc '+
    ' where sop.category_code=soc.category_code';

  SQL_SSOKSpecial_SET = 'SELECT * FROM ss_ok_special d where d.state_notes like ''A'' ';

  SQL_SSokarmygroup        = 'SELECT * FROM ss_ok_army_group d where d.state_notes like ''A'' ';
  SQL_SSokarmygroup_source = 'SELECT to_char( army_group_code ) id, army_group_name name'+
    ' FROM ss_ok_army_group d where d.state_notes like ''A'' ';

  SQL_SSokCATEGORYARMY = 'SELECT * FROM ss_OK_CATEGORY_ARMY d where d.state_notes like ''A'' ';
  SQL_SSokCATEGORYARMY_source = 'SELECT to_char( CATEGORY_ARMY_code ) id, CATEGORY_ARMY_name name'+
    ' FROM ss_OK_CATEGORY_ARMY d where d.state_notes like ''A'' ';

  SQL_SSokMILITARYRANK = 'SELECT * FROM ss_OK_MILITARY_RANK d where d.state_notes like ''A'' ';
  SQL_SSokMILITARYRANK_source = 'SELECT to_char( MILITARY_RANK_code ) id, MILITARY_RANK_name name'+
    ' FROM ss_OK_MILITARY_RANK d where d.state_notes like ''A'' ';

  SQL_SSokSTAFF = 'SELECT * FROM ss_ok_STAFF  d where d.state_notes like ''A'' ';
  SQL_SSokSTAFF_source = 'SELECT to_char( STAFF_code ) id, STAFF_name name'+
    ' FROM ss_ok_STAFF  d where d.state_notes like ''A'' ';

  SQL_SSokTYPEFORCE = 'SELECT * FROM ss_ok_TYPE_FORCE  d where d.state_notes like ''A'' ';
  SQL_SSokTYPEFORCE_source = 'SELECT to_char( TYPE_FORCE_code ) id, TYPE_FORCE_name name'+
    ' FROM ss_ok_TYPE_FORCE  d where d.state_notes like ''A'' ';

//

  SQL_SSOKNationality_SET       = 'SELECT /*+ INDEX (d ss_ok_nationality_pk)*/       * FROM ss_ok_nationality           d where d.state_notes like ''A'' ';
  SQL_SSOKNationality_source    = 'select to_char(nationality_code) id,'+
                     ' nationality_NAME name '+
                     'from Ss_ok_nationality  where state_notes=''A''';

  SQL_SSOKParty_SET             = 'SELECT /*+ INDEX (d ss_ok_party_pk)*/             * FROM ss_ok_party                 d where d.state_notes like ''A'' ';
  SQL_SSOKParty_Source             = 'SELECT to_char( party_code ) id,  party_name name '+
    ' FROM ss_ok_party                 d where d.state_notes like ''A'' ';

  SQL_SSOKDegree_SET            = 'select /*+ INDEX (d SS_OK_DEGREE_PK)*/            * from SS_OK_DEGREE                d where d.state_notes like ''A'' ';
  SQL_SSOKDegree_source         = 'select to_char(degree_code) id, degree_name name'+
    ' from SS_OK_DEGREE where state_notes like ''A'' ';

  SQL_SSOKLanguage_SET          = 'select /*+ INDEX (d SS_OK_LANGUAGE_PK)*/          * from SS_OK_LANGUAGE              d where d.state_notes like ''A'' ';
  SQL_SSOKLanguage_Source       = 'select to_char( Language_code ) id, Language_name  name '+
    ' from SS_OK_LANGUAGE where state_notes like ''A'' ';

  SQL_SSOKLevelLanguage_SET     = 'select /*+ INDEX (d SS_OK_LEVEL_LANGUAGE_PK)*/    * from SS_OK_LEVEL_LANGUAGE        d where d.state_notes like ''A'' ';
  SQL_SSOKLevelLanguage_Source     = 'select to_char( LEVEL_LANGUAGE_CODE ) id,  LEVEL_LANGUAGE_name name '+
    ' from SS_OK_LEVEL_LANGUAGE  where state_notes like ''A'' ';

  SQL_SSOKTypePeriod_SET        = 'select /*+ INDEX (d SS_OK_TYPE_PERIOD_PK)*/       * from SS_OK_TYPE_PERIOD           d where d.state_notes like ''A'' ';
  SQL_SSOKTypePeriod_Source        = 'select to_char(  TYPE_PERIOD_code) id,  TYPE_PERIOD_name name '+
    ' from SS_OK_TYPE_PERIOD      where state_notes like ''A'' ';

  SQL_SSOKRelation_SET          = 'select /*+ INDEX (d SS_OK_RELATION_PK)*/          * from SS_OK_RELATION              d where d.state_notes like ''A'' ';
  SQL_SSOKRelation_Source= 'select to_char(  RELATION_code) id,  RELATION_name name '+
    ' from SS_OK_RELATION      where state_notes like ''A'' ';

  SQL_SSOKLeave_SET             = 'select /*+ INDEX (d SS_OK_LEAVE_PK)*/             * from SS_OK_LEAVE                 d where d.state_notes like ''A'' ';
  SQL_SSOKLeave_Source= 'select to_char(  LEAVE_code) id,  LEAVE_name name '+
    '  from SS_OK_LEAVE     where state_notes like ''A'' ';

  SQL_SSOKMotiveDismissial_SET  = 'select /*+ INDEX (d SS_OK_MOTIVE_DISMISSIAL_PK)*/ * from SS_OK_MOTIVE_DISMISSIAL     d where d.state_notes like ''A'' ';
  SQL_SSOKMotiveDismissial_Source= 'select to_char( MOTIVE_DISMISSIAL_code) id,  MOTIVE_DISMISSIAL_name name '+
    ' from SS_OK_MOTIVE_DISMISSIAL  where state_notes like ''A'' ';

  SQL_SSOKYouth_SET             = 'select /*+ INDEX (d SS_OK_YOUTH_PK)*/             * from SS_OK_YOUTH                 d where d.state_notes like ''A'' ';
  SQL_SSOKYouth_Source= 'select to_char( youth_code) id,  youth_name name '+
    ' from SS_OK_YOUTH   where state_notes like ''A'' ';

  SQL_SSOKDepartmentType_SET    = 'SELECT /*+ INDEX (d ss_ok_department_type_PK)*/   * FROM ss_ok_department_type       d where d.state_notes like ''A'' ';
  SQL_SSOKDepartmentType_Source= 'select to_char(  department_type_code) id,  department_type_name name '+
    ' FROM ss_ok_department_type   where state_notes like ''A'' ';


  SQL_SSOKArticle_SET           = 'select /*+ INDEX (d SS_OK_ARTICLE_PK)*/           * from SS_OK_ARTICLE               d where d.state_notes like ''A'' ';
  SQL_SSOKArticle_Source= 'select to_char(  article_code) id,  article_name name '+
    ' from SS_OK_ARTICLE   where state_notes like ''A'' ';

  SQL_SSOKCommandType_SET       = 'select /*+ INDEX (d SS_OK_COMMAND_TYPE_PK)*/      * from SS_OK_COMMAND_TYPE          d where d.state_notes like ''A'' ';
//

  SQL_SSOKTemplateCommand_SET   = 'select /*+ INDEX (d SS_OK_TEMPLATE_COMMAND_PK)*/  * from SS_OK_TEMPLATE_COMMAND      d where d.state_notes like ''A'' ';
//

//  SQL_SSOKMotive_SET    = 'select * from SS_OK_MOTIVE_DISMISSIAL      d where d.state_notes like ''A'' ';
//  SQL_SSOKMotive_Source= 'select to_char(  _code) id,  _name name '+
//    ' from SS_OK_MOTIVE_DISMISSIAL      d where d.state_notes like ''A'' ';

  ////////// \\\\\\\\\\\

  
{ 3}
  SQL_Department = 'select '+
    ' to_char(department_code) id, '+
    ' department_name name'+
    ' FROM ss_ok_department  '+
    ' where state_notes like ''A'' ';


  SQL_SSOKDepartment_SET        = 'select /*+ INDEX (d ss_ok_department_PK)*/ '+
    ' d.department_id, d.branch, d.department_code, '+
    ' d.department_name, d.department_num, d.department_type_code,'+
    ' d.high_dep_code, d.state_notes, d.emp_code,'+
    ' d.ins_date, d.LEVEL_DEPARTMENT_CODE, substr(ok_service.GET_high_name(d.department_code),1,250) HIGH_NAME '+
    ' FROM ss_ok_department d '+
    ' where d.state_notes like ''A'' '+
    ' ';
  SQL_SSOKDepartment_SET2        = 'select to_number(null) department_id, to_char(null) branch, '+
        ' to_number(null) department_code, '+
    ' to_char(null) department_name, to_number(null) department_num, to_number(null) department_type_code,'+
    ' -1 high_dep_code, to_char(null) state_notes, to_number(null) emp_code,'+
    ' to_date(null) ins_date, to_number(null) LEVEL_DEPARTMENT_CODE '+
    ' from ss_ok_department where rownum=1 '+
    ' union all select /*+ INDEX (d ss_ok_department_PK)*/ '+
    ' d.department_id, d.branch, d.department_code, '+
    ' d.department_name, d.department_num, d.department_type_code,'+
    ' d.high_dep_code, d.state_notes, d.emp_code,'+
    ' d.ins_date, d.LEVEL_DEPARTMENT_CODE '+
    ' FROM ss_ok_department d '+
    ' where d.state_notes like ''A'' '+
    ' ';

{ 2
  SQL_SSOKDepartment_SET=  'select /*+ INDEX (d ss_ok_department_PK)*/ '+
    ' d.department_id, d.branch, d.department_code, '+
    ' d.department_name, d.department_num, d.department_type_code,'+
    ' d.high_dep_code, d.state_notes, d.emp_code,'+
    ' d.ins_date '+
    ' FROM ss_ok_department d where d.state_notes like ''A'' ';
}

{ 1
  SQL_SSOKDepartment_SET=  'SELECT /*+ INDEX (d ss_ok_department_PK)*/ * '+
        ' FROM ss_ok_department d where d.state_notes like ''A'' ';
}


// системные справочники
  SQL_Str             = 'select * from S_str d where d.act=''A''  order by name';
  SQL_SRegion             = 'select * from S_REGION where act=''A''';
  SQL_SRegion_source      = 'select REGION_ID id, REGION_NAM name '+
                     'from S_REGION  where act=''A''';

  SQL_SDistr              = 'select * from S_DISTR where act=''A''';
  SQL_SDistr_source       = 'select DISTR id,DISTR_NAME name '+
                     'from S_DISTR  where act=''A''';

  SQL_SSOKBasis_SET             = 'select /*+ INDEX (d SS_OK_BASIS_PK)*/         * from SS_OK_BASIS d ';
  SQL_SSOKArmy_SET              = 'SELECT /*+ INDEX (d ss_ok_army_pk)*/          * FROM ss_ok_army  d ';
  SQL_SSOKFitnessArmy_SET       = 'SELECT /*+ INDEX (d ss_ok_fitness_army_pk)*/  * FROM ss_ok_fitness_army  d ';

  SQL_ssokgender_SET            = 'select /*+ INDEX (d SS_OK_GENDER_PK)*/        * from SS_OK_GENDER        d ';
  SQL_ssokStatus_SET            = 'select /*+ INDEX (d SS_OK_STATUS_PK)*/        * from SS_OK_Status        d ';
  SQL_SSOKFAMILYSTATUS_SET      = 'select /*+ INDEX (d SS_OK_FAMILY_STATUS_PK)*/ * from SS_OK_FAMILY_STATUS d ';
  SQL_SSOKREGTYPE_SET           = 'select /*+ INDEX (d SS_OK_REG_TYPE_PK)*/      * from SS_OK_REG_TYPE      d ';
  SQL_ssokvacancy_set           = 'select /*+ INDEX (d SS_OK_VACANCY_PK)*/       * from SS_OK_VACANCY       d ';
  SQL_ssokrezerve_set           = 'select /*+ INDEX (d SS_OK_REZERVE_PK)*/       * from SS_OK_REZERVE       d ';
  SQL_ssokleveldepartment = 'select /*+ INDEX (d SS_OK_LEVEL_DEPARTMENT_PK)*/ d.level_department_code ID, d.level_department_name NAME from ss_ok_level_department d ';
  SQL_SSOKProfmember_SET = 'select * from ss_ok_profmember';

// главная рабочая таблица
  SQL_OKPersonal_EMPTY = 'SELECT /*+ INDEX (p OK_PERSONAL_PK)*/  p.* FROM ok_personal  p WHERE rownum <1 ';
  SQL_OKPersonal       = 'SELECT /*+ INDEX (p OK_PERSONAL_PK)*/   p.* FROM ok_personal  p ';

// рабочие таблицы
  SQL_ok_zp_rate= 'SELECT /*+ INDEX (e ok_zp_rate_PK)*/   e.* FROM ok_zp_rate e ';

  SQL_ok_business_voyage= 'SELECT /*+ INDEX (e ok_business_voyage_PK)*/   e.* FROM ok_business_voyage e ';

  SQL_okincrease= 'SELECT /*+ INDEX (e OK_increase_PK)*/   e.* FROM ok_increase e ';
  SQL_okprivilege= 'SELECT /*+ INDEX (e OK_privilege_PK)*/   e.* FROM ok_privilege e ';
  SQL_okhospital = 'SELECT /*+ INDEX (e OK_hospital_PK)*/   e.* FROM ok_hospital e ';
  SQL_OKEducation      = 'SELECT /*+ INDEX (e OK_EDUCATION_PK)*/   e.* FROM ok_education e ';
  SQL_OKAcademic       = 'SELECT /*+ INDEX (e OK_ACADEMIC_PK)*/    e.* FROM ok_academic e ';
  SQL_OKDegree         = 'SELECT /*+ INDEX (e OK_DEGREE_PK)*/      e.* FROM ok_degree e ';
  SQL_OKAward          = 'SELECT /*+ INDEX (e OK_AWARD_PK)*/       e.* FROM ok_award e ';
  SQL_OKScientific     = 'SELECT /*+ INDEX (e OK_Scientific_PK)*/  e.* FROM ok_Scientific e ';
//  SQL_OKPost           = 'SELECT * FROM ok_post e ';

  SQL_OKVoyage         = 'SELECT /*+ INDEX (e OK_VOYAGE_PK)*/      e.* FROM ok_voyage e ';
  SQL_OKLanguage       = 'SELECT /*+ INDEX (e OK_LANGUAGE_PK)*/    e.* FROM ok_language e ';
  SQL_OKRelation       = 'SELECT /*+ INDEX (e OK_RELATION_PK)*/    e.* FROM ok_relation e ';
  SQL_OKPeriod         = 'SELECT /*+ INDEX (e OK_PERIOD_PK)*/      e.* FROM ok_period e ';
  SQL_OKRise           = 'SELECT /*+ INDEX (e OK_RISE_PK)*/        e.* FROM ok_rise e ';
  SQL_OKElection       = 'SELECT /*+ INDEX (e OK_ELECTION_PK)*/ e.* '+
        ' FROM ok_election e ';
  SQL_OKPremium        = 'SELECT /*+ INDEX (e OK_PREMIUM_PK)*/     e.* FROM ok_premium e ';
  SQL_OKArmy           = 'SELECT /*+ INDEX (e OK_ARMY_PK)*/        e.* FROM ok_army e ';
  SQL_OKParty          = 'SELECT /*+ INDEX (e OK_PARTY_PK)*/       e.* FROM ok_party e ';
  SQL_OKYouth          = 'SELECT /*+ INDEX (e OK_YOUTH_PK)*/       e.* FROM ok_youth e ';
  SQL_OKLeave          = 'SELECT /*+ INDEX (e OK_LEAVE_PK)*/       e.* FROM ok_leave e ';
  SQL_OKConvictions    = 'SELECT /*+ INDEX (e OK_CONVICTIONS_PK)*/ e.* FROM ok_convictions e ';
  SQL_OKAddInform      = 'SELECT /*+ INDEX (e OK_ADDINFORM_PK)*/   e.* FROM ok_addinform e ';
  SQL_OKPenalty        = 'SELECT /*+ INDEX (e OK_PENALTY_PK)*/     e.* FROM ok_penalty e ';
  SQL_OKChangeFIO      = 'SELECT /*+ INDEX (e OK_CHANGE_FIO_PK)*/  e.* FROM ok_change_fio e ';
  SQL_OKStat           = 'SELECT /*+ INDEX (e OK_STAT_PK)*/  e.* FROM ok_stat e ';
  SQL_OKStatSalary     = 'SELECT /*+ INDEX (e OK_STAT_SALARY_PK)*/  e.* FROM ok_stat_salary e ';
  SQL_OKPhoto          = 'SELECT /*+ INDEX (e OK_PHOTO_PK)*/   e.* FROM ok_photo e ';
  SQL_ok_tabel         = 'SELECT e.* FROM ok_tabel e ';

var
  BOKForm: TBOKForm;
  ChParam, LineCounter              : integer ;
  go_personal_code,go_filial_branch,LastPanel,  OldStatus, OldSpecial   : String  ;
  ToPrint, ToExcel, SchRepFileExist : Boolean ;
  F                                 : TextFile;
  SchRepFileOpened     : Boolean;
  GetCurrentDir_templates, curBranch,FiltrLevelName, FiltrLevel, BossLevel   : String  ;
  IS_READONLY_FILIAL, kapital_bank : Boolean;
  headbranch_, old_schema, old_branch, filial_schema, filial_branch : string;
  months_: array [1..12] of byte;
  year_ : integer;
  mfo_category_type_code,SQL_SS_OK_regplace: string;
  mfo_category_type_code_VAR : variant;
  proverka_: integer;
  SL1,SL2,SL_rotation : TStringList;

implementation

uses  FilterPersonal, OKChangeFIO, OKDismiss, OKAppoint, //OKOrder, //OKObiektivka2,
//  OKOPrev,, dlg_Choice2
  OKRezerv,OKChangePasport, OKDekret, OKOtpusk, Registry;
var
  fmOKFilter:  TfmFilterPersonal;
  fmSaveOKChangeFIO: TfmOKChangeFIO;
  fmSaveOKChangePasport: TfmOKChangePasport;
  fmSaveOKDismiss: TfmOKDismiss;
  fmSaveOKDekret: TfmOKDekret;
  fmSaveOKOtpusk: TfmOKOtpusk;
  fmSaveOKAppoint: TfmOKAppoint;
//  fmSaveOKOrder: TfmOKOrder;
//  fmSaveOKOPrev: TfmOKOPrev;
  fmSaveOKRezerv: TfmOKRezerv;

{$R *.dfm}
function NumTo(num:integer):string;  //эта функция переводит num в строчный эквивалент в Exl
var abc:string;
begin
 abc:='ABCDEFGHIJKLMNOPQRSTUVWXYZ';

 if (num/26>1) then
 begin
  if (num-trunc(num/26)*26=0) then
    result := abc[trunc(num/26)-1]+abc[num-(trunc(num/26)-1)*26]
  else
    result := abc[trunc(num/26)]+abc[num-trunc(num/26)*26]
 end
 else
  result := abc[num];

end;

function Lpad(sdd: String; nl: integer; sc: String = ' '): String;
var
  aa: String;
begin
  if (length(sdd)<nl) then
  begin
    aa:=sdd;
    if (length(sc)>0) then
    begin
      while (nl-length(aa)>0) do
      begin
        aa:=sc+aa;
      end;
      if (length(aa)>nl) then
      begin
        aa:=copy(aa,length(aa)-nl+1,nl);
      end;
    end
    else
    begin
      aa := StringOfChar(' ',nl-length(aa))+aa;
    end;
  end
  else
  begin
    aa:=copy(sdd,length(sdd)-nl+1,nl);
  end;
  Result := aa;
end;

function Convert(const s: string): string;
var
  i: integer;
  j: double;
  s1: string;
begin
  j := 0;
  for i := 0 to Length(s) do
    j := Abs(j - Sqrt(Ord(s[i]) * 666) - i);
  s1 := FloatToStr(j);
  if DecimalSeparator = '.' then
    Delete(s1, Pos('.', s1), 1)
  else
    Delete(s1, Pos(',', s1), 1);
  if s1 = '0' then Result := ''
  else
    Result := s1;
end;

function RPad(sdd: String; nl: integer; sc: String = ' '): String;
var aa: String;
begin
  if (Length(sdd)<nl) then
  begin
    aa:=sdd;
    if (Length(sc)>0) then
    begin
      while (nl-Length(aa)>0) do
      begin
        aa:=aa+sc;
      end;
      if (Length(aa)>nl) then
      begin
        aa:=copy(aa,Length(aa)-nl+1,nl);
      end;
    end
    else
    begin
      aa := aa+StringOfChar(' ',nl-Length(aa));
    end;
  end
  else
  begin
    aa:=copy(sdd,1,nl);
  end;
  Result := aa;
end;

function ToMonthName(month_id: String): String;
var
  aa: String;
begin
  aa:='';
  if (month_id='1') or (month_id='01')
  then aa:='январ';
  if (month_id='2') or (month_id='02')
  then aa:='феврал';
  if (month_id='3') or (month_id='03')
  then aa:='март';
  if (month_id='4') or (month_id='04')
  then aa:='апрел';
  if (month_id='5') or (month_id='05')
  then aa:='май';

  if (month_id='6') or (month_id='06')
  then aa:='июн';
  if (month_id='7') or (month_id='07')
  then aa:='июл';
  if (month_id='8') or (month_id='08')
  then aa:='август';
  if (month_id='9') or (month_id='09')
  then aa:='сентябр';
  if (month_id='10') or (month_id='10')
  then aa:='октябр';
  if (month_id='11') or (month_id='11')
  then aa:='ноябр';
  if (month_id='12') or (month_id='12')
  then aa:='декабр';

  result:= aa;

end;

function TBOKForm.GetSQLResultPar(SQLText:String; Par1:String = ''; Par2:String = ''; Par3:String = ''; Par4:String = ''; Par5:String = ''; Par6:String = ''; Par7:String = ''; Par8:String = ''; Par9:String = '') : Variant;
var
  SQLParams:TParams;
begin
  SQLParams:=TParams.Create;
  try
    sqlparams.Clear;
    SQLParams.CreateParam(ftString,'p_1',ptInput);
    SQLParams.CreateParam(ftString,'p_2',ptInput);
    SQLParams.CreateParam(ftString,'p_3',ptInput);
    SQLParams.CreateParam(ftString,'p_4',ptInput);
    SQLParams.CreateParam(ftString,'p_5',ptInput);
    SQLParams.CreateParam(ftString,'p_6',ptInput);
    SQLParams.CreateParam(ftString,'p_7',ptInput);
    SQLParams.CreateParam(ftString,'p_8',ptInput);
    SQLParams.CreateParam(ftString,'p_9',ptInput);
    SQLParams.ParamByName('p_1').Value:=Par1;
    SQLParams.ParamByName('p_2').Value:=Par2;
    SQLParams.ParamByName('p_3').Value:=Par3;
    SQLParams.ParamByName('p_4').Value:=Par4;
    SQLParams.ParamByName('p_5').Value:=Par5;
    SQLParams.ParamByName('p_6').Value:=Par6;
    SQLParams.ParamByName('p_7').Value:=Par7;
    SQLParams.ParamByName('p_8').Value:=Par8;
    SQLParams.ParamByName('p_9').Value:=Par9;
    Result := GetSqlResult(SQLText,SQLParams);
  finally
    SQLParams.Free;
  end;
end;

function TBOKForm.ExecSQLPar(SQLText:String; Par1:String = ''; Par2:String = ''; Par3:String = ''; Par4:String = ''; Par5:String = ''; Par6:String = ''; Par7:String = ''; Par8:String = '') : Integer;
var
  SQLParams:TParams;
begin
  SQLParams:=TParams.Create;
  try
    sqlparams.Clear;
    SQLParams.CreateParam(ftString,'p_1',ptInput);
    SQLParams.CreateParam(ftString,'p_2',ptInput);
    SQLParams.CreateParam(ftString,'p_3',ptInput);
    SQLParams.CreateParam(ftString,'p_4',ptInput);
    SQLParams.CreateParam(ftString,'p_5',ptInput);
    SQLParams.CreateParam(ftString,'p_6',ptInput);
    SQLParams.CreateParam(ftString,'p_7',ptInput);
    SQLParams.CreateParam(ftString,'p_8',ptInput);
    SQLParams.ParamByName('p_1').Value:=Par1;
    SQLParams.ParamByName('p_2').Value:=Par2;
    SQLParams.ParamByName('p_3').Value:=Par3;
    SQLParams.ParamByName('p_4').Value:=Par4;
    SQLParams.ParamByName('p_5').Value:=Par5;
    SQLParams.ParamByName('p_6').Value:=Par6;
    SQLParams.ParamByName('p_7').Value:=Par7;
    SQLParams.ParamByName('p_8').Value:=Par8;
    Result := ExecSql(SQLText,SQLParams);
  finally
    SQLParams.Free;
  end;
end;

function TBOKForm.check_date_yyyymmdd(yyyy: String; mm: String; dd: String;future_:string; check_dm:string): string;
var aa :string;
//     d_:tdatetime;
begin
  aa:='1';

  try
    if ( (strtoint(yyyy)>strtoint(copy(bankdate,7,4))) and (future_ = 'N') )
    or (strtoint(yyyy)<1917)
    then begin
      aa:='неверный год '+yyyy;
    end;

  except
    aa:='неверный год '+yyyy;
  end;

  if (check_dm='Y') and ((mm='') or (dd=''))
  then begin

    if aa='1'
    then begin
// год уже проверен выше
      aa:= ' не указан день или месяц даты';
    end else begin
      aa:= aa+ ' не указан день или месяц даты';

    end;

  end else begin

    if aa='1'
    then begin
        try
          //d_:=
          strtodate(dd+'.'+mm+'.'+yyyy);
        except
          aa:='неверный день='+dd+' месяц='+mm+' год='+yyyy;
        end;
    end;

  end;
  result:= aa;

end;

procedure TBOKForm.addLookUpField(DataSet_, LDataSet_: TDataSet;
                                    FieldName_, KeyFields_, LookUpKeyFields_, LookUpResultField_: String;
                                    CreateField: Boolean = False);
var i: Integer;
begin
  with DataSet_ do
  begin
    DisableControls;
    If CreateField Then for i := 0 to FieldDefs.Count - 1 do FieldDefs.Items[i].CreateField(Self);
    with TStringField.Create(Self) do
    begin
      FieldName         := FieldName_;
      DataSet           := DataSet_;
      FieldKind         := fkLookup;
      KeyFields         := KeyFields_;
      LookUpDataset     := LDataSet_;
      LookUpKeyFields   := LookUpKeyFields_;
      LookupResultField := LookUpResultField_;
      Size              := LDataSet_.FieldByName(LookUpResultField_).Size;
      with FieldDefs.AddFieldDef do
      begin
        Name     := FieldName;
        DataType := ftString;
        Size     := LDataSet_.FieldByName(LookUpResultField_).Size;
      end;
    end;
    EnableControls;
  end;
end;


procedure TBOKForm.FormCreate(Sender: TObject);
 var d : TData;
     n,i : Integer;
     sql_ : string;
  head_ : string;
begin

//showmessage('01119)'+convert('Сейчас я в областном банке01119')+#13+
//'01120)'+convert('Сейчас я в областном банке01120'));


//showmessage(convert('Сейчас я в областном банке01087'));
//286888054521812

//showmessage(convert('Сейчас я в районном банке00974'));
//134204703110456
//showmessage(convert('Сейчас я в головном банке00974'));
//showmessage(convert('Сейчас я в районном банке00445'));
// 132536834140705

  inherited;
  BOKForm := Self;

  with Registry do
  try
    if OpenKey(INIT_KEY + ClassName, False)
    then begin
        if ValueExists(SShowToolBar) then
          psToolBar.Visible := ReadBool(SShowToolBar);
        if ValueExists(SShowStatusBar) then
          StatusBar.Visible := ReadBool(SShowStatusBar);
{
        If ValueExists('chbTabVisible')
          Then chbTabVisible.checked:=Readbool('chbTabVisible')
          Else chbTabVisible.checked:=true;

        If ValueExists('chbGluk')
          Then chbGluk.checked := Readbool('chbGluk')
          Else chbGluk.checked := false;

        If ValueExists('chbSaveFiltr')
          Then chbSaveFiltr.checked := Readbool('chbSaveFiltr')
          Else chbSaveFiltr.checked := false;
}
    end;
  finally
    CloseKey;
  end;

  i:=GetSqlResultpar('select status from statusoperday where id=:p_1','1');
  if (i<>1) then
  begin
    Application.MessageBox('Опер. день закрыт !!!', 'Предупреждение', MB_OK);
  end;

//showmessage(INIT_KEY + Self.ClassName);
///////////
  old_schema := CurrentSchema;
  old_branch := branch;
{
  if copy(branch,1,2)='09'
  then begin
    bbGOChangeFilial.visible:=true;
    loaddata(cdstemp2,'select * from ss_dblink_branch');

//    with Tfrm_Choice2.Create(self) do
//    try
//      showModal;
//    finally
//      Free;
//    end;
      filial_schema  :=  cdstemp2.fieldbyname('user_name').asstring; // filial_schema; // CurrentSchema;
      filial_branch  :=  cdstemp2.fieldbyname('branch').asstring; // branch


      ExecSQL('alter session set current_schema = '+filial_schema);
      branch := filial_branch;
  end;
}
///////////
// не показывать заголовки листов
  with PC do
    for n:=0 to PageCount-1 do
      Pages[n].TabVisible:=false;

  with PCDetails do
    for n:=0 to PageCount-2 do begin
//      Pages[n].TabVisible:=false;
      if chbTabVisible.checked
      then Pages[n].TabVisible:= true
      else Pages[n].TabVisible:= false;

      D := TData.Create;
      D.Id := IntToStr(n);
      D.Name := Pages[n].Caption;
      CBDetails.Items.AddObject( Pages[n].Caption, D);
      ListDetail.Items.AddObject( Pages[n].Caption, D);
    end;

  PCDetails.Pages[PCDetails.PageCount-1].TabVisible := False ;
  LoadData(cdsUsers,'select id emp_code, full_name emp_name from users');

  HeadBranch_:=getsqlresult('select header_id from s_mfo where bank_id=info.getbranch');
  if HeadBranch_='09006'   // // не связано с подтв. в ГО
  then begin
    DBLookupComboBox43.ReadOnly:=true;
    SQL_SS_OK_regplace := 'select distr regplace_code, distr_name regplace_name from s_distr';
  end else begin
    SQL_SS_OK_regplace := 'select * from ss_ok_regplace';
  end;

  Head_ := VarToStr(getSqlResultpar('select CONST.GETCONST(:p_1) from dual','23001'));
  if Head_ <> convert('Сейчас я в головном банке' +Branch) then
  begin

     sql_:='select * from s_mfo '+
        ' where bank_id=union_id '+
        ' and bank_id=:p_1'+ //'''+Branch+''' '+
        ' and header_id<>union_id '+
        ' and rownum<:p_2';

      cdsTempSource.Close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := '2';
      end;
     loadData(cdsTempSource,sql_);
  //showmessage(sql_);

  // район
  //showmessage('2)не Головное отделение ');
      FiltrLevel:='3';
      FiltrLevelName:='Район';
      BossLevel := '3';
  // обл
     while not cdsTempSource.eof
     do begin
      BossLevel := '2';
      FiltrLevel:= '2';
      FiltrLevelName:='Область';
  //showmessage('bosslevel)не Головное отделение ');
      cdsTempSource.next;
     end;
     if Head_ = convert('Сейчас я в районном банке' +Branch)
     then begin
       FiltrLevel:='3';
       FiltrLevelName:='Район';
       BossLevel := '3';
     end;
     if Head_ = convert('Сейчас я в областном банке' +Branch)
     then begin
      BossLevel := '2';
      FiltrLevel:= '2';
      FiltrLevelName:='Область';
     end;
//showmessage('3)не Головное отделение ');

  end else begin
//showmessage('Головное отделение');
    FiltrLevel:='1';
    FiltrLevelName:='Республика';
    BossLevel := '1';
  end;

//showmessage(branch);
//branch:='09004';
//showmessage(branch);

  if (branch='09004') or (branch='09049') or (branch='09006') // не связано с подтв. в ГО
  then begin
    cdbgOK_Personal.columns[1].Visible := true;
    FiltrLevel:='0';
    if (branch='09004')
    then FiltrLevelName:=branch+' Единая база - Агро банк';
    if (branch='09006') // не связано с подтв. в ГО
    then FiltrLevelName:=branch+' Единая база - Халк банк';
    if (branch='09049')     // не связано с подтв. в ГО
    then FiltrLevelName:=branch+' Единая база - Капитал банк';
    BossLevel := '0';

// begin  .Enabled      := False;
   actNew.Enabled        := False;
   actReAccept.Enabled       := False;
   actUndoChanges.Enabled  := False;
   actEdit.Enabled        := False;
   actUnactive.Enabled   := False;
   actSaveNew.Enabled   := False;
   actSaveExist.Enabled  := False;
   ActDetailNew.Enabled   := False;
   ActDetailSave.Enabled   := False;
   ActDetailDelete.Enabled  := False;
   ActDetailUndo.Enabled   := False;
   actDismiss.Enabled     := False;
//   actStatNew.Enabled      := False;
//   actStatSave.Enabled      := False;
//   actStatDelete.Enabled     := False;
//   actStatUndo.Enabled        := False;
   actChangeFIO.Enabled       := False;
   actPhotoInsert.Enabled    := False;
   actPhotoRemove.Enabled    := False;
   actPhotoAttach.Enabled     := False;
   actPhotoActualSize.Enabled  := False;
   actPhotoSave.Enabled       := False;
   actDelete.Enabled         := False;
   actChangePassport.Enabled  := False;
   actAppointNew.Enabled     := False;
   actAppoint.Enabled     := False;
   actDekret.Enabled        := False;
   actDekretOut.Enabled    := False;
   actShuBankda.Enabled   := False;
// end  .Enabled         := False;

  For i := 0 to ComponentCount-1 do
  Begin
    If (Components[i].ClassType = TClientDatasetEx)
    Then TclientDatasetEx(Components[i]).ReadOnly:=true;
  End;
  cdsOkPersonal_NEW.ReadOnly := false;
  source.ReadOnly := false;

//
  end;

  edBossNew.Text:=bosslevel;
  LastPanel := 'TablePanel';
  pcmainok.ActivePage := TablePanel_;

    actTableExecute(nil);
    pcmainok.ActivePage := TablePanel_;

//  Label40.Font.Handle :=  GetStockObject(SYSTEM_FONT);
//showmessage('неберунги');
  if BossLevel = '1'
  then begin
  // республика
  end else begin
  // рядовой филиал
  end;

  medBankDate2.text:=bankdate;
  year_ := strtoint( copy(medBankDate2.text,7,4));

  months_[1] := 31;
  months_[2] := 28 + ord(IsLeapYear(year_));
  months_[3] := 31;
  months_[4] := 30;
  months_[5] := 31;
  months_[6] := 30;
  months_[7] := 31;
  months_[8] := 31;
  months_[9] := 30;
  months_[10] := 31;
  months_[11] := 30;
  months_[12] := 31;

  height:=700;

end;

procedure TBOKForm.FormDestroy(Sender: TObject);
var csql : string;
begin
  inherited;

  if branch <> old_branch
  then begin
        cSql:='alter session set current_schema='+old_schema;
        ExecSQL(cSql);
        ExecSQL('begin info.init; end;');
        branch := old_branch;
  end;

  With Registry do
    Try
      OpenKey(INIT_KEY + Self.ClassName, True);
      WriteString('edOfficeAddress', edOfficeAddress.Text);
      WriteString('edFilial', edFilial.Text);
      Writebool('chbTabVisible', chbTabVisible.checked);
      WriteBool(SShowToolBar, psToolBar.Visible);
      WriteBool(SShowStatusBar, StatusBar.Visible);
      Writebool('chbGluk', chbGluk.checked);
      Writebool('chbSaveFiltr', chbSaveFiltr.checked);
//      WriteInteger('clbNoLead',        clbNoLead.Selected);
      WriteString('edDepartmentcodeNew', edDepartmentcodeNew.Text);
      WriteString('edDEPARTMENTNUMnew', edDEPARTMENTNUMnew.Text);
      WriteString('edDepartmentNameNew', edDepartmentNameNew.Text);
//showmessage(INIT_KEY + Self.ClassName);
    Finally
      CloseKey;
    End;

end;

procedure TBOKForm.SplitterCanResize(Sender: TObject;
  var NewSize: Integer; var Accept: Boolean);
var
  i: Integer;
begin
  with CoolBar do
    if NewSize < Height then
    begin
      for i := Bands.Count - 1 downto 0 do
        if Bands[i].Break = True then
          if NewSize <= Height - Bands[i].Height then
          begin
            Bands[i].Break := False;
            Accept := True;
          end;
    end
    else
    begin
      for i := Bands.Count - 1 downto 0 do
        if Bands[i].Break = False then
          if NewSize >= Height + Bands[i].Height then
          begin
            Bands[i].Break := True;
            Accept := True;
          end;
    end;
end;

procedure TBOKForm.actToolBarExecute(Sender: TObject);
begin
  psToolBar.Visible := not psToolBar.Visible;
end;

procedure TBOKForm.actStatusBarExecute(Sender: TObject);
begin
  StatusBar.Visible := not StatusBar.Visible;
end;

procedure TBOKForm.actAboutExecute(Sender: TObject);
begin
  with TAboutDialog.Create(Self) do
  try
    ShowModal;
  finally
    Free;
  end;
end;

procedure TBOKForm.ActionListUpdate(Action: TBasicAction;
  var Handled: Boolean);
begin





  actToolBar.Checked := psToolBar.Visible;
  actStatusBar.Checked := StatusBar.Visible;

  OpenPanel.Visible    := (actNew.Checked or actReAccept.Checked);
  TablePanel.Visible   := actTable.Checked;
  FormPanel.Visible    := actForm.Checked;
  RefPanel.Visible     := (actRef.Checked or actRef2.Checked or actTabel.Checked
    or   actKurs.Checked  or   actCopyPers.Checked );
  DetailsPanel.Visible := actDetails.Checked;
  iiasPanel.Visible := actiias.Checked ;
//  OptionsPanel.Visible := actOptions.Checked;

  if actPhotoActualSize.Checked then
    imgSignature.Align := alNone
  else
    imgSignature.Align := alClient;

// actNew
  actNew.Enabled := (actTable.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked);

// actReAccept         not cdsOKPersonal.IsEmpty
  if (not cdsOKPersonal.IsEmpty)
  then begin
    actReAccept.Enabled :=
      (  (  actTable.Checked
         )
         and
         (   (cdsOKPersonal.FieldByName('STATUS_CODE').AsString='3')
          or (cdsOKPersonal.FieldByName('STATUS_CODE').AsString='4')
         )
      );
  end else begin
    actReAccept.Enabled := False;
  end;

// акт отмена actUndoChanges
  actUndoChanges.Enabled := (actNew.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked);

// ActDelete
  actDelete.Enabled := (actForm.Checked or actNew.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked);

// акт сохранить  actEdit
  actEdit.Enabled := (actForm.Checked or actNew.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked);

//  ActPrev
  ActPrev.Enabled := (actTable.Checked or actNew.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked);

//  actToExcel
//  actToExcel.Enabled := (actTable.Checked or actNew.Checked or actDetails.Checked
//     or actRef.Checked or actRef2.Checked or actRezervSet.Checked);
  actToExcel.Enabled := (actTable.Checked);

//  actFilter
  actFilter.Enabled := (actTable.Checked or actForm.Checked or actiias.Checked);
//if actUndoChanges.Checked
//then showmessage('!');
// actTable
  actTable.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actUndoChanges.Checked or actOptions.Checked or actiias.Checked
     or actTabel.checked or   actKurs.Checked  or   actCopyPers.Checked);

// actForm
  actForm.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked  or actKurs.Checked )
     AND (not cdsOKPersonal.IsEmpty);

// actDetails
  actDetails.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked or actKurs.Checked)
     AND (not cdsOKPersonal.IsEmpty);

// actIIAS
  actiias.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked or actKurs.Checked)
     AND (not cdsOKPersonal.IsEmpty);

// actRef
  actRef.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked or actKurs.Checked);

// actRef2
  actRef2.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked or actKurs.Checked);

// actRezervSet
  actRezervSet.Enabled := (actTable.Checked or actForm.Checked or actDetails.Checked
     or   actKurs.Checked  or   actCopyPers.Checked
     or actRef.Checked or actRef2.Checked or actRezervSet.Checked
     or actiias.Checked or actTabel.checked or actKurs.Checked);



end;



procedure TBOKForm.cdsSSOKPost_SETReconcileError(
  DataSet: TCustomClientDataSet; E: EReconcileError;
  UpdateKind: TUpdateKind; var Action: TReconcileAction);
begin
//  if pos('Cannot modify read-only dataset', E.Message) > 0
//  then ShowMessage('Только для чтения!')
//  else
  If pos('ORA-01400', E.Message) > 0 Then ShowMessage('Ошибка при сохранении(2996). Пожалуйста, заполните пустые поля!'+#13+E.Message)
//  Else if pos('is not a valid date and time', E.Message) > 0 Then ShowMessage('Пожалуйста укажите дату в формате "дд.мм.гггг" или отмените ввод (клавиша [ESC] )!')
  else ShowMessage(e.Message);
end;

procedure TBOKForm.FormShow(Sender: TObject);
var //LevelName_ : TData;
   sql_ :string; // ,  w
   n : integer; // ,i
   show_bank_ :string;
begin
//showmessage( datetimetostr(now) +#13+ datetimetostr(now+10) );

{  For i := 0 to ComponentCount-1 do
  Begin
      If (Components[i].ClassType = TEdit)
      Then begin
//        if (TEdit(Components[i]).OnKeyPress='')
  //      then
//  showmessage(TEdit(Components[i]).OnKeyPress);
        TEdit(Components[i]).OnKeyPress := FormKeyPress;
      end
      else if (Components[i].ClassType = TMaskEdit)
      Then begin
        if (TMaskEdit(Components[i]).OnKeyPress='')
        then TMaskEdit(Components[i]).OnKeyPress := FormKeyPress;
      end
      else if (Components[i].ClassType = TDBEdit)
      Then begin
        if (TDBEdit(Components[i]).OnKeyPress='')
        then TDBEdit(Components[i]).OnKeyPress := FormKeyPress;
      end;
  End;
}
    if curBranch=''
    then curBranch:=Branch;

  with PCmainok do
    for n:=0 to PageCount-1 do
      Pages[n].TabVisible:=false;

  GetCurrentDir_templates := GetCurrentDir+'/Templates' ;

  medBankDate.Text:=bankdate;
// Настройки
//  cbBoss.Items.Clear;
// LEVEL_DEPARTMENT_CODE	NUMBER (1) not null, --	Код
// LEVEL_DEPARTMENT_NAME	VARCHAR2(50) not null --	Наименование 	 Заполняется разработчиками
  With Registry do
    Try
      If OpenKey(INIT_KEY + Self.ClassName, False) Then
        Begin
          If ValueExists('edFilial')
          Then begin
            edFilial.Text := ReadString('edFilial');
          end;
//showmessage(edFilial.Text);
          If ValueExists('edOfficeAddress') Then edOfficeAddress.Text := ReadString('edOfficeAddress');

        If ValueExists('chbTabVisible')
          Then chbTabVisible.checked:=Readbool('chbTabVisible');
//          Else chbTabVisible.checked:=true;

        If ValueExists('chbGluk')
          Then chbGluk.checked := Readbool('chbGluk');
//          Else chbGluk.checked := false;

        If ValueExists('chbSaveFiltr')
          Then chbSaveFiltr.checked := Readbool('chbSaveFiltr');
//          Else chbSaveFiltr.checked := false;

        End;
    Finally
      CloseKey;
    End;


{  With ActionList do
    Begin
      cdsTransSd.First;
      For i := 0 to ActionCount - 1 do
        If (Actions[i] as TAction).Tag <> 0 Then (Actions[i] as TAction).Enabled := False;
      While not cdsTransSd.Eof do
        Begin
          For i := 0 to ActionCount - 1 do
            If (Actions[i] as TAction).Tag = cdsTransSd.FieldByName('ACTION_ID').AsInteger then
               (Actions[i] as TAction).Enabled := True;
          cdsTransSd.Next;
        End;
    End;

}


// продолжение форм шоу
  PC.ActivePage := TabMessage;
  PCDetails.ActivePage := TabDetailsMessage;

  if (not cdsss_ok_addinform.active) then
  begin
    LoadData(cdsss_ok_addinform, 'select * from ss_ok_addinform');
  end;

  if (not cdsss_ok_addinform2.active) then
  begin
      cdsss_ok_addinform2.Close;
      with cdsss_ok_addinform2.Params
      do begin
          clear;
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := 2;
      end;
    LoadData(cdsss_ok_addinform2, 'select * from ss_ok_addinform where addinform_code>:p_2');
  end;

  if (not cdsS_STR.Active) then
  Begin
    LoadData(cdsS_STR, SQL_S_STR);
  End;

  If not cdsss_ok_education_count.Active Then begin
    LoadData(cdsss_ok_education_count,  'select * from ss_ok_education_count');
  End;

  If not cdsSS_OK_vid_education.Active Then begin
    LoadData(cdsSS_OK_vid_education,  'select * from SS_OK_vid_education');
  End;


  If not cdsSS_OK_city.Active Then begin
    cdsSS_OK_city.DisableControls;
    LoadData(cdsSS_OK_city,      SQL_SS_OK_city);
    cdsSS_OK_city.EnableControls;
  End;

  If not cdsSS_OK_regplace.Active Then begin
    cdsSS_OK_regplace.DisableControls;
    LoadData(cdsSS_OK_regplace,      SQL_SS_OK_regplace);
    cdsSS_OK_regplace.EnableControls;
  End;


  If not CDSss_ok_passport_type.Active Then begin
    CDSss_ok_passport_type.DisableControls;
    LoadData(CDSss_ok_passport_type,      SQL_ss_ok_passport_type);
    CDSss_ok_passport_type.EnableControls;
  End;

  If not cdsSSOKDepartmentType_SET.Active Then begin
    cdsSSOKDepartmentType_SET.DisableControls;
    LoadData(cdsSSOKDepartmentType_SET,      SQL_SSOKDepartmentType_SET);
    cdsSSOKDepartmentType_SET.EnableControls;
  End;

  If not cdsSSOKSpecial_SET.Active Then begin
    cdsSSOKSpecial_SET.DisableControls;
    LoadData(cdsSSOKSpecial_SET,      SQL_SSOKSpecial_SET);
    cdsSSOKSpecial_SET.EnableControls;
  End;



  If not cdsSSOKDepartment_RO.Active Then begin
    cdsSSOKDepartment_RO.DisableControls;
    LoadData(cdsSSOKDepartment_RO,      SQL_SSOKDepartment_SET2);
    cdsSSOKDepartment_RO.EnableControls;
  End;

  If not(cdsSSOKDepartment_SET.Active)
  Then begin
    cdsSSOKDepartment_SET.DisableControls;

      cdsSSOKDepartment_SET.Close;
      with cdsSSOKDepartment_SET.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := 'A';
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := strtoint(BossLevel);
          CreateParam(ftInteger,'p_3' ,ptInput);
          ParamByName('p_3').Value := 4;
      end;

  sql_:= 'select /*+ INDEX (d ss_ok_department_PK)*/ '+
    ' d.department_id, d.branch, d.department_code, '+
    ' d.department_name, d.department_num, d.department_type_code,'+
    ' d.high_dep_code, d.state_notes, d.emp_code,'+
    ' d.ins_date, d.LEVEL_DEPARTMENT_CODE, substr(ok_service.GET_high_name(d.department_code),1,250) HIGH_NAME '+
    ' FROM ss_ok_department d '+
    ' where state_notes=:p_1 and level_department_code in(:p_2,:p_3) ';

   LoadData(cdsSSOKDepartment_SET,sql_,True);


    cdsSSOKDepartment_SET.Close;
    addLookUpField(cdsSSOKDepartment_SET, cdsSSOKDepartmentType_SET,
                  'department_type_code_show', 'department_type_code',
                  'department_type_code', 'department_type_name', True);
    addLookUpField(cdsSSOKDepartment_SET, cdsSSOKDepartment_RO,
                  'high_dep_code_show', 'high_dep_code',
                  'department_code', 'department_name', False);
    cdsSSOKDepartment_SET.Open;
    cdsSSOKDepartment_SET.EnableControls;
  end;

// department end

//*  if bosslevel='0'
//*  then begin
//*    if not cdsSSOKPost_SET.Active
//*    then begin
//*      cdsSSOKPost_SET.Close;
//*      with cdsSSOKPost_SET.Params
//*      do begin
//*          clear;
//*          CreateParam(ftString,'p_1' ,ptInput);
//*          ParamByName('p_1').Value := 'A';
//*      end;
//*      sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 ';
//*      LoadData(cdsSSOKPost_SET, sql_);
//*    end;
//*  end else begin
    if not cdsSSOKPost_SET.Active
    then begin
      cdsSSOKPost_SET.Close;

        with cdsSSOKPost_SET.Params
        do begin
            clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(3643)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
            end else begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and d.level_department_code in(:p_2,:p_3) ';
            end;
        LoadData(cdsSSOKPost_SET, sql_);

    end;
//*  end;

  actRefreshRefExecute(nil);

  if not cdsNostraSET.Active then LoadData(cdsNostraSET, 'select ''1'' nostra, ''Есть'' nostra_name from dual '+
    ' union all select ''2'' nostra, ''Нет'' nostra_name from dual');

  if not cdsSRegion.Active then LoadData(cdsSRegion, SQL_SRegion);
  if not cdsSDistr_RO.Active then LoadData(cdsSDistr_RO, SQL_SDistr);
  if not cdsSDistr_RO2.Active then LoadData(cdsSDistr_RO2, SQL_SDistr);
  if not cdsSDistrRO2.Active then LoadData(cdsSDistrRO2, SQL_SDistr);
  if not cdsSregionRO2.Active then LoadData(cdsSregionRO2, SQL_Sregion);
  if not cdsSSokStatus_SET.Active then LoadData(cdsSSokStatus_SET,     SQL_ssokStatus_SET);
  if not cdsSSokgender_SET.Active then LoadData(cdsSSokgender_SET,     SQL_ssokgender_SET);

  if not cdsSSOKProfmember_SET.Active then LoadData(cdsSSOKProfmember_SET, SQL_SSOKProfmember_SET);

  if not cdsSSokEducationTitle_SET.Active then   LoadData(cdsSSOKEducationTitle_SET,     SQL_SSOKEducationTitle_SET);
  if not cdsSSokNATIONALITY_SET.Active then   LoadData(cdsSSOKNATIONALITY_SET,     SQL_SSOKNATIONALITY_SET);
  if not cdsSSokFAMILYSTATUS_SET.Active then  LoadData(cdsSSOKFAMILYSTATUS_SET,    SQL_SSOKFAMILYSTATUS_SET);
  if not cdsSSokREGTYPE_SET.Active then   LoadData(cdsSSOKREGTYPE_SET,     SQL_SSOKREGTYPE_SET);

  if not cdsSSokMotive_SET.Active then   LoadData(cdsSSOKMotive_SET,     SQL_SSOKMotiveDismissial_SET);

// загрузка  датасета OK_PERSONAL
  cdsOKPersonal.DisableControls;

  cdsOKPersonal.Close;

  if (not varisnull(go_personal_code))
  and (go_personal_code<>'')
  then begin
        with cdsOKPersonal.Params
        do begin
            clear;
            CreateParam(ftstring,'p_1' ,ptInput);
            ParamByName('p_1').Value := go_personal_code;
            CreateParam(ftstring,'p_2' ,ptInput);
            ParamByName('p_2').Value := go_filial_branch;

        end;
  //    w := ' where status_code=2';
      LoadData(cdsOKPersonal,      SQL_OKPersonal + ' where personal_code=:p_1 and branch=:p_2 ');
  end else begin
    if bosslevel='0'
    then begin
        with cdsOKPersonal.Params
        do begin
            clear;
            CreateParam(ftInteger,'p_1' ,ptInput);
            ParamByName('p_1').Value := 2;
        end;
  //    w := ' where status_code=2';
      LoadData(cdsOKPersonal,      SQL_OKPersonal + ' where status_code=:p_1');
    end else begin
        with cdsOKPersonal.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftInteger,'p_2' ,ptInput);
            ParamByName('p_2').Value := 2;
        end;
  //    w := ' where p.branch = '+''''+curBranch +''' and status_code=2';
      LoadData(cdsOKPersonal,      SQL_OKPersonal + ' where p.branch=:p_1 and status_code=:p_2');
    end;
  end;
  cdsOKPersonal.Close;

  loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
  addLookUpField_OkPersonal;
// END добавление смотрящих-выше-полей

  cdsOKPersonal.Open;
  cdsOKPersonal.EnableControls;


  if (HeadBranch_ ='09006')
  or(HeadBranch_ = '09049')
  or(HeadBranch_ = '09004')
  then begin
    bbUvol.Visible:=true;
  end else begin
    bbUvol.Visible:=false;
  end;

  if (HeadBranch_ <>'09006') // подтв. в ГО
  and (HeadBranch_ <>'09004')  // 08.11.2012 теперь и в агро подтв. в ГО
  and (HeadBranch_<>'09049')  // подтв. в ГО
  then begin
    lbGO_razreshil.visible := false;
    dblcbGOsubmit.visible := false;

    gb_xalk.visible := false;

    cdbgok_personal.columns[46].visible := false;
//    bbGOsubmit.visible := false;
//    bbGOChangeStatus.visible:=false;
      LBgosubmit.visible := false;
      DBTgosubmit.visible := false;
//    DBTgosubmit2.visible := false;

  end else begin

    if not cdsSSOKPost_new.Active
    then begin
      cdsSSOKPost_new.Close;

      with cdsSSOKPost_new.Params
      do begin
          clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(3787)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
            end else begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and d.level_department_code in(:p_2,:p_3) ';
            end;
      LoadData(cdsSSOKPost_new, sql_);
    end;


    dblcbGOsubmit.visible := true;

    gb_xalk.visible := true;

    cdbgok_personal.columns[46].visible := true;

      LBgosubmit.visible := true;
      DBTgosubmit.visible := true;
//    DBTgosubmit2.visible := true;

  end;

  // в халке
  if  ( (HeadBranch_ ='09006') or (HeadBranch_ ='00883') )  // не связано с подтв. в ГО
  then begin
    lbGdePropisan2.Caption  := '* Постоянное';
    lbGdePropisan2_.Caption := 'Место Жит-ва';
    lbDistrRO2.Caption  := '* Временное';
    lbDistrRO2_.Caption := 'Место Жит-ва';
    dbedSpec.ReadOnly:=true;
    dblcbSpec.ReadOnly:=true;
  end else begin
    lbGdePropisan2.Caption  := '* Где прописан';
    lbGdePropisan2_.Caption := '';
    lbDistrRO2.Caption  := '* Место Жит-ва';
    lbDistrRO2_.Caption := '';
    dbedSpec.ReadOnly:=false;
    dblcbSpec.ReadOnly:=false;
  end;

  if ( (HeadBranch_ ='09004') or (HeadBranch_ ='00394') )
  then begin
    // в пахтабанке не показывать некоторые поля
    // панель Форма
    lbFormRegPlace.visible := false;
    lbFormRegPlace_.visible := false;
    dblcbFormSS_OK_REGPLACE.visible := false;
    dblcbFormSS_OK_REGPLACE_.visible := false;
    dbedFormPASS_REG.visible := false;
    dbedFormPASS_REG_.visible := false;

    lbDistrRO2.visible := false;
    lbDistrRO2_.visible := false;
    edRegion_RO2.visible := false;
    edRegion_RO2_.visible := false;
    dblcbRegion_RO2.visible := false;
    dblcbRegion_RO2_.visible := false;
    edDistrRO_2.visible := false;
    edDistrRO_2_.visible := false;
    dblcbDistrRO_2.visible := false;
    dblcbDistrRO_2_.visible := false;
    dbedHOME_ADDRESSFACT.visible := false;
    dbedHOME_ADDRESSFACT_.visible := false;

//    lbRegionForm.visible := false;
//    DBEd_Region.visible := false;
//    DBLCB_SRegion.visible := false;
//    lbFormBirthPlace.visible := false;
//    DBEdBirthPlace.visible := false;
//    lbFormDistr.visible := false;
//    DBEd_Distr.visible := false;
//    DBLCBdistr.visible := false;

  end else begin
       bbSudDel.visible:=true;
       bbSudDel.enabled:=true;
       bbSudDel2.visible:=true;
       bbSudDel2.enabled:=true;
       bbSudDel3.visible:=true;
       bbSudDel3.enabled:=true;

    lbFormRegPlace.visible:=true;
    dblcbFormSS_OK_REGPLACE.visible:=true;
    dbedFormPASS_REG.visible:=true;

    lbDistrRO2.visible:=true;
    lbDistrRO2_.visible:=true;
    edRegion_RO2.visible:=true;
    edRegion_RO2_.visible:=true;
    dblcbRegion_RO2.visible:=true;
    dblcbRegion_RO2_.visible:=true;
    edDistrRO_2.visible:=true;
    edDistrRO_2_.visible:=true;
    dblcbDistrRO_2.visible:=true;
    dblcbDistrRO_2_.visible:=true;
    dbedHOME_ADDRESSFACT.visible:=true;
    dbedHOME_ADDRESSFACT_.visible:=true;

//    lbRegionForm.visible:=true;
//    DBEd_Region.visible:=true;
//    DBLCB_SRegion.visible:=true;
//    lbFormBirthPlace.visible:=true;
//    DBEdBirthPlace.visible:=true;
//    lbFormDistr.visible:=true;
//    DBEd_Distr.visible:=true;
//    DBLCBdistr.visible:=true;
  end;

  if (not varisnull(go_personal_code))
  and (go_personal_code<>'')
  then begin
    actFormExecute(nil);
    pcmainok.ActivePage := FormPanel_;
//showmessage('1');
  end else begin
    actTableExecute(nil);
    pcmainok.ActivePage := TablePanel_;
  end;
// это капитал банк или нет
  show_bank_ := getsqlresult('select header_id from s_mfo where bank_id=info.getbranch');

  if (show_bank_='09006') or (show_bank_='09004') // не связано с подтв. в ГО
  then begin
    cdbgOKStat.ReadOnly := true;
    DBEdit23.ReadOnly:=true;
    cdsOKStat.ReadOnly:=true;
        bbStatNew.visible:=FALSE;
        bbStatUndo.visible:=FALSE;
        bbStatSave.visible:=FALSE;
        bbStatDelete.visible:=FALSE;
        bbStatNew.enabled:=FALSE;
        bbStatUndo.enabled:=FALSE;
        bbStatSave.enabled:=FALSE;
        bbStatDelete.enabled:=FALSE;
  end;

  if (show_bank_='09049') or (show_bank_='00974')  // не связано с подтв. в ГО
  then begin
    kapital_bank := TRUE;
    lbShowBank.Caption := ' ОАТБ "Капиталбанк" '+branch+ '  ('+FiltrLevelName+')';

        bbStatNew.visible:=true;
        bbStatUndo.visible:=true;
        bbStatSave.visible:=true;
        bbStatDelete.visible:=true;
        bbStatNew.enabled:=true;
        bbStatUndo.enabled:=true;
        bbStatSave.enabled:=true;
        bbStatDelete.enabled:=true;
// в капитале разрешается редактировать штатное расписание
  end else begin
    kapital_bank := FALSE;
    if (show_bank_='09006')
    then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(3962)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
      lbShowBank.Caption := 'Категория:'+mfo_category_type_code+' "'+branch+'" '+ '  ('+FiltrLevelName+')';
    end else begin
      lbShowBank.Caption := ' "'+branch+'" '+ '  ('+FiltrLevelName+')';
    end;
  end;

  BitBtn141Click(nil); // показать дни в табеле 28,29,30 или 31

  if (HeadBranch_ ='09004')
  then begin
    lbFilial.visible:=true;
  end;

  if not cdsss_ok_zp_rate.Active then LoadData(cdsss_ok_zp_rate, SQL_ss_ok_zp_rate);
  if not cdsss_ok_zp_rate_type.Active then LoadData(cdsss_ok_zp_rate_type, SQL_ss_ok_zp_rate_type);
  
end;

procedure TBOKForm.actSSOKPostExecute(Sender: TObject);
begin
  ViewRef(0);
end;

procedure TBOKForm.actSSOKEducationExecute(Sender: TObject);
begin
  ViewRef(1);
{
  RefExec;
  PC.ActivePage:=TabSSOKEducation;

  If cdsSSOKEducation_SET.Active Then Exit;
  cdsSSOKEducation_SET.DisableControls;
  cdsSSOKInstitution_SET.DisableControls;

  LoadData(cdsSSOKEducation_SET,      SQL_SSOKEducation_SET);
  cdsSSOKEducation_SET.IndexFieldNames := 'education_code';
  LoadData(cdsSSOKInstitution_SET,    SQL_SSOKInstitution_SET);
  cdsSSOKInstitution_SET.IndexFieldNames := 'institution_code';

  cdsSSOKInstitution_Set.MasterSource    := dsSSOKEducation_Set;
  cdsSSOKInstitution_Set.IndexFieldNames := 'EDUCATION_CODE';   // поле в детейл таблице =
  cdsSSOKInstitution_Set.MasterFields    := 'EDUCATION_CODE';    // поле в мастер таблице

  cdsSSOKEducation_SET.EnableControls;
  cdsSSOKInstitution_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKNationalityExecute(Sender: TObject);
begin
  ViewRef(2);
{
  RefExec;
  PC.ActivePage:=TabSSOKNationality;

  If cdsSSOKNationality_SET.Active Then Exit;
  cdsSSOKNationality_SET.DisableControls;

  LoadData(cdsSSOKNationality_SET,    SQL_SSOKNationality_SET);
//  cdsSSOKNationality_SET.IndexFieldNames := 'nationality_code';

  cdsSSOKNationality_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKPartyExecute(Sender: TObject);
begin
  ViewRef(3);
{
  RefExec;
  PC.ActivePage := TabSSOKParty;

  If cdsSSOKParty_SET.Active Then Exit;
  cdsSSOKParty_SET.DisableControls;

  LoadData(cdsSSOKParty_SET,    SQL_SSOKParty_SET);
//  cdsSSOKParty_SET.IndexFieldNames := 'party_code';

  cdsSSOKParty_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKDegreeExecute(Sender: TObject);
begin
  ViewRef(4);
{
  RefExec;
  PC.ActivePage := TabSSOKDegree;

  If cdsSSOKDegree_SET.Active Then Exit;
  cdsSSOKDegree_SET.DisableControls;
  LoadData(cdsSSOKDegree_SET,            SQL_SSOKDegree_SET);
//  cdsSSOKDegree_SET.IndexFieldNames := 'degree_id';
  cdsSSOKDegree_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKAcademicExecute(Sender: TObject);
begin
  ViewRef(5);
{
  RefExec;
  PC.ActivePage := TabSSOKAcademic;

  If cdsSSOKAcademic_SET.Active Then Exit;
  cdsSSOKAcademic_SET.DisableControls;
  LOADDATA(CDSSSOKAcademic_SET,      SQL_SSOKAcademic_SET);
//  cdsSSOKAcademic_SET.IndexFieldNames := 'academic_id';
  cdsSSOKAcademic_SET.EnableControls;
}  
end;

procedure TBOKForm.actSSOKLanguageExecute(Sender: TObject);
begin
  ViewRef(6);
{
  RefExec;
  PC.ActivePage := TabSSOKLanguage;
  If cdsSSOKLanguage_SET.Active Then Exit;
  cdsSSOKLanguage_SET.DisableControls;
  LOADDATA(CDSSSOKLanguage_SET,      SQL_SSOKLanguage_SET);
//  cdsSSOKLanguage_SET.IndexFieldNames := 'language_id';
  cdsSSOKLanguage_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKLevelLanguageExecute(Sender: TObject);
begin
  ViewRef(7);
{
  RefExec;
  PC.ActivePage := TabSSOKLevelLanguage;
  If cdsSSOKLevelLanguage_SET.Active Then Exit;
  cdsSSOKLevelLanguage_SET.DisableControls;
  LOADDATA(CDSSSOKLevelLanguage_SET,      SQL_SSOKLevelLanguage_SET);
//  cdsSSOKLevelLanguage_SET.IndexFieldNames := 'level_language_id';
  cdsSSOKLevelLanguage_SET.EnableControls;
}
end;

procedure TBOKForm.actSSOKTypePeriodExecute(Sender: TObject);
begin
  ViewRef(8);
{
  RefExec;
  PC.ActivePage := TabSSOKTypePeriod;
  If cdsSSOKTypePeriod_SET.Active Then Exit;
  cdsSSOKTypePeriod_SET.DisableControls;
  LOADDATA(CDSSSOKTypePeriod_SET,      SQL_SSOKTypePeriod_SET);
//  cdsSSOKTypePeriod_SET.IndexFieldNames := 'type_period_id';
  cdsSSOKTypePeriod_SET.EnableControls;
}  
end;

procedure TBOKForm.actSSOKRelationExecute(Sender: TObject);
begin
  ViewRef(9);
{
  RefExec;
  PC.ActivePage := TabSSOKRelation;
  If cdsSSOKRelation_SET.Active Then Exit;
  cdsSSOKRelation_SET.DisableControls;
  LOADDATA(CDSSSOKRelation_SET,      SQL_SSOKRelation_SET);
//  cdsSSOKRelation_SET.IndexFieldNames := 'relation_id';
  cdsSSOKRelation_SET.EnableControls;
}  
end;

procedure TBOKForm.actSSOKQualificationExecute(Sender: TObject);
begin
  ViewRef(10);
{
  RefExec;
  PC.ActivePage := TabSSOKQualification;

  If cdsSSOKQualification_SET.Active Then Exit;
  cdsSSOKQualification_SET.DisableControls;
  LOADDATA(CDSSSOKQualification_SET,      SQL_SSOKQualification_SET);
//  cdsSSOKQualification_SET.IndexFieldNames := 'qualification_id';
  cdsSSOKQualification_SET.EnableControls;
}  
end;

procedure TBOKForm.actSSOKLeaveExecute(Sender: TObject);
begin
  ViewRef(11);
  {
  RefExec;
  PC.ActivePage := TabSSOKLeave;

  If cdsSSOKLeave_SET.Active Then Exit;
  cdsSSOKLeave_SET.DisableControls;
  LOADDATA(CDSSSOKLeave_SET,      SQL_SSOKLeave_SET);
//  cdsSSOKLeave_SET.IndexFieldNames := 'leave_id';
  cdsSSOKLeave_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKMotiveDismissialExecute(Sender: TObject);
begin
  ViewRef(12);
  {
  RefExec;
  PC.ActivePage := TabSSOKMotiveDismissial;

  If cdsSSOKMotiveDismissial_SET.Active Then Exit;
  cdsSSOKMotiveDismissial_SET.DisableControls;
  LOADDATA(CDSSSOKMotiveDismissial_SET,      SQL_SSOKMotiveDismissial_SET);
//  cdsSSOKMotiveDismissial_SET.IndexFieldNames := 'motive_dismissial_id';
  cdsSSOKMotiveDismissial_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKYouthExecute(Sender: TObject);
begin
  ViewRef(13);
  {
  RefExec;
  PC.ActivePage := TabSSOKYouth;
  If cdsSSOKYouth_SET.Active Then Exit;
  cdsSSOKYouth_SET.DisableControls;
  LOADDATA(CDSSSOKYouth_SET,      SQL_SSOKYouth_SET);
//  cdsSSOKYouth_SET.IndexFieldNames := 'youth_id';
  cdsSSOKYouth_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKDepartmentTypeExecute(Sender: TObject);
begin
  ViewRef(14);
  {
  RefExec;
  PC.ActivePage := TabSSOKDepartmentType;
  If cdsSSOKDepartmentType_SET.Active Then Exit;
  cdsSSOKDepartmentType_SET.DisableControls;
  LoadData(cdsSSOKDepartmentType_SET,      SQL_SSOKDepartmentType_SET);
//  cdsSSOKDepartmentType_SET.IndexFieldNames := 'department_type_id';
  cdsSSOKDepartmentType_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKDepartmentExecute(Sender: TObject);
begin
  ViewRef(15);
end;

procedure TBOKForm.actSSOKArticleExecute(Sender: TObject);
begin
  ViewRef(16);
  {
  RefExec;
  PC.ActivePage := TabSSOKArticle;

  If cdsSSOKArticle_SET.Active Then Exit;
  cdsSSOKArticle_SET.DisableControls;
  LOADDATA(cdsSSOKArticle_SET,      SQL_SSOKArticle_SET);
//  cdsSSOKArticle_SET.IndexFieldNames := 'article_id';

  cdsSSOKArticle_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKCommandTypeExecute(Sender: TObject);
begin
  ViewRef(17);
  {
  RefExec;
  PC.ActivePage := TabSSOKCommandType;
  If cdsSSOKCommandType_SET.Active Then Exit;
  cdsSSOKCommandType_SET.DisableControls;
  LOADDATA(cdsSSOKCommandType_SET,      SQL_SSOKCommandType_SET);
//  cdsSSOKCommandType_SET.IndexFieldNames := 'command_type_id';
  cdsSSOKCommandType_SET.EnableControls;
  }
end;

procedure TBOKForm.actSSOKTemplateCommandExecute(Sender: TObject);
begin
  ViewRef(18);
  {
  RefExec;
  PC.ActivePage := TabSSOKTemplateCommand;

  If not cdsSSOKCommandType_SET.Active Then begin
    cdsSSOKCommandType_SET.DisableControls;
    LoadData(cdsSSOKCommandType_SET,      SQL_SSOKCommandType_SET);
    cdsSSOKCommandType_SET.EnableControls;
  End;

  If cdsSSOKTemplateCommand_SET.Active Then Exit;
  cdsSSOKTemplateCommand_SET.DisableControls;
  LoadData(cdsSSOKTemplateCommand_SET,    SQL_SSOKTemplateCommand_SET);

  cdsSSOKTemplateCommand_SET.Close;
  addLookUpField(cdsSSOKTemplateCommand_SET, cdsSSOKCommandType_SET,
                'command_type_code_show', 'command_type_code',
                'command_type_code', 'command_type_name', True);
  cdsSSOKTemplateCommand_SET.Open;
  cdsSSOKTemplateCommand_SET.EnableControls;
  }
end;

procedure TBOKForm.ActPrevExecute(Sender: TObject);
begin

 IF DetailsPanel.Visible THEN BEGIN
   if      PCDetails.ActivePage =  TabOKEducation_0  then begin GetRef(cdbgOKEducation);             end
   else if PCDetails.ActivePage =  TabSheet_1        then begin GetRef(cdbgOKAcademic);      end
   else if PCDetails.ActivePage =  TabDegree_2       then begin GetRef(cdbgOKDegree);      end
   else if PCDetails.ActivePage =  TabSheet_3        then begin GetRef(cdbgOKAward);            end
   else if PCDetails.ActivePage =  TabOKScientific_4 then begin GetRef(cdbgOKScientific);           end
   else if PCDetails.ActivePage =  TabSheet_5        then begin GetRef(cdbgOKVoyage);         end
   else if PCDetails.ActivePage =  TabSheet_6        then begin GetRef(cdbgOKLanguage);         end
   else if PCDetails.ActivePage =  TabSheet_7        then begin GetRef(cdbgOKRelation);    end
   else if PCDetails.ActivePage =  TabSheet_8        then begin GetRef(cdbgOKPeriod);       end
   else if PCDetails.ActivePage =  TabOKRise_9       then begin GetRef(cdbgOKRise);         end
   else if PCDetails.ActivePage =  TabSheet_10       then begin GetRef(cdbgOKElection);    end
   else if PCDetails.ActivePage =  TabSheet_11       then begin GetRef(cdbgOKPremium);            end
   else if PCDetails.ActivePage =  TabSheet_12       then begin GetRef(cdbgOKArmy); end
   else if PCDetails.ActivePage =  TabSheet_13       then begin GetRef(cdbgOKParty);            end
   else if PCDetails.ActivePage =  TabSheet_14       then begin GetRef(cdbgOKYouth);   end
//   else if PCDetails.ActivePage =  TabOKPost_15      then begin GetRef(cdbgOKPost);          end
   else if PCDetails.ActivePage =  TabSheet_16       then begin GetRef(cdbgOKLeave);       end
   else if PCDetails.ActivePage =  TabSheet_17       then begin GetRef(cdbgOKConvictions);      end
   else if PCDetails.ActivePage =  TabSheet_18       then begin GetRef(cdbgOKAddInform);  end
   else if PCDetails.ActivePage =  TabSheet_19       then begin GetRef(cdbgOKPenalty);          end
   else if PCDetails.ActivePage =  TabSheet_20       then begin GetRef(cdbgOKChangeFIO);   end
   else if PCDetails.ActivePage =  TabSheet_21       then begin GetRef(cdbgokhospital);   end
   else if PCDetails.ActivePage =  TabSheet_22       then begin GetRef(cdbgokprivilege);   end
   else if PCDetails.ActivePage =  TabSheet_23       then begin GetRef(cdbgokincrease);   end
   else if PC.ActivePage =  TabdetailsMessage        then begin ShowMessage('Пожалуйста, Выберите Данные!');
   end; // энд последнего ифа


 END
 ELSE IF  OpenPanel.Visible THEN BEGIN
   GetRef(cdbgOK_Personal);
 END
 ELSE IF  TablePanel.Visible THEN BEGIN
   GetRef(cdbgOK_Personal);
 END
 ELSE IF  FormPanel.Visible THEN BEGIN
   GetRef(cdbgOK_Personal);
 END
 ELSE IF  RefPanel.Visible THEN BEGIN
   if      PC.ActivePage =  TabOKPersonal  then begin GetRef(cdbgOK_Personal); end
   else if PC.ActivePage =  TabOKStat      then begin GetRef(cdbgOKStat);
   end;
 END;
 // энд САМОГО ПОСЛЕДНЕГО ИФА

end;

procedure TBOKForm.GetRefCDBG(cdbgSSOK: TClientDBGrid);
var i,k :  Integer;
    s :  String ;
begin

  s := '| пп |';
  // формирование шапки для текстового файла
  For i := 0 to cdbgSSOK.Columns.Count-1 do
  Begin
      if (cdbgSSOK.Columns.Items[i].Visible)
        and (i<>1)
      then begin
          s := s + rpad(cdbgSSOK.Columns.Items[i].title.Caption, cdbgSSOK.Columns.Items[i].Width div 6)  + '|';
      end;
  End;

  System.Writeln(f,Lpad('-',Length(s),'-'));
  System.Writeln(f,s);
  System.Writeln(f,Lpad('-',Length(s),'-'));
  k:=0;
  // формирование данных для текстового файла
  cdbgSSOK.DataSource.Dataset.DisableControls;
  cdbgSSOK.DataSource.Dataset.First;
  While not cdbgSSOK.DataSource.Dataset.Eof do
  Begin
      k:=k+1;
      s := '|'+Lpad( IntToStr(k) ,3,' ')+' |';
      for i := 0 to cdbgSSOK.Columns.Count-1 do
      begin
          if (cdbgSSOK.Columns.Items[i].Visible)
          and (i<>1)
          then begin
              s := s + rpad( cdbgSSOK.DataSource.Dataset.Fields.FieldByName(cdbgSSOK.Columns.Items[i].FieldName).AsString, cdbgSSOK.Columns.Items[i].Width div 6) + '|';
          end;
      end;
      System.Writeln(f,s);
      cdbgSSOK.DataSource.Dataset.Next;
  End;
  cdbgSSOK.DataSource.Dataset.EnableControls;
  System.Writeln(f,Lpad('-',Length(s),'-'));

end;

procedure TBOKForm.GetRef(cdbgSSOK: TClientDBGrid);
begin

  If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');

  try
    System.AssignFile(f,'C:\NCI Bank\OK\Temp\report_ok.txt');
    System.Rewrite(f);

    Try
      System.Writeln(f,cdbgSSOK.Columns.Items[0].title.Caption);
      GetRefCDBG(cdbgSSOK);
    Finally
      System.CloseFile(f);
    End;
  except
    showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\report_ok.txt"');
    raise;
  end;

  try
    WinExec('notepad C:\NCI Bank\OK\Temp\report_ok.txt', SW_MAXIMIZE);
  except
    showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\report_ok.txt"');
  end;

end;

procedure TBOKForm.cdsSSOKDepartment_SETAfterPost(DataSet: TDataSet);
var ErMessage : string;
begin

  ErMessage := '';

  if DataSet.Fields.FieldByName('department_name').Asstring='БАНК'
    then ErMessage := 'Ошибка !!!'+#13+'Нельзя назвать отдел общим словом БАНК.'
  else if DataSet.Fields.FieldByName('department_type_code').IsNull
    then ErMessage := 'Ошибка при сохранении.'+#13+'Укажите тип отдела.'
  else if DataSet.Fields[1].IsNull
    then ErMessage := 'Ошибка при сохранении.'+#13+'Укажите уникальный код отдела.';

  if ErMessage <> ''
    then begin
      ExecSQL('ROLLBACK');
      TCLientDataSet(DataSet).UndoLastChange(True);
      ShowMessage(ErMessage);
      Abort;
    end else begin
      Try
        SaveData(DataSet);
        ExecSQL('COMMIT');
        DataSet.Refresh;
        cdsSSOKDepartment_RO.Refresh;
      Except
        on E: Exception do
          Begin
            ExecSQL('ROLLBACK');
            TCLientDataSet(DataSet).UndoLastChange(True);
            ShowMessage('Ошибка при сохранении.'+#13+E.Message);
            Abort;
      End;
    End;
  end;
end;

procedure TBOKForm.actTableExecute(Sender: TObject);
begin
{  if LastPanel = 'OpenPanel' then
    If Application.MessageBox(PChar(s), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes

      ;
}
  LastPanel := 'TablePanel';
  pcmainok.ActivePage := TablePanel_;

  actCopyPers.Checked     := False ;
  actTable.Checked := True;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;

  actNew.Checked     := False;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=True;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;
  
end;

procedure TBOKForm.actFormExecute(Sender: TObject);
begin

  LastPanel := 'FormPanel';
  pcmainok.ActivePage := FormPanel_;
  actForm.Checked := True;

  actCopyPers.Checked     := False ;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=False;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;

end;

procedure TBOKForm.actNewExecute(Sender: TObject);
//var v: variant;
begin


  if not(cdsdistr.Active)
  then begin
    loaddata(cdsdistr,SQL_S_DISTR);
  end;

 if  LastPanel = 'DetailsPanel'
 then begin
   ActDetailNewExecute(nil);
 end;

 if   (LastPanel = 'TablePanel')
//   or (LastPanel = 'DetailsPanel')
   or (LastPanel = 'RefPanel')
   or (LastPanel = 'Ref2Panel')
   or (LastPanel = 'RezervSetPanel')
 then begin
  ActDetailUndoExecute(nil);

  LastPanel := 'OpenPanel';
  pcmainok.ActivePage := OpenPanel_;

  actCopyPers.Checked     := False ;
  actNew.Checked     := True ;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked   := False;
  actOptions.Checked   := False;
  actiias.Checked := false;

  actUndoChanges.Enabled := True;
  actNew.Enabled     := False;
  actTable.Enabled   := False;
  actForm.Enabled    := False;
  actRef.Enabled     := False;
  actDetails.Enabled := False;
  actReAccept.Enabled   := False;
  actFilter.Enabled  := False;
  actiias.enabled := false;


  cdsOKPersonal_NEW.Close;
  LoadData(cdsOKPersonal_NEW,      SQL_OKPersonal_EMPTY);
  cdsOKPersonal_NEW.Open;
  cdsOKPersonal_NEW.Insert;
  btnOnOpenPanel.Action := actSaveNEW;
  cdsOKPersonal_NEW.FieldByName('reg_type_code').AsInteger := 1;
  cdsOKPersonal_NEW.FieldByName('status_code').AsInteger := 1;

// если халк то только Паспорт
  if HeadBranch_='09006'  // не связано с подтв. в ГО
  then begin
    cdsOKPersonal_NEW.FieldByName('passport_type_code').AsInteger := 1;
    DBLookupComboBox48.ReadOnly:=true;
  end;

    try
      cdsOKPersonal_NEW.FieldByName('tabno').asstring :=
        getSQLresultPAR('select decode(max(tabno),null,0,max(tabno))+1 from ok_personal '+
          ' where branch=:p_1',branch);


    except
//      showmessage(sql_);
//      exit;
    end;

 end;

  OpenPanel.Visible    := (actNew.Checked or actReAccept.Checked);
  dbeOK_FAMILY.SetFocus;

end;

procedure TBOKForm.actSaveNewExecute(Sender: TObject);
var z,i    : integer;
    id_  : integer;
    v    : variant;
    sql_, ErMessage : string;
    text_f : textfile;
    raznica:double;
const
  ERROR_NO = 'ORA-20000: ';
begin

  ErMessage := '';
/////////////////



        if (cdsOKPersonal_new.fieldbyname('cod_distr_uvd').asstring='')
        and (cdsOKPersonal_new.fieldbyname('cod_distr_prim').asstring='')
        then ErMessage := ErMessage+' "(4291)Укажите * Код района, подразделением УВД которого выдан паспорт"  или примечание';

        if cdsOKPersonal_new.FieldByName('Reg_Type_code').AsString=''
        then ErMessage := ErMessage+' "Тип прописки" ';

        if cdsOKPersonal_new.FieldByName('PASS_DATE').AsString=''
        then ErMessage := ErMessage+' "Дата выдачи паспорта" ';

        if cdsOKPersonal_new.FieldByName('PASS_NUM').AsString=''
        then ErMessage := ErMessage+' "Номер паспорта" ';

        if cdsOKPersonal_new.FieldByName('PASS_SERIYA').AsString=''
        then ErMessage := ErMessage+' "Серия паспорта" ';

        if cdsOKPersonal_new.FieldByName('profmember').AsString=''
        then ErMessage := ErMessage+' "Профсоюз" ';

  if  ( cdsOKPersonal_new.FieldByName('gender_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Пол" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('nationality_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Национальность" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('family_status_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Семейное положение" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('FAMILY').AsString='')
  then begin
    ErMessage := ErMessage+' " * Фамилия" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('FIRST_NAME').AsString='')
  then begin
    ErMessage := ErMessage+' " * Имя" ';
  end;


  if cdsOKPersonal_new.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if cdsOKPersonal_new.FieldByName('nps_id').AsString = ''
    then begin
          ErMessage:=ErMessage+#13+#13+'(ИИАС 05328)Пенсионный ИН должен быть указан.';
    end else begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'; //cdsOKPersonal_new.FieldByName('nps_id').AsString+
//        ' and personal_code<>:p_2'; //+cdsOKPersonal_new.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOKPersonal_new.FieldByName('nps_id').AsString
//                cdsOKPersonal_new.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+#13+#13+'Пенсионный ИН '+cdsOKPersonal_new.FieldByName('nps_id').AsString+' уже используется!'+#13+' Измените Пенсионный ИН и сохраните данные.';
//          Showmessage(ErMessage);
//          exit;
        end;
      except on e:exception
        do begin
          showmessage('4317)нпс='+cdsOKPERSONAL.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOKPERSONAL.FieldByName('personal_code').AsString+#13+
            sql_+#13+e.message);

          exit;
        end;
      end;

      z := length(cdsOKPersonal_new.FieldByName('nps_id').AsString);
      if (z<>14)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН должно содержать 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPersonal_new.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
//        Showmessage(ErMessage);
//        exit;
      end;
    end;
  end;

      z := length(cdsOKPersonal_new.FieldByName('inn').AsString);
      if (z<>9)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле ИНН должно содержать 9 цифр'+#13+
          'вы ввели ИНН='+cdsOKPersonal_new.FieldByName('inn').AsString+#13+
          'только '+IntToStr(z)+' символов';
//        Showmessage(ErMessage);
//        exit;
      end;

  if (HeadBranch_='09006') and       // не связано с подтв. в ГО
      (cdsOKPersonal_new.FieldByName('passport_type_code').AsString <> '1')
  then begin
    cdsOKPersonal_new.FieldByName('passport_type_code').AsInteger := 1;
  end;

  if (cdsOKPersonal_new.State in [dsEdit, dsInsert])  then begin    cdsOKPersonal_new.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString :=cdsOKPersonal_new.FieldByName('cod_obl_live').AsString ;    cdsOKPersonal_new.FieldByName('HOME_ADDRESSFACT_DISTR').AsString :=    cdsOKPersonal_new.FieldByName('cod_distr_live').AsString ;
  end;

  if  ( cdsOKPersonal_new.FieldByName('reg_type_code').AsString='2')
  and (   cdsOKPersonal_new.FieldByName('REG_DATE_END').AsString='')
  then begin
    ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
  end;



          if  ( cdsOKPersonal_new.FieldByName('HOME_ADDRESS_REGION_ID').AsString='')
          and  ( cdsOKPersonal_new.FieldByName('HOME_ADDRESS_DISTR').AsString='')
          and  ( cdsOKPersonal_new.FieldByName('Home_Address').AsString='')
          then begin
//            ErMessage := ErMessage+' "Где прописан- район,обл,адрес" ';
            ErMessage := ErMessage+' "'+lbGdePropisan2.caption+' '+lbGdePropisan2_.caption+'- район,обл,адрес" ';
          end;

    if  ( cdsOKPersonal_new.FieldByName('Education_Title_CODE').AsString='')
    then begin
      ErMessage := ErMessage+' "Образование сотрудника (Наименование)" ';
    end;

    if  ( cdsOKPersonal_new.FieldByName('inn').AsString='')
    then begin
      ErMessage := ErMessage+' "ИНН" ';
    end;

  if cdsOKPersonal_new.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if  ( cdsOKPersonal_new.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
    end;
  end;
  
  if  ( cdsOKPersonal_new.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('PASS_DATE').AsString<>'')
  and (cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString<>'')
  then begin
    raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
      cdsOKPersonal_new.FieldByName('PASS_DATE').AsString,cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16)
    then ErMessage := ErMessage+'"Разница Дата получения паспорта и Даты рождения не должна быть меньше 16" ';

  end;

  if (cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString='')
  then ErMessage := ErMessage+' "Дата рождения" '
  else begin
    if ( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString,7,4))
          <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
    or (( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString,7,4))
          =45) and (now< strtodate(copy(cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
    )
    then begin
      if (cdsOKPersonal_new.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
      then begin
        ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsOKPersonal_new.FieldByName('PASS_DATE_END').AsString+'" ';
      end else begin
        if (cdsOKPersonal_new.FieldByName('PASS_DATE_END').AsDateTime < now)
        then ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsOKPersonal_new.FieldByName('PASS_DATE_END').AsString+'" ';
      end;
    end;

    raznica:=getsqlresultpar('select trunc(months_between(sysdate,:p_1)/:p_2) from dual',cdsOKPersonal_new.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16) or (raznica>90)
    then ErMessage := ErMessage+'"Разница Даты текущей и Даты рождения не должна быть меньше 16 и больше 90" ';
  end;

/////////////////
  if ErMessage <>''
  then ErMessage := ErMessage+#13+'------------------------'+#13;
/////////////////
  for i := 0 to cdbgOKPersonal_NEW.Columns.Count-1 do
  begin
    if cdbgOKPersonal_NEW.Columns.Items[i].Visible  then
    begin
      if (cdsOKPersonal_NEW.Fields.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString='')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'Отчество')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'N')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'За рубежом')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'N приказа')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'Дата приказа')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<>'Причина увольнения')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'За рубежом')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Место рождения')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Место выдачи паспорта')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Место регистрации')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Место жительства')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Где прописан')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Пенсионный ИН')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Отдел')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'Должность')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> '(обл)Место рождения')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> '(район)Место рождения')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'gosubmit_code')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'GOSUBMIT_CODE')
      and (cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption<> 'состояние в ГО')

      then
      begin
        ErMessage := ErMessage+' "'+cdbgOKPersonal_NEW.Columns.Items[i].Title.Caption+'" ';
      end;
    end;
  end;

      if (headbranch_='09006') // не связано с подтв. в ГО
      then begin
        if cdsOKPersonal_new.FieldByName('TRUD_SOGL').AsString=''
        then ErMessage := ErMessage+' "По трудовому соглашению" ';
        if cdsOKPersonal_new.FieldByName('profmember').AsString=''
        then ErMessage := ErMessage+' "Профсоюз" ';
        if cdsOKPersonal_new.FieldByName('telefon').AsString=''
        then ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
        try
          strtoint64(cdsOKPersonal_new.FieldByName('telefon').AsString);
        except
          ErMessage := ErMessage+' "Телефон '+cdsOKPersonal_new.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
        end;
        if length(cdsOKPersonal_new.FieldByName('telefon').AsString)<>11
        then ErMessage := ErMessage+' "в Телефоне должно быть всегда 11 цифр в Халк банке" ';
        if (cdsOKPersonal_new.fieldbyname('regplace_code').asstring='')
        and (cdsOKPersonal_new.fieldbyname('PASS_REG').asstring='')
        then ErMessage := ErMessage+' "Укажите * *Место Регистрации (паспорт) по справочнику или примечание" ';
      end;


  if (cdsOKPersonal_new.FieldByName('Home_Address').AsString='')
  then begin
    if ( cdsOKPersonal_new.FieldByName('HOME_ADDRESS_REGION_ID').AsString='')
    Then ErMessage := ErMessage+' "Где прописан (область)" ';
    If ( cdsOKPersonal_new.FieldByName('HOME_ADDRESS_DISTR').AsString=''    )
    Then ErMessage := ErMessage+' "Где прописан (район/город)" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('cod_str_birth').AsString='')
  then begin
    ErMessage := ErMessage+' "Страна рождения" ';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOKPersonal_new.FieldByName('cod_str_birth').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна рождения '+cdsOKPersonal_new.FieldByName('cod_str_birth').AsString+' нет в справочнике" ';
    end;
  end;

  if (cdsOKPersonal_new.FieldByName('cod_str_birth').AsString='860')
  then begin
    if ( cdsOKPersonal_new.FieldByName('region_id').AsString='')
    Then ErMessage := ErMessage+' "Место рождения сотрудника (область)" ';
    If ( cdsOKPersonal_new.FieldByName('distr').AsString=''    )
    Then ErMessage := ErMessage+' "Место рождения сотрудника (район/город)" ';
  end else begin
    if ( cdsOKPersonal_new.FieldByName('cod_obl_prim').AsString='')
    Then ErMessage := ErMessage+' "Место рождения сотрудника (область-примечание)" ';
    If ( cdsOKPersonal_new.FieldByName('cod_place_birth_prim').AsString=''    )
    Then ErMessage := ErMessage+' "Место рождения сотрудника (район/город-примечание)" ';
  end;

  if  ( cdsOKPersonal_new.FieldByName('cod_str_live').AsString='')
  then begin
    ErMessage := ErMessage+' "Страна проживания" ';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOKPersonal_new.FieldByName('cod_str_live').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна проживания '+cdsOKPersonal_new.FieldByName('cod_str_live').AsString+' нет в справочнике" ';
    end;
  end;

  if (cdsOKPersonal_new.FieldByName('cod_str_live').AsString='860')
  then begin
    if ( cdsOKPersonal_new.FieldByName('cod_obl_live').AsString='')
    Then ErMessage := ErMessage+' "Место проживания сотрудника (область)" ';
    If ( cdsOKPersonal_new.FieldByName('cod_distr_live').AsString=''    )
    Then ErMessage := ErMessage+' "Место проживания сотрудника (район/город)" ';
  end else begin
    if ( cdsOKPersonal_new.FieldByName('cod_obl_live_prim').AsString='')
    Then ErMessage := ErMessage+' "Место проживания сотрудника (область-примечание)" ';
    If ( cdsOKPersonal_new.FieldByName('cod_distr_live_prim').AsString=''    )
    Then ErMessage := ErMessage+' "Место проживания сотрудника (район/город-примечание)" ';
  end;

  If ( cdsOKPERSONAL_NEW.FieldByName('Education_Title_CODE').AsString='')
  Then ErMessage := ErMessage+' "Образование сотрудника" ';

  If ( cdsOKPERSONAL_NEW.FieldByName('tabno').AsString='')
  Then ErMessage := ErMessage+' "Табельный номер" ';

  if (cdsOKPersonal_new.FieldByName('passport_type_code').AsString = '1')
  then begin
      if length(cdsOKPERSONAL_NEW.FieldByName('pass_seriya').AsString)<>2
      then begin
        ErMessage := ErMessage+'Серия документа (Паспорта) должна быть 2 символа, а не '+IntToStr(length( cdsOKPERSONAL_NEW.FieldByName('pass_seriya').AsString )) ;
      end;

      if length(cdsOKPERSONAL_NEW.FieldByName('pass_num').AsString)<>7
      then begin
        ErMessage := ErMessage+'Номер документа (Паспорта) должен быть 7 цифр, а не '+IntToStr(length( cdsOKPERSONAL_NEW.FieldByName('pass_num').AsString )) ;
      end;
  end;

    sql_ := 'select count(id) from ok_personal '+
      ' where branch=:p_1'+
        ' and tabno=:p_2';

    try
      z:=getSQLresultPAR(sql_,branch,cdsOKPERSONAL_new.FieldByName('tabno').AsString);
      if (z<>0)
      then begin
        ErMessage := ErMessage+'Табельный номер '+cdsOKPERSONAL_new.FieldByName('tabno').AsString+' уже используется!'+#13+
          ' Измените табельный номер и сохраните данные.';
      end;
    except
//      showmessage(sql_);
//      exit;
    end;


    ///////

    if cdsOKPERSONAL_new.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1';
      try
        z:=getSQLresultPAR(sql_,cdsOKPERSONAL_new.FieldByName('nps_id').AsString);
        if (z<>0)
        then begin
          ErMessage := ErMessage+'Пенсионный ИН '+cdsOKPERSONAL_new.FieldByName('nps_id').AsString+
            ' уже используется!'+#13+' Измените Пенсионный ИН и сохраните данные.';
        end;
      except
        showmessage(sql_);
        exit;
      end;


      z := length(cdsOKPERSONAL_new.FieldByName('nps_id').AsString);
      if (z<>14) and (z<>0)
      then begin
        ErMessage := ErMessage+'поле Пенсионный ИН должно содержать 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL_new.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
      end;
    end;



  if ErMessage <> '' then
  begin
    ErMessage:= '(3983)Пожалуйста, Укажите данные сотрудника:'+ ErMessage;
    ShowMessage(ErMessage);
////
    if HeadBranch_=HeadBranch_
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');
      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');

      try
        System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok.txt');
        System.Rewrite(text_f);

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok.txt"');
        raise;
      end;

      try
        WinExec('notepad C:\NCI Bank\OK\Temp\err_ok.txt', SW_MAXIMIZE);
      except
        showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok.txt"');
      end;
    end;
////
    exit;
  end;

  try

    If cdsOKPERSONAL_NEW.FieldByName('PERSONAL_CODE').IsNull
    Then   execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;','PERSONAL_CODE','0')
    Else   execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PERSONAL_CODE', cdsOKPERSONAL_NEW.FieldByName('PERSONAL_CODE').AsString );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','BRANCH',branch);

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','FAMILY',             cdsOKPERSONAL_NEW.FieldByName('FAMILY').AsString             );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','FIRST_NAME',         cdsOKPERSONAL_NEW.FieldByName('FIRST_NAME').AsString         );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PATRONYMIC',         cdsOKPERSONAL_NEW.FieldByName('PATRONYMIC').AsString         );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','GENDER_CODE',        cdsOKPERSONAL_NEW.FieldByName('GENDER_CODE').AsString        );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','BIRTHDAY',           cdsOKPERSONAL_NEW.FieldByName('BIRTHDAY').AsString           );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','NATIONALITY_CODE',   cdsOKPERSONAL_NEW.FieldByName('NATIONALITY_CODE').AsString   );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','FAMILY_STATUS_CODE', cdsOKPERSONAL_NEW.FieldByName('FAMILY_STATUS_CODE').AsString );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','REG_TYPE_CODE',      cdsOKPERSONAL_NEW.FieldByName('REG_TYPE_CODE').AsString      );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESS',       cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESS').AsString       );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESS_REGION_ID',       cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESS_REGION_ID').AsString       );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESS_DISTR',       cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESS_DISTR').AsString       );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESSFACT',   cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESSFACT').AsString   );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESSFACT_REGION_ID',   cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString   );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','HOME_ADDRESSFACT_DISTR',   cdsOKPERSONAL_NEW.FieldByName('HOME_ADDRESSFACT_DISTR').AsString   );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','REGPLACE_CODE',   cdsOKPERSONAL_NEW.FieldByName('REGPLACE_CODE').AsString   );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASS_SERIYA',        cdsOKPERSONAL_NEW.FieldByName('PASS_SERIYA').AsString        );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASS_NUM',           cdsOKPERSONAL_NEW.FieldByName('PASS_NUM').AsString           );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASS_DATE',          cdsOKPERSONAL_NEW.FieldByName('PASS_DATE').AsString          );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASS_REG',           cdsOKPERSONAL_NEW.FieldByName('PASS_REG').AsString           );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','RECORD_BOOK_NUMBER', cdsOKPERSONAL_NEW.FieldByName('RECORD_BOOK_NUMBER').AsString );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','RECORD_BOOK_SERIES', cdsOKPERSONAL_NEW.FieldByName('RECORD_BOOK_SERIES').AsString );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','TELEFON',            cdsOKPERSONAL_NEW.FieldByName('TELEFON').AsString            );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','STATUS_CODE',        cdsOKPERSONAL_NEW.FieldByName('STATUS_CODE').AsString        );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','TABNO',            cdsOKPERSONAL_NEW.FieldByName('TABNO').AsString            );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','EDUCATION_TITLE_CODE',            cdsOKPERSONAL_NEW.FieldByName('EDUCATION_TITLE_CODE').AsString            );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','NPS_ID',            cdsOKPERSONAL_NEW.FieldByName('NPS_ID').AsString            );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','BIRTHPLACE',     cdsOKPERSONAL_NEW.FieldByName('birthplace').AsString            );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','REGION_ID',      cdsOKPERSONAL_NEW.FieldByName('REGION_ID').AsString          );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','DISTR',          cdsOKPERSONAL_NEW.FieldByName('DISTR').AsString              );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','EMP_CODE',UserId);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','NN',            cdsOKPERSONAL_NEW.FieldByName('NN').AsString            );
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','OK_INN',            cdsOKPERSONAL_NEW.FieldByName('INN').AsString            );

    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_STR_BIRTH',cdsOKPERSONAL_NEW.FieldByName('COD_STR_BIRTH').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_OBL_PRIM',cdsOKPERSONAL_NEW.FieldByName('COD_OBL_PRIM').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_PLACE_BIRTH_PRIM',cdsOKPERSONAL_NEW.FieldByName('COD_PLACE_BIRTH_PRIM').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASS_DATE_END',cdsOKPERSONAL_NEW.FieldByName('PASS_DATE_END').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_STR_LIVE',cdsOKPERSONAL_NEW.FieldByName('COD_STR_LIVE').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_OBL_LIVE',cdsOKPERSONAL_NEW.FieldByName('COD_OBL_LIVE').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_OBL_LIVE_PRIM',cdsOKPERSONAL_NEW.FieldByName('COD_OBL_LIVE_PRIM').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_DISTR_LIVE',cdsOKPERSONAL_NEW.FieldByName('COD_DISTR_LIVE').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_DISTR_LIVE_PRIM',cdsOKPERSONAL_NEW.FieldByName('COD_DISTR_LIVE_PRIM').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_DISTR_UVD',cdsOKPERSONAL_NEW.FieldByName('cod_distr_uvd').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','COD_DISTR_PRIM',cdsOKPERSONAL_NEW.FieldByName('cod_distr_prim').AsString);
    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PASSPORT_TYPE_CODE',            cdsOKPERSONAL_NEW.FieldByName('PASSPORT_TYPE_CODE').AsString            );


    execSQL('begin OK_SERVICE.NEW_COLLEAGUE; end;');
    v := GetSqlResultPAR('select Param.GetParam(:p_1) from dual','ID');
    id_ := v;

    ExecSQL('COMMIT');
    cdsOKPERSONAL_NEW.cancel;

//    showmessage('id_='+intTostr(id_) );
    cdsOKPersonal.BeforePost := nil;
    cdsOKPersonal.DisableControls;

//showmessage('cdsOKPersonal '  +SQL_OKPersonal + w);
    cdsOKPersonal.Close;
    with cdsOKPersonal.params
    do begin
          clear;
          CreateParam(ftString,'P_BRANCH' ,ptInput);
          ParamByName('P_BRANCH').Value := curBranch;

          CreateParam(ftInteger,'P_ID' ,ptInput);
          ParamByName('P_ID').Value := id_;
    end;
    LoadData(cdsOKPersonal,  SQL_OKPersonal + ' where p.branch=:P_BRANCH and id=:P_ID');
    cdsOKPersonal.Close;

    loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
    addLookUpField_OkPersonal;


    cdsOKPersonal.Open;
    cdsOKPersonal.EnableControls;

    cdsOKPersonal.BeforePost := cdsOK_BeforePost;

    bbGOTO_IIASClick(nil);
  except
    on E: Exception do
      Begin
        ExecSQL('ROLLBACK');
        If Pos(ERROR_NO, E.Message) <> 0 Then
          Begin
            erMessage := Copy(E.Message, Pos(ERROR_NO, E.Message) + Length(ERROR_NO), Length(E.Message));
            erMessage := Copy(erMessage, 1, Pos(#10, erMessage) - 1);
            E.Message := StringReplace(E.Message, #13, '', [rfReplaceAll]);
            E.Message := StringReplace(E.Message, #10, #13#10, [rfReplaceAll]);
            ShowErrorBox(erMessage,E.Message,Self.Caption);
          End
          Else ShowMessage(E.Message);
        exit;
      End;
  end;

  actNew.Checked     := False ;
  actTable.Checked   := True;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked   := False;

  actUndoChanges.Enabled := False;
  actNew.Enabled     := True;
  actTable.Enabled   := True;
  actForm.Enabled    := True;
  actRef.Enabled     := True;
  actDetails.Enabled := True;
  actReAccept.Enabled   := True;
  actFilter.Enabled  := True;

end;

procedure TBOKForm.cdsOKPersonal_NEWAfterOpen(DataSet: TDataSet);
begin

  cdsOKPersonal_NEW.FieldByName('birthday').EditMask  := '!09/09/0099;1;_';
  cdsOKPersonal_NEW.FieldByName('pass_date').EditMask := '!09/09/0099;1;_';
  cdsOKPersonal_NEW.FieldByName('pass_date_end').EditMask := '!09/09/0099;1;_';
  cdsOKPersonal_NEW.FieldByName('REG_DATE_END').EditMask := '!09/09/0099;1;_';
  cdsOKPersonal_NEW.FieldByName('srok_date').EditMask := '!09/09/0099;1;_';

end;

procedure TBOKForm.actUndoChangesExecute(Sender: TObject);
begin
//showmessage(LastPanel);
  if LastPanel = 'OpenPanel' then
  begin
    If not cdsOKPersonal_NEW.IsEmpty Then cdsOKPERsonal_NEW.Cancel;
    if bosslevel<>'0' then actNew.Enabled         := True ;
    actTable.Enabled   := True;
    actForm.Enabled    := True;
    actRef.Enabled     := True;
    actDetails.Enabled := True;
    actReAccept.Enabled   := True;
    actFilter.Enabled  := True;
    actUndoChanges.Checked := True;
    TBTable.Click;
    actUndoChanges.Checked := False;
    actUndoChanges.Enabled := False;
    actiias.enabled := true;
  end;

  if LastPanel = 'FormPanel' then
  begin
    cdsOKPERsonal.Cancel;
  end;

  if LastPanel = 'DetailsPanel' then
  begin
    ActDetailUndoExecute(nil);
  end;

end;

procedure TBOKForm.actRefExecute(Sender: TObject);
var D: tdata;
 sql_ : string;
begin

  LastPanel := 'RefPanel';
  pcmainok.ActivePage := RefPanel_;

  actCopyPers.Checked     := False ;
  actRef2.Checked     := False ;
  actRef.Checked    := True ;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;

  actNew.Checked     := False;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  actiias.Checked := false;

  if bosslevel<>'0' then actNew.Enabled         := True ;
  actUndoChanges.Enabled := False;

  OptionsPanel.Visible := False;

// штатное расписание
//*    if bosslevel='0'
//*    then begin
//*      if not cdsSSOKPost_SET.Active
//*      then begin
//*        cdsSSOKPost_SET.Close;
//*        with cdsSSOKPost_SET.Params
//*        do begin
//*            clear;
//*            CreateParam(ftString,'p_1' ,ptInput);
//*            ParamByName('p_1').Value := 'A';
//*        end;
//*        sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 ';
//*        LoadData(cdsSSOKPost_SET, sql_);
//*      end;
//*    end else begin
      if not cdsSSOKPost_SET.Active
      then begin
        cdsSSOKPost_SET.Close;

        with cdsSSOKPost_SET.Params
        do begin
            clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(5201)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
            end else begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and d.level_department_code in(:p_2,:p_3) ';
            end;
        LoadData(cdsSSOKPost_SET, sql_);
      end;
//*    end;

  if not cdsOKStat.Active then
  Begin
    cdsOKStat.DisableControls;
  //  cdsOKStatSalary.DisableControls;

      cdsOKStat.close;
      with cdsOKStat.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
    LoadData(cdsOKStat,       SQL_OKStat+' where branch=:p_1');
    cdsOKStat.Filtered:=false;
    cdsOKStat.Filter := 'department_code=0';
    cdsOKStat.Filtered:=true;

    cdsOKStat.Close;

    if not cdsSSOKDepartment_RO.Active then loadData(cdsSSokDepartment_RO, SQL_ssokDepartment_set);
    if not cdsSSOKSpecial_RO.Active then loadData(cdsSSokSpecial_RO, SQL_ssokSpecial_set);
      if (headbranch_='09006')
      then begin
          mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
          ' where branch=:p_1',branch);
          if varisnull(mfo_category_type_code_VAR)
          then begin
            mfo_category_type_code :='0';
            showmessage('(5259)Укажите категорию филиала '+branch+' в халк банке.(заполните Справочник Категорий Филиалов)');
          end else begin
            mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
          end;
          sql_ :='select sop.post_code, to_char(soc.salary) salary, soc.category_name '+
                 ' from ss_ok_post_category sop, ss_ok_category soc '+
                 ' where sop.category_code=soc.category_code'+
                 ' and sop.mfo_category_type_code=:p_1';
          cdsSSOKPostCategory.close;
          with cdsSSOKPostCategory.Params
          do begin
              clear;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := mfo_category_type_code;
          end;
          loadData(cdsSSOKPostCategory, SQL_);
      end else begin
          cdsSSOKPostCategory.close;
          with cdsSSOKPostCategory.Params
          do begin
              clear;
          end;
          loadData(cdsSSOKPostCategory, SQL_cdsSSOKPostCategory);
      end;

    addLookUpField(cdsOKStat, cdsSSokPost_Set, 'post_code_show', 'post_code', 'post_code', 'post_name', True);
    addLookUpField(cdsOKStat, cdsSSOKDepartment_RO, 'department_code_show', 'department_code', 'department_code', 'department_name', False);
    addLookUpField(cdsOKStat, cdsSSOKSpecial_RO, 'special_show', 'special_code', 'special_code', 'special_name', False);
    addLookUpField(cdsOKStat, cdsSSOKPostCategory, 'salary_show', 'post_code', 'post_code', 'salary', False);
    addLookUpField(cdsOKStat, cdsSSOKPostCategory, 'razrad_show', 'post_code', 'post_code', 'category_name', False);

    cdsOKStat.Open;

  //  cdsOKStatSalary.MasterSource    := dsOKStat;
  //  cdsOKStatSalary.IndexFieldNames := 'STAT_CODE';   // поле в детейл таблице =
  //  cdsOKStatSalary.MasterFields    := 'STAT_CODE';    // поле в мастер таблице

    cdsOKStat.EnableControls;
  //  cdsOKStatSalary.EnableControls;


  End;

  PC.ActivePage := TabOKStat;
//*  if bosslevel='0'
//*  then begin
//*    sql_ :=    'select a.department_code id, a.department_code||'') ''||a.department_name name '+
//*      ' from ss_ok_department a where'+
//*      ' a.state_notes=:p_1'+
//*      ' order by a.department_code';
//*      BOKForm.Source.close;
//*      with BOKForm.Source.Params
//*      do begin
//*          clear;
//*          CreateParam(ftString,'p_1' ,ptInput);
//*          ParamByName('p_1').Value := 'A';
//*      end;
//*    LoadData(BOKForm.Source, sql_ ,True);
//*  end else begin
    sql_ :=    'select a.department_code id, a.department_code||'') ''||a.department_name name '+
      ' from ss_ok_department a where'+
      ' a.state_notes=:p_1 and level_department_code in(:p_2)'+
      ' order by a.department_code';
      BOKForm.Source.close;
      with BOKForm.Source.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := 'A';
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := strtoint(BossLevel);
      end;
    LoadData(BOKForm.Source, sql_ ,True);
//*  end;

  CBDep.Clear;
//showmessage('BossLevel '+BossLevel);
  while not BOKForm.Source.Eof do
  begin
      D := TData.Create;
      with D do
      begin
        Id := BOKForm.Source.FieldByName('id').AsString;
        Name := BOKForm.Source.FieldByName('name').AsString;
      end;
      CBDep.Items.AddObject(BOKForm.Source.FieldByName('name').AsString, D);
//showmessage(BOKForm.Source.FieldByName('name').AsString);
      BOKForm.Source.Next;
  end;

////////////
      BOKForm.Source.close;
      with BOKForm.Source.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := 'A';
      end;

  LoadData(BOKForm.Source,'SELECT special_code id,'+
                     ' special_code||'') ''||special_name name'+
                     ' FROM ss_ok_special'+
                     ' WHERE state_notes=:p_1'+
                     ' order by special_code',True);
  cbspecial.Clear;

  while not BOKForm.Source.Eof do
  begin
      D := TData.Create;
      with D do
      begin
        Id := BOKForm.Source.FieldByName('id').AsString;
        Name := BOKForm.Source.FieldByName('name').AsString;
      end;
      cbspecial.Items.AddObject(BOKForm.Source.FieldByName('name').AsString, D);
      BOKForm.Source.Next;
  end;

/////////////////

    if bosslevel='0'
    then begin
        BOKForm.Source.Close;
        with BOKForm.Source.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := 'A';
        end;
//  sql_:='SELECT post_code id,'+
//                     ' post_code||'') ''||post_name name'+
//                     ' FROM ss_ok_post'+
//                     ' WHERE state_notes = ''A'''+
//                     ' order by post_code'
        sql_ := 'SELECT post_code id, post_code||'') ''||post_name name'+
          ' FROM ss_ok_post d where d.state_notes like :p_1 order by post_code';
        LoadData(BOKForm.Source,sql_,True);
    end else begin
        BOKForm.Source.Close;

        with BOKForm.Source.Params
        do begin
            clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(5409)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
              sql_ := 'SELECT post_code id, post_code||'') ''||post_name name FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
            end else begin
              sql_ := 'SELECT post_code id, post_code||'') ''||post_name name FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and d.level_department_code in(:p_2,:p_3) ';
            end;
        LoadData(BOKForm.Source,sql_,True);
    end;



  DBLCBpost.Clear;

  while not BOKForm.Source.Eof do
  begin
      D := TData.Create;
      with D do
      begin
        Id := BOKForm.Source.FieldByName('id').AsString;
        Name := BOKForm.Source.FieldByName('name').AsString;
      end;
      DBLCBpost.Items.AddObject(BOKForm.Source.FieldByName('name').AsString, D);
      BOKForm.Source.Next;
  end;

///////////////////

  ActDetailUndoExecute(nil);

  // если  халк не давать редактировать штатное
  if (HeadBranch_ ='09006') //or (HeadBranch_ ='09004')  // 14.12.2012 теперь штатное через едб в агро и халке
  then begin
//    actStatNew.enabled:=false;
//    actStatSave.enabled:=false;
//    actStatDelete.enabled:=false;
  end;

end;

procedure TBOKForm.actDetailsExecute(Sender: TObject);
begin
  LastPanel := 'DetailsPanel';
  pcmainok.ActivePage := DetailsPanel_;

  actDetails.Checked := True ;

  actCopyPers.Checked     := False ;
  actNew.Checked     := False;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actReAccept.Checked   := False;

    if bosslevel<>'0' then actNew.Enabled         := True ;
  actUndoChanges.Enabled := False;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;

  if not(cds_yesno.Active)
  then begin
    loaddata(cds_yesno,SQL_yesno);
  end;

end;

procedure TBOKForm.actOrderExecute(Sender: TObject);
begin
{
  If fmSaveOKOrder = nil Then fmSaveOKOrder := TfmOKOrder.Create(Self);

  With fmSaveOKOrder do
  Begin
      If ShowModal = mrOk Then
      Begin
        showmessage('OK');
      End;
  End;

  fmSaveOKOrder.Close;
  fmSaveOKOrder := nil;
}
end;

procedure TBOKForm.dbeOK_HOME_ADDRESSFACTChange(Sender: TObject);
begin


  if (BOKForm.cdsOKPersonal_NEW.State in [dsEdit, dsInsert])
  and (chbGluk.checked)
  then begin
     cdsOKPersonal_NEW.FieldByName('home_address').AsString := dbedHOME_ADDRESSFACT_.Text ;
     cdsOKPersonal_NEW.FieldByName('HOME_ADDRESS_REGION_ID').AsString :=
       cdsOKPersonal_NEW.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString ;
     cdsOKPersonal_NEW.FieldByName('HOME_ADDRESS_DISTR').AsString :=
       cdsOKPersonal_NEW.FieldByName('HOME_ADDRESSFACT_DISTR').AsString ;
  end;

end;

procedure TBOKForm.actFilterExecute(Sender: TObject);
var w,ErMessage:  String;
    i,pk: integer;

begin

    cdsOKPersonal.Close;
    cdsOKPersonal.params.clear;
    pk:=1;

  ActDetailUndoExecute(nil);

  erMessage := '';
  // загрузка справочников
  if not cdsSRegion.Active then LoadData(cdsSRegion, SQL_SRegion);
  if not cdsSDistr_RO.Active then LoadData(cdsSDistr_RO, SQL_SDistr);
  if not cdsSDistrRO2.Active then LoadData(cdsSDistrRO2, SQL_SDistr);
  if not cdsSregionRO2.Active then LoadData(cdsSregionRO2, SQL_Sregion);

  if not cdsSSokStatus_SET.Active then LoadData(cdsSSokStatus_SET,     SQL_ssokStatus_SET);
  if not cdsSSokgender_SET.Active then LoadData(cdsSSokgender_SET,     SQL_ssokgender_SET);
  if not cdsSSokNATIONALITY_SET.Active then   LoadData(cdsSSOKNATIONALITY_SET,     SQL_SSOKNATIONALITY_SET);
  if not cdsSSokFAMILYSTATUS_SET.Active then  LoadData(cdsSSOKFAMILYSTATUS_SET,    SQL_SSOKFAMILYSTATUS_SET);
  if not cdsSSokREGTYPE_SET.Active then   LoadData(cdsSSOKREGTYPE_SET,     SQL_SSOKREGTYPE_SET);

  try
  if not cdsSSOKProfmember_SET.Active then LoadData(cdsSSOKProfmember_SET, SQL_SSOKProfmember_SET);
  except on e:exception
    do begin
      showmessage(e.message+#13+SQL_SSOKProfmember_SET);
    end;
  end;
//  if not cdsSSOKLeave_SET.Active then LoadData(cdsSSOKLeave_SET, SQL_SSOKLeave_SET);

  If fmOKFilter = nil Then fmOKFilter := TfmFilterPersonal.Create(Self);
  With fmOkFilter do
    Begin
      Caption := actFilter.Caption;
      edBranchFilter.text:=branch;
//showmessage('>'+edBranchFilter.text+'<');
      If ShowModal = mrOk Then
      Begin
          curBranch:=edBranchFilter.text;
          erMessage := '';
//          w := ' where p.branch like '+''''+edBranchFilter.text+'''';
          w := ' where p.branch like :p_'+inttostr(pk);
          cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edBranchFilter.text;
          inc(pk);

          if (cdsOKPersonal_new.State in [dsEdit, dsInsert])
          then begin
            if not chbFamilyStatus.Checked then cdsOKPersonal_NEW.FieldByName('family_status_code').AsString := '';
            if not chbNationality.Checked  then cdsOKPersonal_NEW.FieldByName('nationality_code').AsString   := '';
            if not chbRegType.Checked      then cdsOKPersonal_NEW.FieldByName('reg_type_code').AsString      := '';
            if not chbGender.Checked       then cdsOKPersonal_NEW.FieldByName('gender_code').AsString        := '';
            if not chbStatus.Checked       then cdsOKPersonal_NEW.FieldByName('status_code').AsString        := '';
            if not chbPriznak.Checked      then cdsOKPersonal_NEW.FieldByName('gosubmit_code').AsString        := '';
          end;

          if not chbProfmember.Checked   then cdsOKPersonal_NEW.FieldByName('profmember').AsString        := '';
//          if not chbLeave.Checked        then cdsOKPersonal_NEW.FieldByName('leave_code').AsString        := '';

          for i := 0 to cdbgOKPersonal_NEW.Columns.Count-1 do
          begin
            if not cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).IsNull then
            begin

                If pos('%', cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString ) > 0
                Then begin
//                  w := w + ' and upper(p.'+cdbgOKPersonal_NEW.Columns.Items[i].FieldName+') like upper('''+  cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString +''')'
                  w := w + ' and upper(p.'+cdbgOKPersonal_NEW.Columns.Items[i].FieldName+') like upper(:p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString;
                  inc(pk);
                end Else begin
//                  w := w + ' and upper(p.'+cdbgOKPersonal_NEW.Columns.Items[i].FieldName+')=upper('''+  cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString+''')';
                  w := w + ' and upper(p.'+cdbgOKPersonal_NEW.Columns.Items[i].FieldName+')=upper(:p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=cdsOKPersonal_NEW.FieldByName(cdbgOKPersonal_NEW.Columns.Items[i].FieldName).AsString;
                  inc(pk);
                end;
            end;
          end;

          if medOK_Birthday.EditText<>'__.__.____'
          then begin
//            w := w + ' AND to_char(p.birthday,''dd.mm.yyyy'') LIKE '''+medOK_Birthday.EditText+'''';
            w := w + ' AND to_char(p.birthday,''dd.mm.yyyy'') LIKE :p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=medOK_Birthday.EditText;
                  inc(pk);
          end;

          if medOK_pass_date.EditText<>'__.__.____'
          then begin
//            w := w + ' AND to_char(p.pass_date,''dd.mm.yyyy'') LIKE '''+medOK_pass_date.EditText+'''';
            w := w + ' AND to_char(p.pass_date,''dd.mm.yyyy'') LIKE :p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=medOK_pass_date.EditText;
                  inc(pk);
          end;

          if medOKDateBegin.EditText<>'__.__.____'
          then begin
//            w := w + ' AND p.personal_code in (select a.personal_code from ok_period a where'+
//                                                 ' to_char(a.in_office_date,''dd.mm.yyyy'') LIKE '''+medOKDateBegin.EditText+''')';
            w := w + ' AND p.personal_code in (select a.personal_code from ok_period a where'+
                                                 ' to_char(a.in_office_date,''dd.mm.yyyy'') LIKE :p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=medOKDateBegin.EditText;
                  inc(pk);
          end;

          if medOKDateEnd.EditText<>'__.__.____'
          then begin
//            w := w + ' AND p.personal_code in (select b.personal_code from ok_period b where'+
//                                                 ' to_char(b.out_office_date,''dd.mm.yyyy'') LIKE '''+medOKdateEnd.EditText+''')';
            w := w + ' AND p.personal_code in (select b.personal_code from ok_period b where'+
                                                 ' to_char(b.out_office_date,''dd.mm.yyyy'') LIKE :p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=medOKdateEnd.EditText;
                  inc(pk);
          end;

          if   (edDepartment.Text<>'')
          then begin
            try
              StrToInt(edDepartment.Text);

              if chbHighDepCode.Checked
              then begin
{                w := w+ ' AND (p.department_code='+edDepartment.Text;
                w := w+ ' OR p.department_code in '+
                  '(select d.department_code from ss_ok_department d'+
                  ' connect by d.high_dep_code = prior d.department_code'+
                  ' start with d.high_dep_code='+ edDepartment.Text+') )';
}                w := w+ ' AND (p.department_code=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edDepartment.Text;
                  inc(pk);

                 w := w+ ' OR p.department_code in '+
                  '(select d.department_code from ss_ok_department d'+
                  ' connect by d.high_dep_code = prior d.department_code'+
                  ' start with d.high_dep_code=:p_'+inttostr(pk)+') )';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edDepartment.Text;
                  inc(pk);
              end else begin
//                w := w+ ' AND p.department_code='+edDepartment.Text;
                w := w+ ' AND p.department_code=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edDepartment.Text;
                  inc(pk);
              end;

            except
              edDepartment.Text := '';
              ErMessage:= 'При поиске по подразделению пожалуйста используйте клавишу [F9], либо подставьте код по памяти.'
            end;
          end;

          if   (edPost.Text<>'')
          then begin
            try
              StrToInt(edPost.Text);
//              w := w+ ' AND p.post_code='+edPost.Text;
              w := w+ ' AND p.post_code=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edPost.Text;
                  inc(pk);

            except
              edpost.Text := '';
              ErMessage:= 'При поиске по должности пожалуйста используйте клавишу [F9], либо подставьте код по памяти.'
            end;
          end;
///////////////////////////////////
          if   (edtabno.Text<>'')
          then begin
            try
//              w := w+ ' AND p.tabno='''+ edtabno.Text+'''';
              w := w+ ' AND p.tabno=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edtabno.Text;
                  inc(pk);

            except
              ErMessage:= 'табельный номер - ошибка.'
            end;
          end;

          if   (ednps_id.Text<>'')
          then begin
            try
//              w := w+ ' AND p.nps_id='''+ ednps_id.Text+'''';
              w := w+ ' AND p.nps_id=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=ednps_id.Text;
                  inc(pk);

            except
              ErMessage:= 'Пенсионный - ошибка.'
            end;
          end;

///////////////////////////////////
          if   (edSpecial.Text<>'')
          then begin
            try
              StrToInt(edSpecial.Text);
//              w := w+ ' AND p.special_code='+edSpecial.Text;
              w := w+ ' AND p.special_code=:p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edSpecial.Text;
                  inc(pk);

            except
              edpost.Text := '';
              ErMessage:= 'При поиске по специализации пожалуйста используйте клавишу [F9], либо подставьте код по памяти.'
            end;
          end;

          if  (edBasis.Text<>'')
          then begin
            try
              StrToInt(edBasis.Text);
{              w := w+ ' AND p.personal_code in (select e.personal_code from ok_education e'+
                                             ' where e.branch like '+''''+curBranch+''''+
                                             ' and e.basis_code='+edBasis.Text+')';
}              w := w+ ' AND p.personal_code in (select e.personal_code from ok_education e'+
                                             ' where e.branch like :p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=curBranch;
                  inc(pk);

               w := w+                       ' and e.basis_code=:p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edBasis.Text;
                  inc(pk);

            except
              edBasis.Text := '';
              ErMessage:= 'При поиске по признаку образования пожалуйста используйте клавишу [F9], либо подставьте код по памяти.'
            end;
          end;

          if   (edEducation.Text<>'')
          then begin
            try
              StrToInt(edEducation.Text);
{              w := w+ ' AND p.personal_code in (select f.personal_code from ok_education f'+
                                             ' where f.branch like '+''''+curBranch+''''+
                                             ' and f.education_code='+edEducation.Text+')';
}              w := w+ ' AND p.personal_code in (select f.personal_code from ok_education f'+
                                             ' where f.branch like :p_'+inttostr(pk);
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=curBranch;
                  inc(pk);

               w := w+                       ' and f.education_code=:p_'+inttostr(pk)+')';
                  cdsOKPersonal.params.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  cdsOKPersonal.params.ParamByName('p_'+inttostr(pk)).Value:=edEducation.Text;
               //*   inc(pk);

            except
              edEducation.Text := '';
              ErMessage:= 'При поиске по образованию пожалуйста используйте клавишу [F9], либо подставьте код по памяти.'
            end;
          end;

        if erMessage = ''
        then begin
          cdsOKPersonal.BeforePost := nil;
          cdsOKPersonal.DisableControls;
//showmessage(SQL_OKPersonal+w);
          LoadData(cdsOKPersonal,  SQL_OKPersonal+w); // фильтр-готово
          cdsOKPersonal.Close;

  loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
  addLookUpField_OkPersonal;
// END добавление смотрящих-выше-полей

          cdsOKPersonal.Open;
          cdsOKPersonal.EnableControls;

          cdsOKPersonal.BeforePost := cdsOK_BeforePost;
        end else begin
          showmessage(ErMessage);
        end;
      End;
    End;


  if ErMessage = ''
  then begin
    fmOKFilter.Close;
    fmOKFilter := nil;
//    fmOKFilter.Destroy;
  end;

  if BOKForm.cdsOKPersonal_NEW.State in [dsEdit, dsInsert] then BOKForm.cdsOKPersonal_NEW.Cancel;
  ActTable.Execute;
//  ActDetailUndoExecute(nil);

end;

procedure TBOKForm.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
   j, count_days ,number_day_:integer;
   sql_, s_:string;
//   d: tdata;
   day_date_ : tdatetime;
begin
//        showmessage(inttostr(key));

  Case Key of
    VK_F8:
      begin
        if (Sender.ClassType =TEdit) then
        begin
          tedit(sender).text:='';
        end;
        if (Sender.ClassType =TDBEdit) then
        begin
          if (not(tdbedit(sender).DataSource.DataSet.State in [dsEdit, dsInsert]))
          then tdbedit(sender).DataSource.DataSet.Edit;
          tdbedit(sender).DataSource.DataSet.FieldByName(tdbedit(sender).datafield).asstring:='';
          SelectNext(ActiveControl, True, True);
//          if tdbedit(sender).name = 'dbed_PASS_DATE_END'
//          then begin
//            cdsOKPersonal.FieldByName('pass_date_end').asstring := '';
//          end;
        end;
      end;
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
        if (Sender.ClassType =TDBEdit) then
        begin
          if tdbedit(sender).name = 'dbed_date_recall_end'
          then begin
            if  (dbed_date_recall_end.text='  .  .    ') or
            (dbed_date_recall_end.text='')
            then begin
              showmessage('Введите "Дату завершения отзыва"');
              dbed_date_recall_end.setfocus;
              exit;
            end;
            if  (dbed_date_recall_begin.text='  .  .    ') or
            (dbed_date_recall_begin.text='')
            then begin
              showmessage('Введите "Дату начала отзыва"');
              dbed_date_recall_begin.SetFocus;
              exit;
            end;

            if not (cdsOKLeave.State in [dsEdit, dsInsert])
            then begin
              cdsOKLeave.edit;
            end;

            if (cdsOKLeave.FieldByName('date_recall_end').asString<>'')
            and     (cdsOKLeave.FieldByName('date_recall_begin').asString<>'')
            then begin
             cdsOKLeave.FieldByName('period_leave_recall').asInteger:=
//               1 + getsqlresult('select to_date('''+cdsOKLeave.FieldByName('date_recall_end').asString+''',''dd.mm.yyyy'')-'+
//               'to_date('''+cdsOKLeave.FieldByName('date_recall_begin').asString+''',''dd.mm.yyyy'')'+
//               ' from dual');
               1 + getsqlresultPAR('select to_date(:p_1,''dd.mm.yyyy'')-to_date(:p_2,''dd.mm.yyyy'') from dual',
                 cdsOKLeave.FieldByName('date_recall_end').asString,
                 cdsOKLeave.FieldByName('date_recall_begin').asString
               );
             end;

             edDay.text := s_ ;



          end else
          if tdbedit(sender).name = 'DBEDdate_in_leave'
          then begin
            if  (DBEDdate_in_leave.text='  .  .    ') or
            (DBEDdate_in_leave.text='')
            then begin
              showmessage('Введите "Дату выхода в отпуск"');
              DBEDdate_in_leave.setfocus;
              exit;
            end;
            if  (cdsOKLeave.FieldByName('period_leave').asString='')
            then begin
              showmessage('Введите "Кол-во дней отпуска"');
              DBEdit63.SetFocus;
              exit;
            end;

            if not (cdsOKLeave.State in [dsEdit, dsInsert])
            then begin
              cdsOKLeave.edit;
            end;

            if cdsOKLeave.FieldByName('leave_CODE').asString='1'
            then begin
/////////////////////
              day_date_ := strtodate (DBEDdate_in_leave.text);
              s_:='';
              count_days:=0;
              while (cdsOKLeave.FieldByName('period_leave').asinteger<>
                 count_days)
              do begin
//                memo4.lines.add( datetostr(day_date_) +')'+inttostr(dayofweek(day_date_)) );
                if (dayofweek(day_date_) <> 1) // dayofweek(day_date_) <> 7) and суббота входит в количество
                then begin
                  number_day_:=0;
                  try
                    sql_:='select count(*) from Z_DN where pr=0 '+
                      ' and dn= to_date('''+datetostr(day_date_) +''',''dd.mm.yyyy'')';
//                      ' and to_char(dn,''D'') not in (7,1)';
                    number_day_:=(getsqlresult( sql_ ));
//                    memo4.lines.add(inttostr(number_day_));
                  except on e:exception
                    do begin
                      showmessage(e.Message+#13+sql_);
                    end
                  end;

                  if  number_day_=0
                  then begin
                     count_days:=count_days+1;
                     s_:=s_+'   '+ copy( datetostr(day_date_) ,1,2);
                  end else begin
                     s_:=s_+'   **' ;
                  end;

                end else begin
                     s_:=s_+'   **' ;
                end;
                day_date_:=day_date_+1;
              end;

              edDay.text:=s_;
              cdsOKLeave.FieldByName('date_out_leave').asDateTime:=
                day_date_-1;
/////////////////////
           end else begin
              s_:='календарные дни';
              count_days:=0;
              day_date_ := strtodate (DBEDdate_in_leave.text);
              while (cdsOKLeave.FieldByName('period_leave').asinteger<>
                 count_days)
              do begin
                     count_days:=count_days+1;
                     s_:=s_+'   '+ copy( datetostr(day_date_) ,1,2);
                     day_date_:=day_date_+1;
              end;
             // все остальные отпуска календарные дни
             cdsOKLeave.FieldByName('date_out_leave').asDateTime:=
               cdsOKLeave.FieldByName('date_in_leave').asDateTime+
               cdsOKLeave.FieldByName('period_leave').asInteger-1;
             edDay.text := s_ ;

           end;
          end;
        end else begin
//          SelectNext(ActiveControl, True, True);
        end;
      end;
    VK_F1:
      begin
          If (Sender.ClassType = TCombobox) then
          begin
            if (TCombobox(Sender).Tag <> 0) and (TCombobox(Sender).Tag <> 21)
            then bOKform.ViewRef( TCombobox(Sender).Tag );
            if (TCombobox(Sender).Tag = 21)
            then bOKform.ViewRef( 0 );
          end;

          If (Sender.ClassType = TDBCombobox) Then
          begin
            if (TDBCombobox(Sender).Tag <> 0) and (TDBCombobox(Sender).Tag <> 21)
            then bOKform.ViewRef( TDBCombobox(Sender).Tag );
            if (TDBCombobox(Sender).Tag = 21)
            then bOKform.ViewRef( 0 );
          end;

          If (Sender.ClassType = TDBLookUpCombobox) Then
          begin
            if (TDBLookUpCombobox(Sender).Tag <> 0) and (TDBLookUpCombobox(Sender).Tag <> 21)
            then bOKform.ViewRef( TDBLookUpCombobox(Sender).Tag );
            if (TDBLookUpCombobox(Sender).Tag = 21)
            then bOKform.ViewRef( 0 );
          end;
       end;
    VK_F9:
      begin
///////////
      if (bokmain.BossLevel='0')
      and (sender<>cbdep)
      then begin
        showmessage('Нельзя изменить: Данные доступны Только для чтения!!!');
        exit;
      end;
///////////
        if   (Sender = DBLCBinstitution)
        then begin
          lbInstitution.click;
          exit;
        end;

        if   (Sender = dblcbOKFamilyStatus) or (Sender = dblcbOKGender)
          or (Sender = DBLookupComboBox24) or (Sender = dblcbOKRegType)
          or (Sender = dblcbOKEducationTitle ) or (Sender = DBLookupComboBox19 )
          or (Sender = DBLookupComboBox18 ) or (Sender = DBLookupComboBox23 )
          or (Sender = DBLookupComboBox12 ) or (Sender = DBLookupComboBox21 )
          or (Sender = dblcbSSOKEducation) or (Sender = dblcbSSOKBasis)
          or (Sender = DBLookupComboBox6 ) or (Sender = DBLookupComboBox7 )
          or (Sender = DBLookupComboBox13 )
        then begin
          TDBLookUpCombobox(Sender).dropdown;
          exit;
        end;

//////////
///// загрузка списка в датасет source ///////
//////////

        if (Sender = dblcbS_STR)
          or (Sender = ed_iias_str) or (Sender = DBLCB_iias_str)
          or (Sender = ed_iias_live_str) or (Sender = DBLCB_iias_live_str)
        then
          LoadData(Source, SQL_S_STR_source ,True)
        else
        if (Sender = dblcbStaff)
        then
          LoadData(Source, SQL_SSOKstaff_source ,True)
        else
        if (Sender = dblcbTypeForce)
        then
          LoadData(Source, SQL_SSOKtypeForce_source ,True)
        else
        if (Sender = dblcbArmyGroup)
        then
          LoadData(Source, SQL_SSOKArmyGroup_source ,True)
        else
        if (Sender = dblcbCategoryArmy)
        then
          LoadData(Source, SQL_SSOKCategoryArmy_source ,True)
        else
        if (Sender = dblcbMilitaryrank)
        then
          LoadData(Source, SQL_SSOKMilitaryrank_source ,True)
        else
        if (Sender = dblcbelection)
        then
          LoadData(Source, SQL_SSOKelection_source ,True)
        else
        if (Sender = dblcbParty)
        then
          LoadData(Source, SQL_SSOKparty_source ,True)
        else
        if (Sender = dblcbYouth)
        then
          LoadData(Source, SQL_SSOKyouth_source ,True)
        else
        if (Sender = dblcbPenalty)
        then
          LoadData(Source, SQL_SSOKpenalty_source ,True)
        else
        if (Sender = dblcbBaseMove)
        then
          LoadData(Source, SQL_SSOKbasemove_source ,True)
        else
        if (Sender = dblcbTypeperiod)
        then
          LoadData(Source, SQL_SSOKtypeperiod_source ,True)
        else
        if (Sender = dblcbArticle)
        then
          LoadData(Source, SQL_SSOKarticle_source ,True)
        else
        if (Sender = DBLCBrelation)
        then
          LoadData(Source, SQL_SSOKrelation_source ,True)
        else
        if (Sender =  DBLCBlangLevel)
        then
          LoadData(Source, SQL_SSOKlevellanguage_source ,True)
        else
        if (Sender = DBLCBlang)
        then
          LoadData(Source, SQL_SSOKlanguage_source ,True)
        else
        if (Sender = dblcbSSOKdegree)
        then
          LoadData(Source, SQL_SSOKdegree_source ,True)
        else
        if (Sender = dblcbSSOKAcademic)
        then
          LoadData(Source, SQL_SSOKAcademic_source ,True)
        else
        if (Sender = dblcbSSOKQualification)
        then
          LoadData(Source, SQL_SSOKQualification_source ,True)
        else
//        if   (Sender = DBEd_Distr) or (Sender = DBLCBdistr)
//          or (Sender = dbeOKdistr) or (Sender = DBLCBokdistr)
          if (Sender= ed_iias_birth_distr) or (Sender= dblcb_iias_birth_distr)
          or (sender= ed_iias_live_distr)  or (sender= dblcb_iias_live_distr)
          or (sender= ed_iias_live_distr)  or (sender= dblcb_iias_live_distr)
          or (sender= ed_iias_uvd_distr)  or (sender= dblcb_iias_uvd_distr)
        then
                   BOKForm.LoadData(Source,SQL_Sdistr_source,True)
        else
                 if (Sender = DBEDnationality) or (Sender = DBLCBnationality)
                 or (Sender = dbeOKNationality) or (Sender =  dblcbOKNationality)
                 then
                   BOKForm.LoadData(Source,SQL_SSOKNationality_source,True)
                 else
               //  if (Sender = DBEd_Region) or (Sender = DBLCB_SRegion)
               //  or (Sender = dbeokRegion) or (Sender = DBLCBokregion)
                 if (Sender = ed_iias_birth_region) or (Sender = dblcb_iias_birth_region)
                 or (sender=ed_iias_live_region) or (sender=dblcb_iias_live_region)
                 then
                   BOKForm.LoadData(Source,SQL_SRegion_source,True)
                 else
                 If (Sender = CBDep) or (Sender = edDep)
                 or (Sender = DBEd_depstring)
                 or (Sender = DBEd_depstring2)
                 or (Sender = DBlcb_depstring3)
                 Then
                   if bosslevel='0'
                   then begin
                      Source.close;
                      with Source.Params
                      do begin
                          clear;
                          CreateParam(ftString,'p_1' ,ptInput);
                          ParamByName('p_1').Value := 'A';
                      end;

                     BOKForm.LoadData(Source,'SELECT to_char(department_code) id, department_name name'+
                     ' FROM ss_ok_department'+
                     ' WHERE state_notes=:p_1'+ // ''A'''+
                     ' order by department_code',True)
                   end else begin
                      Source.close;
                      with Source.Params
                      do begin
                          clear;
                          CreateParam(ftString,'p_1' ,ptInput);
                          ParamByName('p_1').Value := 'A';
                          CreateParam(ftInteger,'p_2' ,ptInput);
                          ParamByName('p_2').Value := strtoint(BossLevel);
                      end;
//                     ' WHERE level_department_code in('+BossLevel+')'+
//                     ' AND state_notes = ''A'''+
                     BOKForm.LoadData(Source,'SELECT to_char(department_code) id, department_name name'+
                     ' FROM ss_ok_department'+
                     ' WHERE state_notes=:p_1 and level_department_code in(:p_2)'+
                     ' order by department_code',True)
                   end
                 else
                 If (Sender = CBSpecial) or (Sender = edSpecial)
                 Then begin
                      Source.close;
                      with Source.Params
                      do begin
                          clear;
                          CreateParam(ftString,'p_1' ,ptInput);
                          ParamByName('p_1').Value := 'A';
                      end;
                   BOKForm.LoadData(Source,'SELECT to_char(special_code) id, special_name name'+
                     ' FROM ss_ok_special'+
                     ' WHERE state_notes=:p_1'+
                     ' order by special_code',True);
                 end else
        If (Sender = DBLCBpost) or (Sender = DBEdPost)
        or (Sender = DBEd_poststring) or (Sender = DBEd_poststring2)
        or (sender=DBlcb_poststring3)
        Then begin
                      BOKForm.Source.close;


                      with BOKForm.Source.Params
                      do begin
                          clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(6227)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
//              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
  //              ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
                BOKForm.LoadData(BOKForm.Source,'SELECT to_char(post_code) id,'+
                           ' post_name name'+
                           ' FROM ss_ok_post'+
                           ' WHERE state_notes=:p_1'+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)'+
                           ' order by post_code',True);
            end else begin
//              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
  //              ' and d.level_department_code in(:p_2,:p_3) ';
                BOKForm.LoadData(BOKForm.Source,'SELECT to_char(post_code) id,'+
                           ' post_name name'+
                           ' FROM ss_ok_post'+
                           ' WHERE state_notes=:p_1'+
                           ' and level_department_code in(:p_2,:p_3)'+
                           ' order by post_code',True);
            end;
        end;
//// чтобы на любом поле не срабатывал F9 с предидущим загруженным Source /////
/////////
        IF (sender = dblcbS_STR)
          or (Sender = ed_iias_str) or (Sender = DBLCB_iias_str)
          or (Sender = ed_iias_live_str) or (Sender = DBLCB_iias_live_str)
        or (Sender = CBDep) OR (Sender = edDep)
                OR (Sender = cbSpecial) OR (Sender = edSpecial)
        or (Sender = dblcbStaff)
        or (Sender = dblcbTypeForce)
        or (Sender = dblcbArmyGroup)
        or (Sender = dblcbCategoryArmy)
        or (Sender = dblcbMilitaryrank)
                OR (Sender = DBLCBpost) OR (Sender = DBEdPost)
//                 or (Sender = DBEd_Distr) or (Sender = DBLCBdistr)
                 or (Sender = DBEDnationality) or (Sender = DBLCBnationality)
                 or (Sender = dbeOKNationality) or (Sender =  dblcbOKNationality)
                 or (Sender = dbeokRegion) or (Sender = DBLCBokregion)
//        or (Sender = DBEd_Region) or (Sender = DBLCB_SRegion)
        or (sender=ed_iias_live_region)  or (sender=dblcb_iias_live_region)
        or (sender=ed_iias_birth_region) or (sender=dblcb_iias_birth_region)
                 or (Sender = dbeOKdistr) or (Sender = DBLCBokdistr)
        or (Sender=ed_iias_birth_distr) or (Sender = dblcb_iias_birth_distr)
        or (Sender=ed_iias_live_distr) or (Sender = dblcb_iias_live_distr)
        or (Sender=ed_iias_uvd_distr) or (Sender = dblcb_iias_uvd_distr)
                 or (Sender = dblcbSSOKQualification)
                 or (Sender = dblcbSSOKAcademic)
                 or (Sender = dblcbSSOKdegree)
          or (Sender = DBLCBlang)  or (Sender =  DBLCBlangLevel)
          or (Sender = DBLCBrelation)
          or (Sender = dblcbBaseMove)  or (Sender = dblcbTypeperiod )
          or (Sender = dblcbArticle)
          or (Sender = dblcbelection)
          or (Sender = dblcbParty)
          or (Sender = dblcbYouth)
          or (Sender = dblcbPenalty)
                 or (Sender = DBEd_poststring)
                 or (Sender = DBEd_depstring)
                 or (Sender = DBEd_poststring2)
                 or (Sender = DBEd_depstring2)
                 or (Sender = DBlcb_poststring3)
                 or (Sender = DBlcb_depstring3)
        THEN BEGIN
          Source.Edit;
          With TSelectDialog.CreateEx(Self, Source, Source, Source.FindField('id').Index) do
          Try
            If ShowModal = mrOk
            Then begin
//                      TEdit(Sender).Text := Source.FieldByName('ID').AsString;
//////////// \\\\\\\\\\\\\
              if (sender=ed_iias_live_region) or (sender=dblcb_iias_live_region)
              then begin
                if not (cdsOKpersonal.State in [dsEdit, dsInsert])
                then cdsOKpersonal.Edit;
                cdsOKpersonal.FieldByName('cod_obl_live').AsString :=
                  Source.FieldByName('id').AsString;
                cdsOKpersonal.FieldByName('cod_obl_live_prim').AsString :=
                  Source.FieldByName('name').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = ed_iias_live_str) or (Sender = DBLCB_iias_live_str)
              then begin
                if not (cdsOKpersonal.State in [dsEdit, dsInsert])
                then cdsOKpersonal.Edit;
                cdsOKpersonal.FieldByName('COD_STR_LIVE').AsString :=
                  Source.FieldByName('id').AsString;
//                cdsOKpersonal.FieldByName('voyage_land').AsString :=
//                  Source.FieldByName('name').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = ed_iias_str) or (Sender = DBLCB_iias_str)
              then begin
                if not (cdsOKpersonal.State in [dsEdit, dsInsert])
                then cdsOKpersonal.Edit;
                cdsOKpersonal.FieldByName('COD_STR_BIRTH').AsString :=
                  Source.FieldByName('id').AsString;
//                cdsOKpersonal.FieldByName('voyage_land').AsString :=
//                  Source.FieldByName('name').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbS_Str)
              then begin
                if not (cdsOKvoyage.State in [dsEdit, dsInsert])
                then cdsOKvoyage.Edit;
                cdsOKvoyage.FieldByName('voyage_str').AsString :=
                  Source.FieldByName('id').AsString;
                cdsOKvoyage.FieldByName('voyage_land').AsString :=
                  Source.FieldByName('name').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbStaff)
              then begin
                if not (cdsOKarmy.State in [dsEdit, dsInsert])
                then cdsOKarmy.Edit;
                cdsOKarmy.FieldByName('staff_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbTypeForce)
              then begin
                if not (cdsOKarmy.State in [dsEdit, dsInsert])
                then cdsOKarmy.Edit;
                cdsOKarmy.FieldByName('type_force_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbArmyGroup)
              then begin
                if not (cdsOKarmy.State in [dsEdit, dsInsert])
                then cdsOKarmy.Edit;
                cdsOKarmy.FieldByName('army_group_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbCategoryArmy)
              then begin
                if not (cdsOKarmy.State in [dsEdit, dsInsert])
                then cdsOKarmy.Edit;
                cdsOKarmy.FieldByName('category_army_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbMilitaryrank)
              then begin
                if not (cdsOKarmy.State in [dsEdit, dsInsert])
                then cdsOKarmy.Edit;
                cdsOKarmy.FieldByName('military_rank_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
//////////// \\\\\\\\\\\\\
//////////// \\\\\\\\\\\\\
//////////// \\\\\\\\\\\\\
              if (Sender = dblcbelection)
              then begin
                if not (cdsOKelection.State in [dsEdit, dsInsert])
                then cdsOKelection.Edit;
                cdsOKelection.FieldByName('election_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbParty)
              then begin
                if not (cdsOKparty.State in [dsEdit, dsInsert])
                then cdsOKparty.Edit;
                cdsOKparty.FieldByName('party_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbYouth)
              then begin
                if not (cdsOKyouth.State in [dsEdit, dsInsert])
                then cdsOKyouth.Edit;
                cdsOKyouth.FieldByName('youth_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbPenalty)
              then begin
                if not (cdsOKpenalty.State in [dsEdit, dsInsert])
                then cdsOKpenalty.Edit;
                cdsOKpenalty.FieldByName('penalty_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbBaseMove)
              then begin
                if not (cdsOKPeriod.State in [dsEdit, dsInsert])
                then cdsOKPeriod.Edit;
                cdsOKPeriod.FieldByName('base_move_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbTypeperiod )
              then begin
                if not (cdsOKPeriod.State in [dsEdit, dsInsert])
                then cdsOKPeriod.Edit;
                cdsOKPeriod.FieldByName('type_period_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbArticle)
              then begin
                if not (cdsOKPeriod.State in [dsEdit, dsInsert])
                then cdsOKPeriod.Edit;
                cdsOKPeriod.FieldByName('article_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = DBLCBrelation)
              then begin
                if not (cdsOKrelation.State in [dsEdit, dsInsert])
                then cdsOKrelation.Edit;
                cdsOKrelation.FieldByName('relation_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = DBLCBlang)
              then begin
                if not (cdsOKlanguage.State in [dsEdit, dsInsert])
                then cdsOKlanguage.Edit;
                cdsOKlanguage.FieldByName('language_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender =  DBLCBlangLevel)
              then begin
                if not (cdsOKlanguage.State in [dsEdit, dsInsert])
                then cdsOKlanguage.Edit;
                cdsOKlanguage.FieldByName('level_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbSSOKQualification)
              then begin
                if not (cdsOKEducation.State in [dsEdit, dsInsert])
                then cdsOKEducation.Edit;
                cdsOKEducation.FieldByName('qualification_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbSSOKAcademic)
              then begin
                if not (cdsOKacademic.State in [dsEdit, dsInsert])
                then cdsOKacademic.Edit;
                cdsOKacademic.FieldByName('academic_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;

              if (Sender = dblcbSSOKdegree)
              then begin
                if not (cdsOKdegree.State in [dsEdit, dsInsert])
                then cdsOKdegree.Edit;
                cdsOKdegree.FieldByName('degree_code').AsString :=
                  Source.FieldByName('id').AsString;
              end;
/////////// \\\\\\\\\\\

                 If (Sender = CBDep) or (Sender = edDep)
              Then begin
                        edDep.text:= Source.FieldByName('id').AsString;
                        edDepChange(Sender);
              end;

//////////// \\\\\\\\\\\\\
                If (Sender = DBEd_depstring)
                 or (Sender = DBEd_depstring2)
                 or (Sender = DBlcb_depstring3)
              Then begin
                if not (cdsOKperiod.State in dsEditModes)
                then cdsOKperiod.edit;

                cdsOKperiod.FieldByName('established_department').AsString :=
                  Source.FieldByName('name').AsString;
//                        DBEd_depstring2.text:= Source.FieldByName('id').AsString;
                        cdsOKperiod.FieldByName('department_code').AsString:=Source.FieldByName('id').AsString;;

              end;
///////////
              If (Sender = edSpecial) or (Sender = cbSpecial)
              Then begin
                if not (cdsOKStat.State in dsEditModes)
                then begin
                  showmessage('Не указан отдел'+#13+' или'+#13+'вы не включили кнопку "Новый"!');
                            edSpecial.OnChange := nil;
                            edSpecial.text :='';
                            edSpecial.OnChange := edSpecialChange;
                            exit;
                end;
                        edSpecial.text:= Source.FieldByName('id').AsString;
                        edSpecialChange(Sender);
              End;
///////////
              If (Sender = DBLCBpost) or (Sender = DBEdPost)
              Then begin
                if not (cdsOKStat.State in dsEditModes)
                then begin
                            showmessage('Не указан отдел'+#13+' или'+#13+'вы не включили кнопку "Новый"!');
                            DBEdPost.OnChange := nil;
                            DBEdPost.text :='';
                            DBEdPost.OnChange := DBEdPostChange;
                            exit;
                end;
                        DBEdPost.text:= Source.FieldByName('id').AsString;
                        DBEdPostChange(Sender);
              End;


              If (Sender = DBEd_poststring) or (Sender = DBEd_poststring2)
              or (sender=DBlcb_poststring3)
              Then begin
                if not (cdsOKperiod.State in dsEditModes)
                then cdsOKperiod.edit;

                cdsOKperiod.FieldByName('established_post').AsString :=
                  Source.FieldByName('name').AsString;
//                        DBEd_poststring2.text:= Source.FieldByName('id').AsString;
                        cdsOKperiod.FieldByName('post_code').AsString:=Source.FieldByName('id').AsString;;
              End;
///////////
              if (sender=ed_iias_uvd_distr) or (sender=dblcb_iias_uvd_distr)
              Then begin
                if not (cdsOKPersonal.State in [dsEdit, dsInsert])
                then cdsOKPersonal.Edit;
                cdsOKPersonal.fieldbyname('cod_distr_uvd').asstring := Source.FieldByName('id').AsString;
              end;
///////////
              if (sender=ed_iias_live_distr) or (sender=dblcb_iias_live_distr)
              Then begin
                if not (cdsOKPersonal.State in [dsEdit, dsInsert])
                then cdsOKPersonal.Edit;
                cdsOKPersonal.fieldbyname('cod_distr_live').asstring := Source.FieldByName('id').AsString;
                cdsOKPersonal.fieldbyname('cod_distr_live_prim').asstring := Source.FieldByName('name').AsString;
              end;
///////////
//              if (Sender = DBEd_Distr) or (Sender = DBLCBdistr)
              if    (sender=ed_iias_birth_distr) or (sender=dblcb_iias_birth_distr)
              Then begin
                if not (cdsOKPersonal.State in [dsEdit, dsInsert])
                then cdsOKPersonal.Edit;
                cdsOKPersonal.fieldbyname('distr').asstring := Source.FieldByName('id').AsString;
                cdsOKPersonal.fieldbyname('cod_place_birth_prim').asstring := Source.FieldByName('name').AsString;
              end;

              if (Sender = dbeOKdistr) or (Sender = DBLCBokdistr)
              Then begin
                cdsOKPersonal_New.fieldbyname('distr').asstring := Source.FieldByName('id').AsString;
              end;

              if (Sender = DBEDnationality) or (Sender = DBLCBnationality)
              Then begin
                if not (cdsOKPersonal.State in [dsEdit, dsInsert])
                then cdsOKPersonal.Edit;
                cdsOKPersonal.fieldbyname('nationality_code').asstring := Source.FieldByName('id').AsString;
              end;

              if (Sender = dbeOKNationality) or (Sender =  dblcbOKNationality)
              Then begin
                cdsOKPersonal_New.fieldbyname('nationality_code').asstring := Source.FieldByName('id').AsString;
              end;

//              if (Sender = DBEd_Region) or (Sender = DBLCB_SRegion)
              if (Sender = ed_iias_birth_region) or (Sender = dblcb_iias_birth_region)
              Then begin
                if not (cdsOKPersonal.State in [dsEdit, dsInsert])
                then cdsOKPersonal.Edit;
                        cdsOKPersonal.fieldbyname('region_id').asstring := Source.FieldByName('id').AsString;
                  cdsOKPersonal.fieldbyname('cod_obl_prim').asstring := Source.FieldByName('name').AsString;
              end;

              if (Sender = dbeokRegion) or (Sender = DBLCBokregion)
              Then begin
                cdsOKPersonal_New.fieldbyname('region_id').asstring := Source.FieldByName('id').AsString;
              end;

///////////

            End;
          Finally
            Destination.Filtered:=false;
            Free;
          End;

        END;
//
      end;
  End;


end;

procedure TBOKForm.dbeDetailsPCodeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var code_ : string; // w,
//    v:       Variant;
begin
  Case Key of
    VK_RETURN:
      begin
        code_ := dbeDetailsPCode.Text;

        cdsOKPersonal.Cancel;
        try
          StrToInt(code_);
        except
          ShowMessage('Сотрудник с табельным номером ''' + code_ + ''' по отделению '''+Branch+'''  не может быть найден!');
          exit;
        end;

        if not cdsSSokStatus_SET.Active then LoadData(cdsSSokStatus_SET,     SQL_ssokStatus_SET);
        if not cdsSSokgender_SET.Active then LoadData(cdsSSokgender_SET,     SQL_ssokgender_SET);
        if not cdsSSokNATIONALITY_SET.Active then   LoadData(cdsSSOKNATIONALITY_SET,     SQL_SSOKNATIONALITY_SET);
        if not cdsSSokFAMILYSTATUS_SET.Active then  LoadData(cdsSSOKFAMILYSTATUS_SET,    SQL_SSOKFAMILYSTATUS_SET);
        if not cdsSSokREGTYPE_SET.Active then   LoadData(cdsSSOKREGTYPE_SET,     SQL_SSOKREGTYPE_SET);

        cdsOKPersonal.DisableControls;
        cdsOKPersonal.close;
        with cdsOKPersonal.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftInteger,'p_2' ,ptInput);
            ParamByName('p_2').Value := strtoint(code_);
        end;

//        w := ' where p.branch='+''''+curBranch+''' and tabno=' + code_;
        LoadData(cdsOKPersonal,      SQL_OKPersonal + ' where p.branch=:p_1 and tabno=:p_2' );
        cdsOKPersonal.Close;

  loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
  addLookUpField_OkPersonal;
// END добавление смотрящих-выше-полей

        cdsOKPersonal.Open;
        cdsOKPersonal.EnableControls;
        If cdsOKPersonal.IsEmpty Then
        Begin
//          v := GetSqlResult('SELECT OK_SERVICE.FIND('''+Branch+''','''+code_+''') FROM dual');
//          If VarToStr(v) <> '' Then ShowMessage('Сотрудник с кодом ' + code_ + ' по отделению '''+Branch+''' находится в состоянии '+v);
//          Else
          ShowMessage('Сотрудник с табельным номером ' + code_ + ' по отделению '''+Branch+'''  не найден!');
        End;

      end;

  End;
end;

procedure TBOKForm.dbeDetailsPCodeExit(Sender: TObject);
begin
  cdsOKPersonal.Cancel;
end;

procedure TBOKForm.cdsOK_BeforePost(DataSet: TDataSet);
begin


// предупреждение: ИСПОЛЬЗУЕТСЯ ДЛЯ МНОГИХ ДАТАСЕТОВ справочников!!!
//  DataSet.Fields.FieldByName('personal_code').AsInteger := cdsOKPersonal.Fields.FieldByName('personal_code').AsInteger;
  if bosslevel='0'
  then begin
    ShowMessage('Ошибка.'+#13+'В единой базе данные только для чтения!');
    abort;
  end;

  if DataSet.Fields.FieldByName('personal_code').IsNull
  then begin
    ShowMessage('Ошибка.'+#13+'Не выбран сотрудник!');
    abort;
  end;

   DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
   DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
   DataSet.Fields.FieldByName('branch').AsString := Branch;

  if (DataSet=cdsOKPhotoBMP) or (DataSet=cdsOKPhoto)
  then DataSet.Fields.FieldByName('priznak').AsString := '1';

end;

procedure TBOKForm.cdsOK_AfterPost(DataSet: TDataSet);
//var ErMessage : string;
begin
// предупреждение: ИСПОЛЬЗУЕТСЯ ДЛЯ МНОГИХ ДАТАСЕТОВ !!!

      Try
        SaveData(DataSet);
        ExecSQL('COMMIT');
        DataSet.Refresh;
      Except
        on E: Exception do
          Begin
            ExecSQL('ROLLBACK');
            TCLientDataSet(DataSet).UndoLastChange(True);
            ShowMessage('Ошибка при сохранении.'+#13+E.Message);
            Abort;
          End;
      End;

end;

procedure TBOKForm.TabOKEducation_0Show(Sender: TObject);
begin

  if cdsOKEducation.Active then
  Begin
//    ShowMessage('1:'+IntToStr(cdsOKEducation.RecordCount));
    Exit;
  End;

        cdsOKEducation.close;
        with cdsOKEducation.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKEducation, SQL_OKEducation+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKEducation, SQL_OKEducation+' where branch=:p_1');

  cdsOKEducation.Close;
  cdsOKEducation.DisableControls;
  if not cdsSSOKEducation_Set.Active then LoadData(cdsSSOKEducation_Set, SQL_SSOKEducation_Set);
  if not cdsSSOKInstitution_Set.Active then LoadData(cdsSSOKInstitution_Set, SQL_SSOKInstitution_Set);
  if not cdsSSOKBasis_Set.Active then LoadData(cdsSSOKBasis_Set, SQL_SSOKBasis_Set);
  if not cdsSSOKQualification_Set.Active then LoadData(cdsSSOKQualification_Set, SQL_SSOKQualification_Set);

  addLookUpField(cdsOKEducation, cdsSSokEducation_Set, 'education_code_show', 'education_code', 'education_code', 'education_name', True);
  addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
  addLookUpField(cdsOKEducation, cdsSSOkBasis_Set, 'basis_code_show', 'basis_code', 'basis_code', 'basis_name', False);
  addLookUpField(cdsOKEducation, cdsSSOkQualification_Set, 'qualification_code_show', 'qualification_code', 'qualification_code', 'qualification_name', False);
  addLookUpField(cdsOKeducation, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);
  addLookUpField(cdsOKeducation, cdsSS_OK_vid_education, 'vid_education_code_show', 'vid_education_code', 'vid_education_code', 'vid_education_NAME', False);

  cdsOKEducation.Open;
  cdsOKEducation.EnableControls;
//  ShowMessage('2:'+IntToStr(cdsOKEducation.RecordCount));
end;

procedure TBOKForm.ActDetailNewExecute(Sender: TObject);
begin

 IF (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006') or (HeadBranch_='09004') or (HeadBranch_='09049')) //  подтв. в ГО
  then begin
//если халк то


   If (cdsOKEducation.State in dsEditModes) and (cdbgOKEducation.CanFocus)
     Then begin
// образование
//
         cdsOKEducation.Cancel;

     End;
   If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
     Then begin
// ученые звания
//

       cdsOKacademic.Cancel;


     End;
   If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
     Then begin
// ученые степени
//

       cdsOKDegree.Cancel;

     End;
   If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
     Then begin
// награды
//
         cdsOKaward.Cancel;

     End;

   If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
     Then begin
// научные работы
//

       cdsOKScientific.Cancel;

     End;
   If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
     Then begin
// зарубежные поездки 09_007
//

       cdsOKVoyage.Cancel;

     End;
   If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
     Then begin
// языки
//
       cdsOKLanguage.Cancel;

     End;
   If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
     Then begin
// родственные отношения 09_002
//
         cdsOKRelation.Cancel;

     End;
   If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
     Then begin
// сведения о работе
//
         cdsOKPeriod.Cancel;

     End;
   If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
     Then begin
// квалификация
//

       cdsOKRise.Cancel;

     End;
  If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
     Then begin
// избрание
//

       cdsOKElection.Cancel;

     End;
  If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
     Then begin
// гос премии
//
       cdsOKPremium.Cancel;

     End;
  If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
     Then begin
// воинская служба
//

       cdsOKArmy.Cancel;

     End;
  If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
     Then begin
// партии
//

       cdsOKParty.Cancel;


     End;
  If (cdsOKYouth.State in dsEditModes) and (cdbgOKYouth.CanFocus)
     Then begin
// молодежные организации
//
       cdsOKYouth.Cancel;
     End;

  If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
     Then begin
// отпуска
//
       cdsOKLeave.Cancel;
     End;
  If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
     Then begin
// судимости
//
       cdsOKConvictions.Cancel;

     end;
  If (cdsOKAddInform.State in dsEditModes) and (cdbgOKAddInform.CanFocus)
     Then begin
// дополнительные сведения
//
       cdsOKAddInform.Cancel;
     end;
  If (cdsOKPenalty.State in dsEditModes) and (cdbgOKPenalty.CanFocus)
     Then begin
// сведения о взыскании
//
//
//
       cdsOKPenalty.Cancel;
     End;
  If (cdsOKChangeFIO.State in dsEditModes) and (cdbgOKChangeFIO.CanFocus)
     Then begin
// сведения об изменении фио
//

       cdsOKChangeFIO.Cancel;
     End;

  If (cdsOKhospital.State in dsEditModes) and (cdbgOKhospital.CanFocus)
     Then begin
//
       cdsOKhospital.Cancel;
     end;
  If (cdsOKprivilege.State in dsEditModes) and (cdbgOKprivilege.CanFocus)
     Then begin
//
//
       cdsOKprivilege.Cancel;
     end;
  If (cdsOKincrease.State in dsEditModes) and (cdbgOKincrease.CanFocus)
     Then begin
       cdsOKincrease.Cancel;
     end;
  If (cdsok_business_voyage.State in dsEditModes) and (cdbgok_business_voyage.CanFocus)
     Then begin
       cdsok_business_voyage.Cancel;
     end;
  If (cdsok_zp_rate.State in dsEditModes) and (cdbgok_zp_rate.CanFocus)
     Then begin
       cdsok_zp_rate.Cancel;
     end;
  If (cdsok_freedays.State in dsEditModes) and (cdbgok_freedays.CanFocus)
     Then begin
       cdsok_freedays.Cancel;
     end;

////////////////////////
    showmessage('(6577)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;

 END ELSE BEGIN
  Case PCDetails.ActivePageIndex of
    0: If cdbgOKEducation.CanFocus Then
         Begin
           cdsOKEducation.cancel;
           cdbgOKEducation.Focused;
           cdsOKEducation.Insert;
         end;
    1: If cdbgOKacademic.CanFocus Then
         Begin
           cdsOKacademic.cancel;
           cdbgOKacademic.Focused;
           cdsOKacademic.Insert;
         end;
    2: If cdbgOKDegree.CanFocus Then
         Begin
           cdsOKDegree.cancel;
           cdbgOKDegree.Focused;
           cdsOKDegree.Insert;
         end;
    3: If cdbgOKaward.CanFocus Then
         Begin
           cdsOKaward.cancel;
           cdbgOKaward.Focused;
           cdsOKaward.Insert;
         end;
    4: If cdbgOKScientific.CanFocus Then
         Begin
           cdsOKScientific.cancel;
           cdbgOKScientific.Focused;
           cdsOKScientific.Insert;
         end;
    5: If cdbgOKVoyage.CanFocus Then
         Begin
           cdsOKVoyage.cancel;
           cdbgOKVoyage.Focused;
           cdsOKVoyage.Insert;
         end;
    6: If cdbgOKLanguage.CanFocus Then
         Begin
           cdsOKLanguage.cancel;
           cdbgOKLanguage.Focused;
           cdsOKLanguage.Insert;
         end;
    7: If cdbgOKRelation.CanFocus Then
         Begin
           cdsOKRelation.cancel;
           cdbgOKRelation.Focused;
           cdsOKRelation.Insert;
         end;
    8: If cdbgOKPeriod.CanFocus
       Then Begin
         cdsOKPeriod.cancel;
         cdbgOKPeriod.Focused;
         cdsOKPeriod.Insert;
       End;
    9: If cdbgOKRise.CanFocus Then
         Begin
           cdsOKRise.cancel;
           cdbgOKRise.Focused;
           cdsOKRise.Insert;
         end;
    10: If cdbgOKElection.CanFocus Then
         Begin
           cdsOKElection.cancel;
           cdbgOKElection.Focused;
           cdsOKElection.Insert;
         end;
    11: If cdbgOKPremium.CanFocus Then
         Begin
           cdsOKPremium.cancel;
           cdbgOKPremium.Focused;
           cdsOKPremium.Insert;
         end;
    12: If cdbgOKArmy.CanFocus Then
         Begin
           cdsOKArmy.cancel;
           cdbgOKArmy.Focused;
           cdsOKArmy.Insert;
         end;
    13: If cdbgOKParty.CanFocus Then
         Begin
           cdsOKParty.cancel;
           cdbgOKParty.Focused;
           cdsOKParty.Insert;
         end;
    14: If cdbgOKYouth.CanFocus Then
         Begin
           cdsOKYouth.cancel;
           cdbgOKYouth.Focused;
           cdsOKYouth.Insert;
         end;
//    15: If cdbgOKPost.CanFocus Then
//         Begin
//           cdbgOKPost.Focused;
//           cdsOKPost.Insert;
//         end;
    15: If cdbgOKLeave.CanFocus Then
         Begin
           cdsOKLeave.cancel;
           cdbgOKLeave.Focused;
           cdsOKLeave.Insert;
         end;
    16: If cdbgOKConvictions.CanFocus Then
         Begin
           cdsOKConvictions.cancel;
           cdbgOKConvictions.Focused;
           cdsOKConvictions.Insert;
         end;
    17: If cdbgOKAddInform.CanFocus Then
         Begin
           cdsOKAddInform.cancel;
           cdbgOKAddInform.Focused;
           cdsOKAddInform.Insert;
         end;
    18: If cdbgOKPenalty.CanFocus Then
         Begin
           cdsOKPenalty.cancel;
           cdbgOKPenalty.Focused;
           cdsOKPenalty.Insert;
         end;
    19: If cdbgOKChangeFIO.CanFocus Then
         Begin
           cdsOKChangeFIO.cancel;
           cdbgOKChangeFIO.Focused;
           cdsOKChangeFIO.Insert;
         end;
    20: begin
    // фото по-другому
        end;
    21: If cdbgOKhospital.CanFocus Then
         Begin
            cdsOKhospital.cancel;
           cdbgOKhospital.Focused;
            cdsOKhospital.Insert;
         end;
    22: If cdbgOKprivilege.CanFocus Then
         Begin
            cdsOKprivilege.cancel;
           cdbgOKprivilege.Focused;
            cdsOKprivilege.Insert;
         end;
    23: If cdbgOKincrease.CanFocus Then
         Begin
            cdsOKincrease.cancel;
           cdbgOKincrease.Focused;
            cdsOKincrease.Insert;
         end;
    24: If cdbgok_business_voyage.CanFocus Then
         Begin
            cdsok_business_voyage.cancel;
           cdbgok_business_voyage.Focused;
            cdsok_business_voyage.Insert;
         end;
    26: If CDBGok_zp_rate.CanFocus Then
         Begin
            cdsok_zp_rate.cancel;
           cdbgok_zp_rate.Focused;
            cdsok_zp_rate.Insert;
         end;
    27: If CDBGok_freedays.CanFocus Then
         Begin
            CDsok_freedays.cancel;
           CDBGok_freedays.Focused;
            CDsok_freedays.Insert;
         end;
  End;
 END;
end;

procedure TBOKForm.ActDetailSaveExecute(Sender: TObject);
var S_ID,sql_,check_date_message_,  er_mes: string; // birthplace_,
 z,raznica:integer;
  v:variant;
begin
  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006') or (HeadBranch_='09004') or (HeadBranch_='09049')) // подтв. в ГО
  then begin
//если халк то
////////////////////////
   If (cdsOKEducation.State in dsEditModes) and (cdbgOKEducation.CanFocus)
     Then begin
// образование
//
         cdsOKEducation.Cancel;

     End;
   If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
     Then begin
// ученые звания
//

       cdsOKacademic.Cancel;


     End;
   If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
     Then begin
// ученые степени
//

       cdsOKDegree.Cancel;

     End;
   If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
     Then begin
// награды
//
         cdsOKaward.Cancel;

     End;

   If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
     Then begin
// научные работы
//

       cdsOKScientific.Cancel;

     End;
   If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
     Then begin
// зарубежные поездки 09_007
//

       cdsOKVoyage.Cancel;

     End;
   If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
     Then begin
// языки
//
       cdsOKLanguage.Cancel;

     End;
   If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
     Then begin
// родственные отношения 09_002
//
         cdsOKRelation.Cancel;

     End;
   If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
     Then begin
// сведения о работе
//
         cdsOKPeriod.Cancel;

     End;
   If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
     Then begin
// квалификация
//

       cdsOKRise.Cancel;

     End;
  If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
     Then begin
// избрание
//

       cdsOKElection.Cancel;

     End;
  If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
     Then begin
// гос премии
//
       cdsOKPremium.Cancel;
       
     End;
  If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
     Then begin
// воинская служба
//

       cdsOKArmy.Cancel;

     End;
  If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
     Then begin
// партии
//

       cdsOKParty.Cancel;


     End;
  If (cdsOKYouth.State in dsEditModes) and (cdbgOKYouth.CanFocus)
     Then begin
// молодежные организации
//
       cdsOKYouth.Cancel;
     End;

  If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
     Then begin
// отпуска
//
       cdsOKLeave.Cancel;
     End;
  If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
     Then begin
// судимости
//
       cdsOKConvictions.Cancel;

     end;
  If (cdsOKAddInform.State in dsEditModes) and (cdbgOKAddInform.CanFocus)
     Then begin
// дополнительные сведения
//
       cdsOKAddInform.Cancel;
     end;
  If (cdsOKPenalty.State in dsEditModes) and (cdbgOKPenalty.CanFocus)
     Then begin
// сведения о взыскании
//
//
//
       cdsOKPenalty.Cancel;
     End;
  If (cdsOKChangeFIO.State in dsEditModes) and (cdbgOKChangeFIO.CanFocus)
     Then begin
// сведения об изменении фио
//

       cdsOKChangeFIO.Cancel;
     End;

  If (cdsOKhospital.State in dsEditModes) and (cdbgOKhospital.CanFocus)
     Then begin
//
       cdsOKhospital.Cancel;
     end;
  If (cdsOKprivilege.State in dsEditModes) and (cdbgOKprivilege.CanFocus)
     Then begin
//
//
       cdsOKprivilege.Cancel;
     end;
  If (cdsOKincrease.State in dsEditModes) and (cdbgOKincrease.CanFocus)
     Then begin
       cdsOKincrease.Cancel;
     end;
  If (cdsok_business_voyage.State in dsEditModes) and (cdbgok_business_voyage.CanFocus)
     Then begin
       cdsok_business_voyage.Cancel;
     end;
  If (cdsok_zp_rate.State in dsEditModes) and (cdbgok_zp_rate.CanFocus)
     Then begin
       cdsok_zp_rate.Cancel;
     end;
  If (cdsok_freedays.State in dsEditModes) and (cdbgok_freedays.CanFocus)
     Then begin
       cdsok_freedays.Cancel;
     end;


////////////////////////
    showmessage('(6941)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin

  Case PCDetails.ActivePageIndex of
  0: If (cdsOKEducation.State in dsEditModes) and (cdbgOKEducation.CanFocus)
     Then begin
// образование
//
StatusBar.Panels[2].Text :='(7033)Образование';

        er_mes:='';
        if not (cdsOKEducation.FieldByName('nostra_date').IsNull)
        then begin
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('nostra_date').AsString,cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
          if (cdsOKEducation.FieldByName('nostra_date').asdatetime < cdsokpersonal.fieldbyname('birthday').asdatetime)
          or (raznica<20)
          then begin
            er_mes:=er_mes+'Разница Даты нострификации '+cdsOKEducation.FieldByName('nostra_date').AsString+
              ' и даты рождения '+cdsOKPersonal.FieldByName('BIRTHDAY').AsString+' сотрудника не должна быть меньше 20  и больше возраста сотрудника'+#13;
          end;

        end;

        if (cdsOKEducation.FieldByName('nostra').AsString='1') // есть
        and ((cdsOKEducation.FieldByName('nostra_number').IsNull) or (cdsOKEducation.FieldByName('nostra_date').IsNull))
        then begin
          er_mes:=er_mes+'Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно'+#13;
//          showmessage('Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно');
        end;

        try
          if not (cdsOKEducation.FieldByName('diplom_date').IsNull)
          then
          if (cdsOKEducation.FieldByName('diplom_date').asdatetime>now)
          or (cdsOKEducation.FieldByName('diplom_date').asdatetime<
            strtodate( cdsOKEducation.FieldByName('end_date_dd').asstring+'.'+cdsOKEducation.FieldByName('end_date_mm').asstring+'.'+
                        cdsOKEducation.FieldByName('end_date').asstring ))
          then begin
            er_mes:=er_mes+'Дата выдачи диплома не должна быть больше текущей даты и меньше даты окончания учебного заведения'+#13;
          end;
        except
            er_mes:=er_mes+'(6455) Проверьте дату окончания учебного заведения'+#13;
        end;

        if (cdsOKEducation.FieldByName('end_date').IsNull)
        and (cdsOKEducation.FieldByName('curs').IsNull)
        then begin
          er_mes:=er_mes+'Если реквизит «Дата окончания учебного заведения» не указан, то обязательно должен быть заполнен реквизит «Курс»'+#13;
        end;

        if (cdsOKEducation.FieldByName('profession_personal').IsNull)
        then begin
          v:=getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','74',cdsokpersonal.fieldbyname('education_title_code').asstring);
          if not varisnull(v)
          then begin
            if ((vartostr(v)='3') or (vartostr(v)='4') or (vartostr(v)='5'))
            and (cdsOKEducation.FieldByName('profession_personal').IsNull)
            then er_mes:=er_mes+'(05962)Если реквизит «Код образования» в требовании 09-001 указан как (3,4,5), то реквизит «Специальность» должен быть указан обязательно'+#13;
          end;
        end;


        if (cdsOKEducation.FieldByName('begin_date').IsNull)
        and ( (not cdsOKEducation.FieldByName('begin_date_mm').IsNull) or (not cdsOKEducation.FieldByName('begin_date_dd').IsNull) )
        then begin
          er_mes:=er_mes+'Если год даты поступления не указан, то число и месяц даты поступления не должны указываться'+#13;
        end;

        if (cdsOKEducation.FieldByName('end_date').IsNull)
        and ( (not cdsOKEducation.FieldByName('end_date_mm').IsNull) or (not cdsOKEducation.FieldByName('end_date_dd').IsNull) )
        then begin
          er_mes:=er_mes+'Если год даты окончания не указан, то число и месяц даты окончания не должны указываться'+#13;
        end;

        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString,
          cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
          if (strtodate(cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString) > now)
          or (raznica < 12)
          then begin
            er_mes:=er_mes+'(6655)Разница даты поступления и даты рождения должна быть больше 12 лет и меньше возраста сотрудника'+#13;
          end;
        except
            er_mes:=er_mes+'Проверьте дату поступления '+cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString+#13;
        end;

        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('end_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('end_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('end_date').AsString,
          cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString,
          '12');
          if (raznica > 20) // or (raznica < 1)
          then begin
            er_mes:=er_mes+'(05960)Разница даты окончания и даты поступления'+
              ' в учебное заведение не должна быть больше 20 лет'+#13; // 10.05.2013 убрал- и меньше 1 года
          end;
        except
            er_mes:=er_mes+'Проверьте дату поступления '+cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString+' и дату окончания '+
          cdsOKEducation.FieldByName('end_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('end_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('end_date').AsString+ ' учебного заведения'+
          #13;
        end;

{
        if
        then begin
          er_mes:=er_mes+''+#13;
        end;
}
        if cdsOKEducation.FieldByName('education_end').AsString='1' // да
        then begin
          if (cdsOKEducation.State in [dsEdit, dsInsert])
          then begin
            cdsOKEducation.FieldByName('curs').AsString:='';
          end;
//
          DBEdit85.Enabled:=false;
          DBEdit74.Enabled:=true;
        end else begin
          DBEdit74.Enabled:=false;
          DBEdit85.Enabled:=true;
        end;

       if cdsOKEducation.FieldByName('EDUCATION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Образование'+#13;
//         showmessage('Не заполнено поле '+'Образование');
//         dblcbSSOKEducation.SetFocus;
//         exit;
       end;
//
       if cdsOKEducation.FieldByName('BASIS_CODE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Признак образования'+#13;
//         showmessage('Не заполнено поле '+'Признак образования');
//         dblcbSSOKBasis.SetFocus;
//         exit;
       end;
//
       if cdsOKEducation.FieldByName('INSTITUTION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Учебное заведение'+#13;
       end;

       if cdsOKEducation.FieldByName('cod_vuz_prim').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Примечание (обязательно должно быть указано Учебное заведение)'+#13;
       end;
// -
//
       if cdsOKEducation.FieldByName('BEGIN_DATE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Поступление (год)'+#13;
//         showmessage('Не заполнено поле '+'Поступление (год)');
//         medOK_beginDAte.SetFocus;
//         exit;
       end;
//
       if not cdsOKEducation.FieldByName('END_DATE').IsNull
       then begin
         if cdsOKEducation.FieldByName('BEGIN_DATE').AsInteger>
            cdsOKEducation.FieldByName('END_DATE').AsInteger
         then begin
           er_mes:=er_mes+'Ошибка: год поступления '+
             cdsOKEducation.FieldByName('BEGIN_DATE').asstring+#13+
             ' не должен быть больше года окончания учебного заведения '+
             cdsOKEducation.FieldByName('END_DATE').asstring+#13;
//           showmessage('Ошибка: год поступления '+
//             cdsOKEducation.FieldByName('BEGIN_DATE').asstring+#13+
//             ' не должен быть больше года окончания учебного заведения '+
//             cdsOKEducation.FieldByName('END_DATE').asstring);

             if (cdsOKEducation.State in [dsEdit, dsInsert])
             then begin
               cdsOKEducation.FieldByName('END_DATE').asstring:='';
               cdsOKEducation.FieldByName('BEGIN_DATE').asstring :='';
             end;
//           exit;
         end;
       end;
//
       if cdsOKEducation.FieldByName('PROFESSION_PERSONAL').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Специальность'+#13;
//         showmessage('Не заполнено поле '+'Специальность');
//         dbedProfession.setFocus;
//         exit;
       end;
//
       if cdsOKEducation.FieldByName('QUALIFICATION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Квалификация'+#13;
//         showmessage('Не заполнено поле '+'Квалификация');
//         dblcbSSOKQualification.SetFocus;
//         exit;
       end;
//
       if (not(cdsOKEducation.FieldByName('Diplom_Date').IsNull)) and (cdsOKEducation.FieldByName('DIPLOM_NUM').IsNull)
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно'+#13;
//         showmessage('Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно');
//         exit;
       end;
{
EDUCATION_CODE
BASIS_CODE
INSTITUTION_CODE
BEGIN_DATE
END_DATE
PROFESSION_PERSONAL
QUALIFICATION_CODE
DIPLOM_NUM
}

       check_date_message_:= check_date_yyyymmdd(cdsOKEducation.FieldByName('BEGIN_DATE').AsString,
         cdsOKEducation.FieldByName('BEGIN_DATE_mm').AsString,
         cdsOKEducation.FieldByName('BEGIN_DATE_dd').AsString,'N','N');


       if check_date_message_<>'1'
       then begin
         er_mes:=er_mes+'(6803)'+'(образование начало)'+check_date_message_+#13;
//         showmessage(check_date_message_);
//         medOK_beginDAte.SetFocus;
//         exit;
       end;

       if not cdsOKEducation.FieldByName('END_DATE').IsNull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKEducation.FieldByName('END_DATE').AsString,
           cdsOKEducation.FieldByName('END_DATE_mm').AsString,
           cdsOKEducation.FieldByName('END_DATE_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
           er_mes:=er_mes+'(6817)'+'(образование завершение)'+check_date_message_+#13;
//           showmessage(check_date_message_);
//           medOK_endDAte.SetFocus;
//           exit;
         end;
       end;

       if er_mes=''
       then begin
         cdsOKEducation.Post;
       end else begin
         showmessage(er_mes);
         exit;
       end;

     End;
  1: If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
     Then begin
// ученые звания
//
StatusBar.Panels[2].Text :='(7295)ученые звания';

       if (cdsOKacademic.FieldByName('ACADEMIC_CODE').AsString='')
       then begin
         showmessage('Не заполнено поле '+'Ученое звание');
         dblcbSSOKAcademic.SetFocus;
         exit;
       end else begin
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '76',cdsOKacademic.FieldByName('ACADEMIC_CODE').AsString
          );
         if z=0
         then begin
           showmessage('Реквизит Ученое звание должен соответствовать справочнику соответствия.');
            dblcbSSOKAcademic.SetFocus;
            exit;
         end;
       end;

//
       if cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата присвоения (ученого звания)');
         dbedAcademicDate.SetFocus;
         exit;
       end;

       try
         if (cdsOKacademic.FieldByName('ACADEMIC_DATE').AsInteger<1917)
         then begin
           showmessage('Не заполнено поле '+'Дата присвоения (ученого звания)='+
             cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString);
           dbedAcademicDate.SetFocus;
           exit;
         end;
       except on e:exception
         do begin
           showmessage('Не заполнено поле '+'Дата присвоения (ученого звания)'+
             cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString);
           dbedAcademicDate.SetFocus;
           exit;
         end;
       end;

//
       cdsOKacademic.Post;

       if (cdsOKpersonal.FieldByName('is_ACADEMIC').AsString<>'1')
       and (cdsOKacademic.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Ученого звания Нет"');
//         exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_ACADEMIC').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
  2: If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
     Then begin
// ученые степени
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKDegree.FieldByName('DEGREE_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Ученая степень');
         dblcbSSOKdegree.SetFocus;
         exit;
       end else begin
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '75',cdsOKDegree.FieldByName('DEGREE_CODE').AsString
          );
         if z=0
         then begin
           showmessage('Реквизит Ученая степень должен соответствовать справочнику соответствия.');
            dblcbSSOKdegree.SetFocus;
            exit;
         end;
       end;
//
       if (cdsOKDegree.FieldByName('DEGREE_DATE').AsString='')
       then begin
         showmessage('Не заполнено поле '+'Дата присвоения (ученой степени)');
         dbedDegreeDate.SetFocus;
         exit;
       end;

       try
         if (cdsOKDegree.FieldByName('DEGREE_DATE').AsInteger<1917)
         then begin
           showmessage('Не заполнено поле '+'Дата присвоения (ученой степени)='+cdsOKDegree.FieldByName('DEGREE_DATE').AsString);
           dbedDegreeDate.SetFocus;
           exit;
         end;
       except on e:exception
         do begin
           showmessage('Не заполнено поле '+'Дата присвоения (ученой степени)'+cdsOKDegree.FieldByName('DEGREE_DATE').AsString);
           dbedDegreeDate.SetFocus;
           exit;
         end;
       end;

//
       cdsOKDegree.Post;
       if (cdsOKpersonal.FieldByName('is_DEGREE').AsString<>'1')
       and (cdsOKDegree.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Ученой степени Нет"');
//         exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_DEGREE').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
  3: If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
     Then begin
// награды
//
      StatusBar.Panels[2].Text :='()';
       er_mes:='';


       if cdsOKaward.FieldByName('AWARD_INFO').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Сведения о награде');
         dbedAwardInfo.SetFocus;
         exit;
       end;
//
       if cdsOKaward.FieldByName('AWARD_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год получения (награды)');
         dbedAwardDate.SetFocus;
         exit;
       end;
//
       check_date_message_:= check_date_yyyymmdd(cdsOKaward.FieldByName('AWARD_DATE').AsString,
         cdsOKaward.FieldByName('AWARD_DATE_mm').AsString,cdsOKaward.FieldByName('AWARD_DATE_dd').AsString,
         'N','Y');

       if check_date_message_<>'1'
       then begin
         showmessage('(6978)Год получения (награды) '+check_date_message_);
         dbedAwardDate.SetFocus;
         exit;
       end else begin
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKaward.FieldByName('AWARD_DATE_dd').AsString+'.'+
                cdsOKaward.FieldByName('AWARD_DATE_mm').AsString+'.'+
                cdsOKaward.FieldByName('AWARD_DATE').AsString,
          cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
         if ( strtodate(cdsOKaward.FieldByName('AWARD_DATE_dd').AsString+'.'+
                        cdsOKaward.FieldByName('AWARD_DATE_mm').AsString+'.'+
                        cdsOKaward.FieldByName('AWARD_DATE').AsString) >now )
         or (raznica<18)
         then begin
           er_mes:= er_mes+ '(05971)Разница Даты награждения и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
         end;
       end;

       if er_mes=''
       then begin
         cdsOKaward.Post;
         if (cdsOKpersonal.FieldByName('is_award').AsString<>'1')
         and (cdsOKaward.recordcount>0)
         then begin
//           showmessage('В Сведениях для ИИАС указано "Наград Нет"');
  //         exit;
           cdsOKpersonal.edit;
           cdsOKpersonal.FieldByName('is_award').AsString:='1';
           cdsOKpersonal.post;
         end;

       end else begin
         showmessage(er_mes);
         exit;
       end;

     End;

  4: If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
     Then begin
// научные работы
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKScientific.FieldByName('SCIENTIFIC_INFO').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Сведения о научной работе');
         dbedScientificInfo.SetFocus;
         exit;
       end;
//
       if cdsOKScientific.FieldByName('SCIENTIFIC_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год написания (научной работы)');
         dbedScientificDate.SetFocus;
         exit;
       end;
//
       cdsOKScientific.Post;

       if (cdsOKpersonal.FieldByName('is_scientific').AsString<>'1')
       and (cdsOKScientific.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Научных работ Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_scientific').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
  5: If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
     Then begin
// зарубежные поездки 09_007
//
      StatusBar.Panels[2].Text :='()';

       if (cdsOKVoyage.FieldByName('voyage_str').AsString<>'')
       and (cdsOKVoyage.State in [dsEdit, dsInsert])
       then begin
         cdsOKVoyage.FieldByName('VOYAGE_LAND').AsString:=
           cdsOKVoyage.FieldByName('voyage_str_show').AsString;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_STR').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Страна по справочнику ЦБ:');
         DBEdit3.SetFocus;
         exit;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_STR').AsString='860'
       then begin
         showmessage('(05975)Реквизит «Пребывание за границей страна» не должен быть равен значению «Узбекистан»');
         exit;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_INFO').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Сведения о зарубежной поездке');
         DBEdit3.SetFocus;
         exit;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год зарубежной поездки');
         DBEdit1.SetFocus;
         exit;
       end;
//
       if (cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger-strtoint(copy(    cdsokpersonal.fieldbyname('birthday').asstring      ,7,4))
          <18)
       or (cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger> strtoint(copy(bankdate,7,4)) )
       then begin
         showmessage('Разница даты выезда за границу и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника');
         DBEdit1.SetFocus;
         exit;
       end;


//
       check_date_message_:= check_date_yyyymmdd(cdsOKVoyage.FieldByName('VOYAGE_DATE').AsString,
         cdsOKVoyage.FieldByName('VOYAGE_DATE_mm').AsString,
         cdsOKVoyage.FieldByName('VOYAGE_DATE_dd').AsString,'N','N');

       if check_date_message_<>'1'
       then begin
         showmessage('(7104)Зарубежная поездка '+check_date_message_);
         DBEdit1.SetFocus;
         exit;
       end;

       if (not cdsOKVoyage.FieldByName('DATA_IN').IsNull)
       then begin
         if (cdsOKVoyage.FieldByName('DATA_IN').AsInteger<cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger)
         or (cdsOKVoyage.FieldByName('DATA_IN').Asinteger> strtoint(copy(bankdate,7,4)) )
         then begin
           showmessage('Дата возвращения из-за границы не должна быть меньше даты выезда  и не должна быть больше текущей даты');
           exit;
         end;
       end;

       if (not cdsOKVoyage.FieldByName('DATA_IN').IsNull)
       or (not cdsOKVoyage.FieldByName('DATA_IN_mm').IsNull)
       or (not cdsOKVoyage.FieldByName('DATA_IN_dd').IsNull)
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKVoyage.FieldByName('DATA_IN').AsString,
           cdsOKVoyage.FieldByName('DATA_IN_mm').AsString,
           cdsOKVoyage.FieldByName('DATA_IN_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
           showmessage('(7129)Зарубежная поезда дата возвращения '+check_date_message_);
           DBEdit57.SetFocus;
           exit;
         end;
       end;

       cdsOKVoyage.Post;
       if (cdsOKpersonal.FieldByName('is_voyage').AsString<>'1')
       and (cdsOKVoyage.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Зарубежных поездок Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_voyage').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
  6: If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
     Then begin
// языки
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKLanguage.FieldByName('language_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Иностранный язык');
         exit;
       end else begin
                z:=getsqlresultpar('select count(*) from s_langs so ,ss_ok_nci son where son.nci_id=:p_1 and so.LANG_ID=son.s_id and son.ok_id=:p_2',
                 '77',cdsOKLanguage.FieldByName('language_code').AsString
          );
         if z=0
         then begin
           showmessage('Реквизит Иностранный язык должен соответствовать справочнику соответствия.');
            exit;
         end;

       end;

       if (cdsOKLanguage.FieldByName('cod_lang_prim').AsString='')
       and (cdsOKLanguage.State in [dsEdit, dsInsert])
       then begin
         cdsOKLanguage.FieldByName('cod_lang_prim').AsString:=
           cdsOKLanguage.FieldByName('language_code_show').AsString;
       end;
//
       if cdsOKLanguage.FieldByName('level_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Уровень владения (иностранным языком)');
         DBLCBlanglevel.SetFocus;
         exit;
       end else begin
                z:=getsqlresultpar('select count(*) from s_lang so ,ss_ok_nci son where son.nci_id=:p_1 and so.UROV_ID=son.s_id and son.ok_id=:p_2',
                 '78',cdsOKLanguage.FieldByName('level_code').AsString
          );
         if z=0
         then begin
           showmessage('Реквизит Уровень владения (иностранным языком) должен соответствовать справочнику соответствия.');
            exit;
         end;

       end;
//
       cdsOKLanguage.Post;
       if (cdsOKpersonal.FieldByName('is_language').AsString<>'1')
       and (cdsOKLanguage.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Ин.яз. Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_language').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
  7: If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
     Then begin
       er_mes:='';
// родственные отношения 09_002
//
      StatusBar.Panels[2].Text :='(7682)';

{       if cdsOKRelation.FieldByName('relation_birthplace').AsString=''
       then begin
         birthplace_ :='';
         if cdsOKRelation.FieldByName('COD_STR_birth').AsString=''
         then birthplace_:=
              cdsOKRelation.FieldByName('COD_STR_birth_prim').AsString
         else birthplace_:=
              cds_str.FieldByName('name').AsString;

         if cdsOKRelation.FieldByName('COD_OBL_birth').AsString=''
         then birthplace_:=
              birthplace_+' '+
              cdsOKRelation.FieldByName('COD_OBL_birth_PRIM').AsString
         else birthplace_:=
              birthplace_+' '+
              cds_region.FieldByName('region_nam').AsString;

         if cdsOKRelation.FieldByName('COD_CITY_birth').AsString=''
         then birthplace_:=
              birthplace_+' '+
              cdsOKRelation.FieldByName('COD_CITY_birth_prim').AsString
         else birthplace_:=
              birthplace_+' '+
              cds_distr.FieldByName('distr_name').AsString;

//         if (cdsOKLanguage.State in [dsEdit, dsInsert])
  //       then begin
    //       cdsOKLanguage.FieldByName('relation_birthplace').AsString:= copy(birthplace_,1,200);
      //   end;
       end;
}
       if cdsOKRelation.FieldByName('RELATION_FAMILY').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Фамилия (родственник)');
         DBEdit701.SetFocus;
         exit;
       end;
//
       if cdsOKRelation.FieldByName('RELATION_NAME').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Имя (родственник)');
         DBEdit702.SetFocus;
         exit;
       end;

       if cdsOKRelation.FieldByName('RELATION_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Родственное отношение (родственник)');
         exit;
       end else begin
         // взять код типа родственника из справочника соответствия
         S_ID:= getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','81',cdsOKRelation.FieldByName('RELATION_CODE').AsString);
         if cdsokpersonal.fieldbyname('gender_code').asstring='1' // пол мужской родственник муж ошибка
         then begin
           if S_ID='02'   // родственник муж ошибка
           then begin
             showmessage('Если пол сотрудника указан – «Мужской», то код степени родства не может принимать значение «Муж»');
             exit;
           end;
         end
          // пол женский родственник жена ошибка
         else begin
           if S_ID='01'   //родственник жена ошибка
           then begin
             showmessage('Если пол сотрудника указан – «Женский», то код степени родства не может принимать значение «Жена»');
             exit;
           end;
         end;
       end;

       if cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год рождения (родственник)');
         exit;
       end else begin
         if (cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger <
               strtoint(copy( cdsOKpersonal.FieldByName('BIRTHDAY').asstring ,7,4)))
         and ((S_ID='6') or (S_ID='8') or (S_ID='9') or (S_ID='10')  )
         then begin
           showmessage('Если родственник логически указан как младшее поколение, то год рождения родственника должен быть больше года рождения сотрудника');
           exit;
         end;
         if (  cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger >
                 strtoint( copy( cdsOKpersonal.FieldByName('BIRTHDAY').asstring ,7,4))   )
         and ( (S_ID='3') or (S_ID='4') or (S_ID='5') or (S_ID='7') or (S_ID='11') or (S_ID='12')  )
         then begin
           showmessage('Если родственник указан как старшее поколение, то год рождения родственника должен быть меньше года рождения сотрудника');
           exit;
         end;
         if cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger<1900
         then begin
           showmessage('Проверьте год рождения '+
             cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString);
           exit;
         end;

       end;

       if cdsOKRelation.FieldByName('COD_STR_birth').AsString=''
       then begin
         er_mes:=er_mes+'(7123) Укажите «Код страны рождения» обязательно из справочника <Страны>'+#13;
       end else begin
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKRelation.FieldByName('COD_STR_birth').AsString);
         if z<1  then er_mes:=er_mes+'(05345)Реквизит «Код страны рождения» родственника должен соответствовать справочнику <Страны и территории>'+#13;
       end;

       if cdsOKRelation.FieldByName('COD_STR_birth').AsString='860' // узбекистан то надо область и район
       then begin
         if (cdsOKRelation.FieldByName('COD_OBL_birth').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны рождения» -  «Узбекистан», то «Код области рождения» должен быть указан обязательно из справочника <Области Узбекистана>'+#13;
         end;
         if (cdsOKRelation.FieldByName('COD_CITY_birth').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны рождения» -  «Узбекистан», то «Код района рождения» должен быть указан обязательно из справочника <Районы Узбекистана>'+#13;
         end;
       end else begin
         if (cdsOKRelation.FieldByName('COD_OBL_birth_prim').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны рождения» -  Не «Узбекистан», то Примечание к «Код области рождения» должен быть указан'+#13;
         end;
         if (cdsOKRelation.FieldByName('COD_CITY_birth_prim').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны рождения» -  Не «Узбекистан», то Примечание к «Код района рождения» должен быть указан'+#13;
         end;
       end;

// проживания  - гци убрал проверку места проживания если родственник умер
     if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
     and (cdsOKRelation.FieldByName('DD_DEATH').AsString='')
     and (cdsOKRelation.FieldByName('MM_DEATH').AsString='')
     then begin
       if cdsOKRelation.FieldByName('COD_STR_LIVE').AsString=''
       then begin
         er_mes:=er_mes+'(7123) Укажите «Код страны проживания» обязательно из справочника <Страны>'+#13;
       end else begin
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKRelation.FieldByName('COD_STR_LIVE').AsString);
         if z<1  then er_mes:=er_mes+'(05345)Реквизит «Код страны проживания» родственника должен соответствовать справочнику <Страны и территории>'+#13;
       end;

       if cdsOKRelation.FieldByName('COD_STR_LIVE').AsString='860' // узбекистан то надо область и район
       then begin
         if (cdsOKRelation.FieldByName('COD_OBL_LIVE').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны проживания» -  «Узбекистан», то «Код области проживания» должен быть указан обязательно из справочника <Области Узбекистана>'+#13;
         end;
         if (cdsOKRelation.FieldByName('COD_CITY').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны проживания» -  «Узбекистан», то «Код района проживания» должен быть указан обязательно из справочника <Районы Узбекистана>'+#13;
         end;
       end else begin
         if (cdsOKRelation.FieldByName('COD_OBL_LIVE_prim').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны проживания» -  Не «Узбекистан», то Примечание к «Код области проживания» должен быть указан'+#13;
         end;
         if (cdsOKRelation.FieldByName('COD_CITY_prim').AsString='')
         then begin
           er_mes:=er_mes+'Если выбран «Код страны проживания» -  Не «Узбекистан», то Примечание к «Код района проживания» должен быть указан'+#13;
         end;
       end;
     end;

       if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString<>'')
       then begin
         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsInteger <
               cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger)
         or (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsInteger> strtoint(copy(bankdate,7,4)))
         then begin
           showmessage('Проверьте дату рождения '+cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString+
           ' и дату сметри '+
            cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString);
           exit;
         end;

         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKRelation.FieldByName('DD_DEATH').AsString<>'')
         and (cdsOKRelation.FieldByName('MM_DEATH').AsString<>''))
         then begin
           if (strtodate( cdsOKRelation.FieldByName('DD_DEATH').AsString+'.'+cdsOKRelation.FieldByName('MM_DEATH').AsString+'.'+cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString  ) > now)
           then begin
             er_mes:=er_mes+'Дата смерти родственников не должна быть меньше, чем дата рождения и больше текущей даты;'+#13;
           end;
         end;


       end else begin
         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKRelation.FieldByName('DD_DEATH').AsString<>'')
         or (cdsOKRelation.FieldByName('MM_DEATH').AsString<>''))
         then begin
           er_mes:=er_mes+'(7876)Если год смерти не указан, то число и(или) месяц не должны указываться'+#13;
         end;
       end;

         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString<>'')
         and ((cdsOKRelation.FieldByName('DD_DEATH').AsString='')
         or (cdsOKRelation.FieldByName('MM_DEATH').AsString=''))
         then begin
           er_mes:=er_mes+'(7884)Если указан год смерти , то также укажите число и месяц '+#13;
         end;

       if er_mes=''
       then begin
         cdsOKRelation.Post;
       end else begin
         showmessage(er_mes);
         exit;
       end;

     End;
  8: If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
     Then begin
// сведения о работе
//
      StatusBar.Panels[2].Text :='()';
       if (cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString='3')
       and (cdsOKPeriod.FieldByName('COD_BANK').AsString='')
       and (cdsOKPeriod.State in [dsEdit, dsInsert])
       then begin
       // если шу банкда и код банка пусто то поставить туда текущее мфо
          cdsOKPeriod.FieldByName('COD_BANK').AsString:=branch;
       end;
//
       if cdsOKPeriod.FieldByName('OFFICE_NAME').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Наименование организации');
         DBEdit801.SetFocus;
         exit;
       end;
//
//
       if cdsOKPeriod.FieldByName('OFFICE_ADDRESS').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Адрес организации');
         DBEdit802.SetFocus;
         exit;
       end;
//
//
       if cdsOKPeriod.FieldByName('ESTABLISHED_POST').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Занимаемая должность');
         DBEd_poststring.SetFocus;
         exit;
       end;
//
//
//       if cdsOKPeriod.FieldByName('ESTABLISHED_DEPARTMENT').AsString=''
//       then begin
//         showmessage('Не заполнено поле '+'Отдел');
//         DBEd_depstring.SetFocus;
//         exit;
//       end;
//
//
//       if cdsOKPeriod.FieldByName('BASE_MOVE_CODE').AsString=''
//       then begin
//         showmessage('Не заполнено поле '+'Основание перемещения');
//         DBLcbBaseMove.SetFocus;
//         exit;
//       end;
//
//
       if cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата поступления');
         exit;
       end else begin
         if (cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsDateTime<cdsOKPersonal.FieldByName('birthday').AsDateTime)
         then begin
           er_mes:=er_mes+'Реквизит «Дата начала работы в должности» должен быть обязательно заполнен,  соответствовать формату и быть больше даты рождения'+#13;
         end;

          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString,cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
         if (cdsOKPeriod.FieldByName('in_office_date').AsDatetime>now)
         or (raznica<13)
         then begin
           er_mes:=er_mes+'Разница даты начала работы в должности и даты рождения сотрудника не должна быть меньше 13 лет и не должна быть больше возраста сотрудника'+#13;
         end;



       end;
//
       if cdsOKPeriod.FieldByName('BASIS_DATE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата приказа/основания');
         exit;
       end else begin
         if cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString<>''
         then begin
           if (cdsOKPeriod.FieldByName('BASIS_DATE').asDateTime > cdsOKPeriod.FieldByName('IN_OFFICE_DATE').asDateTime)
           then begin
             er_mes:=er_mes+'Дата приказа-основания для начала работы в должности должна быть меньше или равна дате начала работы в этой должности'+#13;
           end;
         end;
       end;

       if (cdsOKPeriod.FieldByName('date_pr_off').asstring<>'' ) and ( cdsOKPeriod.FieldByName('OUT_OFFICE_DATE').asstring<>'')
       then begin
           if (cdsOKPeriod.FieldByName('date_pr_off').asDatetime > cdsOKPeriod.FieldByName('OUT_OFFICE_DATE').AsDatetime)
           then begin
             er_mes:=er_mes+'Дата приказа-основания для прекращения работы в должности  должна быть меньше или равна дате прекращения работы в этой должности'+#13;
           end;
       end;
//
       if cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Код типа стажа');
         DBLcbTypePeriod.SetFocus;
         exit;
       end else begin
         if (cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString='1')
         and (cdsOKPeriod.FieldByName('established_post').AsString='')
         then begin
           er_mes:=er_mes+'Реквизит «Должность» должен быть обязательно заполнен, если реквизит «Признак системы» указан как «другое» (Бошка тизимида)'+#13;
         end;
       end;

       if (cdsOKPeriod.FieldByName('post_CODE').AsString='')
       and (cdsOKPeriod.FieldByName('established_post').AsString='')
       then begin
         er_mes:=er_mes+'На самом деле Заполняется или код должности или Должность Одно из 2-х обязательно должно быть заполнено'+#13;
       end;

//
//
//       if cdsOKPeriod.FieldByName('ARTICLE_CODE').AsString=''
//       then begin
//         showmessage('Не заполнено поле '+'Описание статьи');
//         DBLcbArticle.SetFocus;
//         exit;
//       end;
//
//
       if cdsOKPeriod.FieldByName('BASIS_NUM').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Номер приказа/основания');
         DBEdit811.SetFocus;
         exit;
       end;
//
       if (not ChbArticle.Checked)
       and (cdsOKPeriod.State in [dsEdit, dsInsert])
       then begin
         cdsOKPeriod.FieldByName('article_code').AsString:='';
       end;

       if (cdsOKPeriod.FieldByName('date_attest').AsString<>'')
       and (cdsOKPeriod.FieldByName('resh_attest').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата аттестации», то реквизит «Решение аттестационной комиссии» должен быть заполнен'+#13;
       end;

       if (cdsOKPeriod.FieldByName('date_pr_kvl').AsString<>'')
       and (cdsOKPeriod.FieldByName('numb_pr_kvl').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата  прохождения Квалификационной комиссии Центрального банка», то реквизит «Номер протокола Квалификационной комиссии Центрального банка о соответствии должности, на которую выдвигается» должен быть заполнен'+#13;
       end;

       if (cdsOKPeriod.FieldByName('date_utv_km').AsString<>'')
       and (cdsOKPeriod.FieldByName('numb_utv_km').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата утверждения Кабинетом Министров», то реквизит «Номер постановления Кабинета Министров об утверждении в занимаемой должности» должен быть заполнен'+#13;
       end;

       if (cdsOKPeriod.FieldByName('out_office_date').AsString<>'')
       and (cdsOKPeriod.FieldByName('in_office_date').AsString<>'')
       then begin
         if (cdsOKPeriod.FieldByName('cod_pr_off').AsString='')
         and (cdsOKPeriod.FieldByName('pr_off').AsString='')
         then begin
           er_mes:=er_mes+'Если реквизит «Код причины прекращения работы в должности» не указан, то обязательно должен быть заполнен реквизит «Причина прекращения работы в должности»'+#13;
         end;
         if (cdsOKPeriod.FieldByName('out_office_date').AsDatetime>now)
         or (cdsOKPeriod.FieldByName('out_office_date').AsDatetime<cdsOKPeriod.FieldByName('in_office_date').AsDatetime)
         then begin
           er_mes:=er_mes+'Дата прекращения работы в должности не должна быть больше текущей даты и меньше даты начала работы в этой должности'+#13;
         end;
       end;


       if er_mes=''
       then begin
         cdsOKPeriod.Post;
       end else begin
         showmessage(er_mes);
         exit;
       end;

     End;
  9: If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
     Then begin
// квалификация
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKRise.FieldByName('rise_info').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Сведения о повышении (квалификации)');
         DBEdit12.SetFocus;
         exit;
       end;
//
//
       check_date_message_:= check_date_yyyymmdd(cdsOKRise.FieldByName('rise_date_year').AsString,
         cdsOKRise.FieldByName('rise_date_mm').AsString,cdsOKRise.FieldByName('rise_date_dd').AsString,
         'N','Y');

       if check_date_message_<>'1'
       then begin
         showmessage('(7616)повышении (квалификации) '+check_date_message_);
         DBEdit46.SetFocus;
         exit;
       end;

       if cdsOKRise.FieldByName('rise_date_year').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год прохождения (квалификации)');
         DBEdit46.SetFocus;
         exit;
       end else begin
         if (cdsOKRise.FieldByName('rise_date_year').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKRise.FieldByName('rise_date_year').AsInteger- strtoint(copy( cdsokpersonal.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
           showmessage('Разница даты повышения квалификации и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника');
           exit;
         end;
         if  (cdsOKRise.FieldByName('rise_date_year').AsString<>'')
         and (cdsOKRise.FieldByName('rise_date_mm').AsString<>'')
         and (cdsOKRise.FieldByName('rise_date_dd').AsString<>'')
         then begin
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKRise.FieldByName('rise_date_dd').AsString+'.'+
                cdsOKRise.FieldByName('rise_date_mm').AsString+'.'+
                cdsOKRise.FieldByName('rise_date_year').AsString,
           cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKRise.FieldByName('rise_date_dd').AsString+'.'+
                          cdsOKRise.FieldByName('rise_date_mm').AsString+'.'+
                          cdsOKRise.FieldByName('rise_date_year').AsString) >now )
           or (raznica<18)
           then begin
             er_mes:= er_mes+ '(05982)Разница Даты повышения квалификации и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
           end;

         end;
       end;
//
       cdsOKRise.Post;

       if (cdsOKpersonal.FieldByName('is_rise').AsString<>'1')
       and (cdsOKRise.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Квалификация Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_rise').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
 10: If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
     Then begin
// избрание
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKElection.FieldByName('election_post').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Должность');
         DBEdit48.SetFocus;
         exit;
       end;
//
//
       if cdsOKElection.FieldByName('election_date_begin').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Начало(год)');
         DBEdit47.SetFocus;
         exit;
       end else begin
         if (cdsOKElection.FieldByName('election_date_begin').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKElection.FieldByName('election_date_begin').AsInteger- strtoint(copy( cdsokpersonal.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
           showmessage('Разница даты избрания и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника');
           exit;
         end;
         if  (cdsOKElection.FieldByName('election_date_begin').AsString<>'')
         and (cdsOKElection.FieldByName('election_date_begin_mm').AsString<>'')
         and (cdsOKElection.FieldByName('election_date_begin_dd').AsString<>'')
         then begin
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKElection.FieldByName('election_date_begin_dd').AsString+'.'+
                cdsOKElection.FieldByName('election_date_begin_mm').AsString+'.'+
                cdsOKElection.FieldByName('election_date_begin').AsString,
           cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKElection.FieldByName('election_date_begin_dd').AsString+'.'+
                          cdsOKElection.FieldByName('election_date_begin_mm').AsString+'.'+
                          cdsOKElection.FieldByName('election_date_begin').AsString) >now )
           or (raznica<18)
           then begin
             er_mes:= er_mes+ '(05974)Разница Даты избрания и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
           end;

         end;

       end;
//
//
       if cdsOKElection.FieldByName('election_date_end').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Завершение(год)');
         DBEdit14.SetFocus;
         exit;
       end;
//
//
       if cdsOKElection.FieldByName('election_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Исполнительный орган');
         DBLCBelection.SetFocus;
         exit;
       end;
//
       check_date_message_:= check_date_yyyymmdd(cdsOKElection.FieldByName('election_date_begin').AsString,
         cdsOKElection.FieldByName('election_date_begin_mm').AsString,cdsOKElection.FieldByName('election_date_begin_dd').AsString,
         'N','N');

       if check_date_message_<>'1'
       then begin
         showmessage('(7734)избрание '+check_date_message_);
         DBEdit47.SetFocus;
         exit;
       end;


       if not cdsOKElection.FieldByName('election_date_end').isnull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKElection.FieldByName('election_date_end').AsString,
           cdsOKElection.FieldByName('election_date_end_mm').AsString,
           cdsOKElection.FieldByName('election_date_end_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
           showmessage('(7748)избрание (окончание срока) '+check_date_message_);
           DBEdit14.SetFocus;
           exit;
         end;
       end;

       cdsOKElection.Post;
       if (cdsOKpersonal.FieldByName('is_Election').AsString<>'1')
       and (cdsOKElection.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Избрание Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_Election').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
 11: If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
     Then begin
// гос премии
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKPremium.FieldByName('premium_name').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Наименование');
         dbedit15.SetFocus;
         exit;
       end;
//
//
       if cdsOKPremium.FieldByName('premium_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Год получения');
         dbedit16.SetFocus;
         exit;
       end;
//
       cdsOKPremium.Post;
       if (cdsOKpersonal.FieldByName('is_Premium').AsString<>'1')
       and (cdsOKPremium.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Гос премии Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_Premium').AsString:='1';
         cdsOKpersonal.post;
       end;
       
     End;
 12: If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
     Then begin
// воинская служба
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKArmy.FieldByName('army_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Отношение');
         DBLookupComboBox7.SetFocus;
         exit;
       end;
//
     if cdsOKArmy.Fields.FieldByName('army_code').AsString='1'
     then begin
//
       if cdsOKArmy.FieldByName('fitness_army_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Годность');
         DBLookupComboBox6.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('staff_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Вид состава');
         DBLcbStaff.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('type_force_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Род войск');
         DBLCBtypeforce.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('army_group_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Группа учета');
         DBLCBtypeforce.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('category_army_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Категория учета');
         DBLCBcategoryarmy.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('special_army').AsString=''
       then begin
         showmessage('Не заполнено поле '+'В/Специальность');
         dbedit52.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('number_vus').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Номер ВУС');
         dbedit50.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('military_rank_code').AsString=''
       then begin
         showmessage('Не заполнено поле '+'В/Звание');
         DBLCBmilitaryrank.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('code_army_post').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Код должности и особые признаки в/службы');
         dbedit18.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('name_army_office').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Военкомат');
         dbedit55.SetFocus;
         exit;
       end;
//
//
       if cdsOKArmy.FieldByName('specreg_number').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Спец.учет N');
         dbedit53.SetFocus;
         exit;
       end;
//

      end;

       cdsOKArmy.Post;
       if (cdsOKpersonal.FieldByName('is_Army').AsString<>'1')
       and (cdsOKArmy.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Армия Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_Army').AsString:='1';
         cdsOKpersonal.post;
       end;

     End;
 13: If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
     Then begin
// партии
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKParty.FieldByName('party_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Партия');
         DBLCBparty.SetFocus;
         exit;
       end;
//
       if (cdsOKParty.FieldByName('code_partii_prim').AsString='')
       and (cdsOKParty.State in [dsEdit, dsInsert])
       then begin
         cdsOKParty.FieldByName('code_partii_prim').AsString :=
           cdsOKParty.FieldByName('party_code_show').AsString;
       end;
//
       if (uppercase(cdsOKParty.FieldByName('party_code_show').AsString)='ПАРТИЯСИЗ')
       or (uppercase(cdsOKParty.FieldByName('party_code_show').AsString)='БЕСПАРТИЙНЫЙ')
       or ((cdsOKParty.FieldByName('party_code_show').AsString)='Партиясиз')
       or ((cdsOKParty.FieldByName('party_code_show').AsString)='Беспартийный')
       or ((cdsOKParty.FieldByName('party_code_show').AsString)='партиясиз')
       or ((cdsOKParty.FieldByName('party_code_show').AsString)='беспартийный')
       then begin
       // беспартийный
       end else begin
           if cdsOKParty.FieldByName('party_date').AsString=''
           then begin
             showmessage('Не заполнено поле '+'Год вступления в партию');
             dbedit73.SetFocus;
             exit;
           end;
    //
           if (cdsOKParty.FieldByName('party_date').AsInteger<1917)
           or (cdsOKParty.FieldByName('party_date').AsInteger>strtoint(copy(bankdate,7,4) ) )
           then begin
             showmessage('Неправильный='+cdsOKParty.FieldByName('party_date').AsString+' Год вступления в партию');
             dbedit73.SetFocus;
             exit;
           end;
    //
    //
           if cdsOKParty.FieldByName('punishment_motive').AsString<>''
           then begin
             if cdsOKParty.FieldByName('punishment_date').AsString=''
             then begin
               showmessage('Вы ввели Причину партийного наказания,'+#13+
                 cdsOKParty.FieldByName('punishment_motive').AsString+#13+
                 'но Не заполнили поле '+#13+
                 'Год парт.наказания');
               dbed_gpn.SetFocus;
               exit;
             end;
           end;

           if  cdsOKParty.FieldByName('punishment_date').AsString<>''
           then begin
             if cdsOKParty.FieldByName('punishment_motive').AsString=''
             then begin
               showmessage('Вы ввели Год парт.наказания,'+#13+
                 cdsOKParty.FieldByName('punishment_date').AsString+#13+
                 'но Не заполнили поле '+#13+
                 'Причина парт.наказания');
               DBEd_ppn.SetFocus;
               exit;
             end;
           end;
    //
    //
           if  cdsOKParty.FieldByName('out_party').AsString<>''
           then begin
             if cdsOKParty.FieldByName('party_outdate').AsString=''
             then begin
               showmessage('Вы ввели Причину выхода из партии,'+#13+
                 cdsOKParty.FieldByName('out_party').AsString+#13+
                 'но Не заполнили поле '+#13+
                 'Год выхода из партии');
               dbed_gvp.SetFocus;
               exit;
             end;
           end;
    //
           if cdsOKParty.FieldByName('party_outdate').AsString<>''
           then begin
             if cdsOKParty.FieldByName('out_party').AsString=''
             then begin
               showmessage('Вы ввели Год выхода из партии,'+#13+
                 cdsOKParty.FieldByName('party_outdate').ASstring +#13+
                 'но Не заполнили поле '+#13+
                 'Причина выхода из партии');
               dbed_pvp.SetFocus;
               exit;
             end;
           end;
    //
       end;

       cdsOKParty.Post;
       if (cdsOKpersonal.FieldByName('is_Party').AsString<>'1')
       and (cdsOKParty.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Партия Нет"');
//         exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_Party').AsString:='1';
         cdsOKpersonal.post;
       end;


     End;
 14: If (cdsOKYouth.State in dsEditModes) and (cdbgOKYouth.CanFocus)
     Then begin
// молодежные организации
//
      StatusBar.Panels[2].Text :='()';
       if cdsOKYouth.FieldByName('youth_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Наименование:');
         DBLCByouth.SetFocus;
         exit;
       end;
//
//
       if cdsOKYouth.FieldByName('in_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата вступления:');
         dbedit21.SetFocus;
         exit;
       end;
//
//
//       if cdsOKYouth.FieldByName('out_date').IsNull
//       then begin
//         showmessage('Не заполнено поле '+'Дата выхода:');
//         dbedit22.SetFocus;
//         exit;
//       end;
//



       cdsOKYouth.Post;
     End;

 15: If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
     Then begin
// отпуска
//
      StatusBar.Panels[2].Text :='()';
       if cdsOKLeave.FieldByName('leave_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Вид отпуска');
         DBLookupComboBox13.SetFocus;
         exit;
       end;
//
//
       if cdsOKLeave.FieldByName('period_leave').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Кол-во дней отпуска');
         dbedit63.SetFocus;
         exit;
       end;
//
//
       if cdsOKLeave.FieldByName('num_basis').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Номер приказа');
         dbedit62.SetFocus;
         exit;
       end;
//
//
//       if cdsOKLeave.FieldByName('motive_leave').AsString=''
//       then begin
//         showmessage('Не заполнено поле '+'Причина (не обязательно)');
//         dbedit64.SetFocus;
//         exit;
//       end;
//
//
       if cdsOKLeave.FieldByName('begin_year').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Рабочий год- начало');
         dbedit60.SetFocus;
         exit;
       end;
//
//
       if cdsOKLeave.FieldByName('end_year').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Р/ год- окончание');
         dbedit61.SetFocus;
         exit;
       end;
//
//
       if    (cdsOKLeave.FieldByName('leave_CODE').AsString<>'4')
         and (cdsOKLeave.FieldByName('leave_CODE').AsString<>'7')
       then begin
           if cdsOKLeave.FieldByName('date_in_leave').AsString=''
           then begin
             showmessage('Не заполнено поле '+'Дата выхода в отпуск');
             DBEDdate_in_leave.SetFocus;
             exit;
           end;
           if cdsOKLeave.FieldByName('date_out_leave').AsString=''
           then begin
             showmessage('Не заполнено поле '+'Дата выхода из отпуска');
             dbedit26.SetFocus;
             exit;
           end;
       end;
//


       cdsOKLeave.Post;
     End;
 16: If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
     Then begin
// судимости
//
      StatusBar.Panels[2].Text :='()';

       if cdsOKConvictions.FieldByName('convictions_motive').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Причина');
         dbedit27.SetFocus;
         exit;
       end;
//
//
       if cdsOKConvictions.FieldByName('convictions_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'год');
         dbedit28.SetFocus;
         exit;
       end;
//
//
       cdsOKConvictions.Post;
       if (cdsOKpersonal.FieldByName('is_Convictions').AsString<>'1')
       and (cdsOKConvictions.recordcount>0)
       then begin
//         showmessage('В Сведениях для ИИАС указано "Судимости Нет"');
  //       exit;
         cdsOKpersonal.edit;
         cdsOKpersonal.FieldByName('is_Convictions').AsString:='1';
         cdsOKpersonal.post;
       end;

     end;
 17: If (cdsOKAddInform.State in dsEditModes) and (cdbgOKAddInform.CanFocus)
     Then begin
// дополнительные сведения
//
      StatusBar.Panels[2].Text :='()';
       if cdsOKAddInform.FieldByName('character_addinform').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Сведения');
         dbedit29.SetFocus;
         exit;
       end;
//
//
       if cdsOKAddInform.FieldByName('addinform_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата');
         dbedit30.SetFocus;
         exit;
       end;
//

       cdsOKAddInform.Post;
     end;
 18: If (cdsOKPenalty.State in dsEditModes) and (cdbgOKPenalty.CanFocus)
     Then begin
// сведения о взыскании
//
      StatusBar.Panels[2].Text :='()';
       if cdsOKPenalty.FieldByName('penalty_CODE').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Вид наказания');
         DBLCBpenalty.SetFocus;
         exit;
       end;
//
//
       if cdsOKPenalty.FieldByName('penalty_motive').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Причина');
         dbedit65.SetFocus;
         exit;
       end;
//
//
       if cdsOKPenalty.FieldByName('penalty_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата протокола/приказа');
         dbedit34.SetFocus;
         exit;
       end;
//
//
       if cdsOKPenalty.FieldByName('penalty_num').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Номер протокола/приказа');
         dbedit33.SetFocus;
         exit;
       end;
//

       cdsOKPenalty.Post;
     End;
 19: If (cdsOKChangeFIO.State in dsEditModes) and (cdbgOKChangeFIO.CanFocus)
     Then begin
// сведения об изменении фио
//
      StatusBar.Panels[2].Text :='()';
       if cdsOKChangeFIO.FieldByName('family').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Фамилия');
         dbedit66.SetFocus;
         exit;
       end;
//
//
       if cdsOKChangeFIO.FieldByName('first_name').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Имя');
         dbedit67.SetFocus;
         exit;
       end;
//
//       if cdsOKChangeFIO.FieldByName('patronymic').AsString=''
//       then begin
//         showmessage('Не заполнено поле '+'Отчество');
//         dbedit35.SetFocus;
//         exit;
//       end;
//
       if cdsOKChangeFIO.FieldByName('change_date').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Дата изменения');
         dbedit36.SetFocus;
         exit;
       end;
//
//
       if cdsOKChangeFIO.FieldByName('change_motive').AsString=''
       then begin
         showmessage('Не заполнено поле '+'Причина изменения');
         dbedit68.SetFocus;
         exit;
       end;
//

       cdsOKChangeFIO.Post;
     End;
 20: begin
 // фото по-другому
     end;
 21: If (cdsOKhospital.State in dsEditModes) and (cdbgOKhospital.CanFocus)
     Then begin
//
//
StatusBar.Panels[2].Text :='(8754)больничный';
       cdsOKhospital.Post;
     end;
 22: If (cdsOKprivilege.State in dsEditModes) and (cdbgOKprivilege.CanFocus)
     Then begin
//
//
StatusBar.Panels[2].Text :='(8761)льготы';
       cdsOKprivilege.Post;
     end;
 23: If (cdsOKincrease.State in dsEditModes) and (cdbgOKincrease.CanFocus)
     Then begin
StatusBar.Panels[2].Text :='(8766)надбавки';
       cdsOKincrease.Post;
     end;
 24: If (cdsok_business_voyage.State in dsEditModes) and (cdbgok_business_voyage.CanFocus)
     Then begin
StatusBar.Panels[2].Text :='(8771)командировки';
       cdsok_business_voyage.Post;
     end;
 26: If (cdsok_zp_rate.State in dsEditModes) and (cdbgok_zp_rate.CanFocus)
     Then begin
       cdsok_zp_rate.Post;
StatusBar.Panels[2].Text :='(8773)Ставка рабочего времени';
//-- сапдейтить старую запись, если zp_rate_date_end is null
{       sql_:='update ok_zp_rate '+
        ' set zp_rate_date_end=to_date('''+cdsok_zp_rate.fieldbyname('zp_rate_date').asstring+''',''dd.mm.yyyy'') '+
        ' where branch='''+ cdsok_zp_rate.fieldbyname('branch').asstring+''''+
        ' and personal_code='+ cdsok_zp_rate.fieldbyname('personal_code').asstring +
        ' and zp_rate_date_end is null '+
        ' and zp_rate_date < to_date('''+cdsok_zp_rate.fieldbyname('zp_rate_date').asstring+''',''dd.mm.yyyy'') ';
}
       try
         execsqlPAR('update ok_zp_rate '+
        ' set zp_rate_date_end=to_date(:p_1,:p_2) '+
        ' where branch=:p_3' +
        ' and personal_code=:p_4'  +
        ' and zp_rate_date_end is null '+
        ' and zp_rate_date < to_date(:p_5,:p_6) ',
          cdsok_zp_rate.fieldbyname('zp_rate_date').asstring ,'dd.mm.yyyy',
          cdsok_zp_rate.fieldbyname('branch').asstring,cdsok_zp_rate.fieldbyname('personal_code').asstring,
          cdsok_zp_rate.fieldbyname('zp_rate_date').asstring ,'dd.mm.yyyy'
        );
         execsql('commit');
       except
         on e:exception
         do begin
           showmessage('не верная дата в ставке рабочего времени'+#13+sql_+#13+e.message);
         end;
       end;
       cdsok_zp_rate.refresh;
     end;
 27: If (cdsok_freedays.State in dsEditModes) and (cdbgok_freedays.CanFocus)
     Then begin
StatusBar.Panels[2].Text :='(8808)Выходные';
       cdsok_freedays.Post;
     end;
/////////////////////--------\\\\\\\\\\\\\\\\\\\\\\
 End;
  end; // если отправлен в го

end;

procedure TBOKForm.ActDetailDeleteExecute(Sender: TObject);
begin
  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006') or (HeadBranch_='09004') or (HeadBranch_='09049')) //   подтв. в ГО
  then begin
//если халк то
   If (cdsOKEducation.State in dsEditModes) and (cdbgOKEducation.CanFocus)
     Then begin
// образование
//
         cdsOKEducation.Cancel;

     End;
   If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
     Then begin
// ученые звания
//

       cdsOKacademic.Cancel;


     End;
   If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
     Then begin
// ученые степени
//

       cdsOKDegree.Cancel;

     End;
   If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
     Then begin
// награды
//
         cdsOKaward.Cancel;

     End;

   If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
     Then begin
// научные работы
//

       cdsOKScientific.Cancel;

     End;
   If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
     Then begin
// зарубежные поездки 09_007
//

       cdsOKVoyage.Cancel;

     End;
   If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
     Then begin
// языки
//
       cdsOKLanguage.Cancel;

     End;
   If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
     Then begin
// родственные отношения 09_002
//
         cdsOKRelation.Cancel;

     End;
   If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
     Then begin
// сведения о работе
//
         cdsOKPeriod.Cancel;

     End;
   If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
     Then begin
// квалификация
//

       cdsOKRise.Cancel;

     End;
  If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
     Then begin
// избрание
//

       cdsOKElection.Cancel;

     End;
  If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
     Then begin
// гос премии
//
       cdsOKPremium.Cancel;
       
     End;
  If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
     Then begin
// воинская служба
//

       cdsOKArmy.Cancel;

     End;
  If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
     Then begin
// партии
//

       cdsOKParty.Cancel;


     End;
  If (cdsOKYouth.State in dsEditModes) and (cdbgOKYouth.CanFocus)
     Then begin
// молодежные организации
//
       cdsOKYouth.Cancel;
     End;

  If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
     Then begin
// отпуска
//
       cdsOKLeave.Cancel;
     End;
  If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
     Then begin
// судимости
//
       cdsOKConvictions.Cancel;

     end;
  If (cdsOKAddInform.State in dsEditModes) and (cdbgOKAddInform.CanFocus)
     Then begin
// дополнительные сведения
//
       cdsOKAddInform.Cancel;
     end;
  If (cdsOKPenalty.State in dsEditModes) and (cdbgOKPenalty.CanFocus)
     Then begin
// сведения о взыскании
//
//
//
       cdsOKPenalty.Cancel;
     End;
  If (cdsOKChangeFIO.State in dsEditModes) and (cdbgOKChangeFIO.CanFocus)
     Then begin
// сведения об изменении фио
//

       cdsOKChangeFIO.Cancel;
     End;

  If (cdsOKhospital.State in dsEditModes) and (cdbgOKhospital.CanFocus)
     Then begin
//
       cdsOKhospital.Cancel;
     end;
  If (cdsOKprivilege.State in dsEditModes) and (cdbgOKprivilege.CanFocus)
     Then begin
//
//
       cdsOKprivilege.Cancel;
     end;
  If (cdsOKincrease.State in dsEditModes) and (cdbgOKincrease.CanFocus)
     Then begin
       cdsOKincrease.Cancel;
     end;
  If (cdsok_business_voyage.State in dsEditModes) and (cdbgok_business_voyage.CanFocus)
     Then begin
       cdsok_business_voyage.Cancel;
     end;
  If (cdsok_zp_rate.State in dsEditModes) and (cdbgok_zp_rate.CanFocus)
     Then begin
       cdsok_zp_rate.Cancel;
     end;
  If (cdsok_freedays.State in dsEditModes) and (cdbgok_freedays.CanFocus)
     Then begin
       cdsok_freedays.Cancel;
     end;

    showmessage('(8905)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin

   If Application.MessageBox(PChar( '('+inttostr(PCDetails.ActivePageIndex)+') Удалить запись?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
   Then Begin
   Case PCDetails.ActivePageIndex of
     0: If (cdbgOKEducation.CanFocus) and (not cdsOKEducation.IsEmpty) Then
         Begin
           EXEcSQLpar('delete from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4',
                cdsOkeducation.FieldByName('branch').AsString,
                cdsOkeducation.FieldByName('id').AsString,
                cdsOkeducation.FieldByName('personal_code').AsString,
                '2' // 2-диплом
              );
           cdbgOKEducation.Focused;
           cdsOKEducation.Delete;
           cdsOK_AfterPost(dsOKEducation.DataSet);
         end;
    1: If (cdbgOKacademic.CanFocus) and (not cdsOKacademic.IsEmpty) Then
         Begin
           cdbgOKacademic.Focused;
           cdsOKacademic.Delete;
           cdsOK_AfterPost(dsOKacademic.DataSet);
           if (cdsOKpersonal.FieldByName('is_ACADEMIC').AsString<>'2')
           and (cdsOKacademic.recordcount=0)
           then begin
//         showmessage('В Сведениях для ИИАС указано "Ученого звания Нет"');
//         exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_ACADEMIC').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    2: If (cdbgOKDegree.CanFocus) and (not cdsOKDegree.IsEmpty) Then
         Begin
           cdbgOKdegree.Focused;
           cdsOKdegree.Delete;
           cdsOK_AfterPost(dsOKdegree.DataSet);
           if (cdsOKpersonal.FieldByName('is_DEGREE').AsString<>'2')
           and (cdsOKdegree.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Ученой степени Нет"');
    //         exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_DEGREE').AsString:='2';
             cdsOKpersonal.post;
           end;

         end;
    3: If (cdbgOKaward.CanFocus) and (not cdsOKaward.IsEmpty) Then
         Begin
           cdbgOKaward.Focused;
           cdsOKaward.Delete;
           cdsOK_AfterPost(dsOKaward.DataSet);
           if (cdsOKpersonal.FieldByName('is_award').AsString<>'2')
           and (cdsOKaward.recordcount=0)
           then begin
  //           showmessage('В Сведениях для ИИАС указано "Наград Нет"');
    //         exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_award').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    4: If (cdbgOKScientific.CanFocus) and (not cdsOKScientific.IsEmpty) Then
         Begin
           cdbgOKscientific.Focused;
           cdsOKscientific.Delete;
           cdsOK_AfterPost(dsOKscientific.DataSet);
           if (cdsOKpersonal.FieldByName('is_scientific').AsString<>'2')
           and (cdsOKscientific.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Научных работ Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_scientific').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    5: If (cdbgOKVoyage.CanFocus) and (not cdsOKvoyage.IsEmpty) Then
         Begin
           cdbgOKvoyage.Focused;
           cdsOKvoyage.Delete;
           cdsOK_AfterPost(dsOKvoyage.DataSet);
           if (cdsOKpersonal.FieldByName('is_voyage').AsString<>'2')
           and (cdsOKVoyage.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Зарубежных поездок Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_voyage').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    6: If (cdbgOKLanguage.CanFocus) and (not cdsOKlanguage.IsEmpty) Then
         Begin
           cdbgOKlanguage.Focused;
           cdsOKlanguage.Delete;
           cdsOK_AfterPost(dsOKlanguage.DataSet);
           if (cdsOKpersonal.FieldByName('is_language').AsString<>'2')
           and (cdsOKLanguage.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Ин.яз. Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_language').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    7: If (cdbgOKRelation.CanFocus) and (not cdsOKrelation.IsEmpty) Then
         Begin
           cdbgOKrelation.Focused;
           cdsOKrelation.Delete;
           cdsOK_AfterPost(dsOKrelation.DataSet);
         end;
    8: If (cdbgOKPeriod.CanFocus) and (not cdsOKperiod.IsEmpty) Then
         Begin
           cdbgOKperiod.Focused;
           cdsOKperiod.Delete;
           cdsOK_AfterPost(dsOKperiod.DataSet);
         end;
    9: If (cdbgOKRise.CanFocus) and (not cdsOKrise.IsEmpty) Then
         Begin
           cdbgOKrise.Focused;
           cdsOKrise.Delete;
           cdsOK_AfterPost(dsOKrise.DataSet);
           if (cdsOKpersonal.FieldByName('is_rise').AsString<>'2')
           and (cdsOKRise.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Квалификация Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_rise').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    10: If (cdbgOKElection.CanFocus) and (not cdsOKelection.IsEmpty) Then
         Begin
           cdbgOKelection.Focused;
           cdsOKelection.Delete;
           cdsOK_AfterPost(dsOKelection.DataSet);
           if (cdsOKpersonal.FieldByName('is_Election').AsString<>'2')
           and (cdsOKelection.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Избрание Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_Election').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    11: If (cdbgOKPremium.CanFocus) and (not cdsOKpremium.IsEmpty) Then
         Begin
           cdbgOKpremium.Focused;
           cdsOKpremium.Delete;
           cdsOK_AfterPost(dsOKpremium.DataSet);
           if (cdsOKpersonal.FieldByName('is_Premium').AsString<>'2')
           and (cdsOKPremium.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Гос премии Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_Premium').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    12: If (cdbgOKArmy.CanFocus) and (not cdsOKarmy.IsEmpty) Then
         Begin
           cdbgOKarmy.Focused;
           cdsOKarmy.Delete;
           cdsOK_AfterPost(dsOKarmy.DataSet);
           if (cdsOKpersonal.FieldByName('is_Army').AsString<>'2')
           and (cdsOKArmy.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Армия Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_Army').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    13: If (cdbgOKParty.CanFocus) and (not cdsOKparty.IsEmpty) Then
         Begin
           cdbgOKparty.Focused;
           cdsOKparty.Delete;
           cdsOK_AfterPost(dsOKparty.DataSet);
           if (cdsOKpersonal.FieldByName('is_Party').AsString<>'2')
           and (cdsOKparty.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Партия Нет"');
    //         exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_Party').AsString:='2';
             cdsOKpersonal.post;
           end;

         end;
    14: If (cdbgOKYouth.CanFocus) and (not cdsOKyouth.IsEmpty) Then
         Begin
           cdbgOKyouth.Focused;
           cdsOKyouth.Delete;
           cdsOK_AfterPost(dsOKyouth.DataSet);
         end;
//    15: If (cdbgOKPost.CanFocus) and (not cdsOKpost.IsEmpty) Then
//         Begin
//           cdbgOKpost.Focused;
//           cdsOKpost.Delete;
//           cdsOK_AfterPost(dsOKpost.DataSet);
//         end;
    15: If (cdbgOKLeave.CanFocus) and (not cdsOKleave.IsEmpty) Then
         Begin
           cdbgOKleave.Focused;
           cdsOKleave.Delete;
           cdsOK_AfterPost(dsOKleave.DataSet);
         end;
    16: If (cdbgOKConvictions.CanFocus) and (not cdsOKconvictions.IsEmpty) Then
         Begin

           exeCsqlpar('select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4',
                cdsOKConvictions.FieldByName('branch').AsString,
                cdsOKConvictions.FieldByName('id').AsString,
                cdsOKConvictions.FieldByName('personal_code').AsString,
                '3' // 3справка УВД
            );

           cdbgOKconvictions.Focused;
           cdsOKconvictions.Delete;
           cdsOK_AfterPost(dsOKconvictions.DataSet);
           if (cdsOKpersonal.FieldByName('is_Convictions').AsString<>'2')
           and (cdsOKConvictions.recordcount=0)
           then begin
    //         showmessage('В Сведениях для ИИАС указано "Судимости Нет"');
      //       exit;
             cdsOKpersonal.edit;
             cdsOKpersonal.FieldByName('is_Convictions').AsString:='2';
             cdsOKpersonal.post;
           end;
         end;
    17: If (cdbgOKAddInform.CanFocus) and (not cdsOKAddInform.IsEmpty) Then
         Begin

           execsqlpar('select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4',
                 cdsOKAddInform.FieldByName('branch').AsString,
                 cdsOKAddInform.FieldByName('id').AsString,
                 cdsOKAddInform.FieldByName('personal_code').AsString,
                 '4' // 4 справка махалля
            );

           cdbgOKaddinform.Focused;
           cdsOKaddinform.Delete;
           cdsOK_AfterPost(dsOKaddinform.DataSet);
         end;
    18: If (cdbgOKPenalty.CanFocus) and (not cdsOKPenalty.IsEmpty) Then
         Begin
           cdbgOKpenalty.Focused;
           cdsOKpenalty.Delete;
           cdsOK_AfterPost(dsOKpenalty.DataSet);
         end;
    19: If (cdbgOKChangeFIO.CanFocus) and (not cdsOKChangeFIO.IsEmpty) Then
         Begin
           cdbgOKchangeFIO.Focused;
           cdsOKchangeFIO.Delete;
           cdsOK_AfterPost(dsOKchangeFIO.DataSet);
         end;
    20: begin
    // фото удаляется по-другому
        end;
    21: If (cdbgOKhospital.CanFocus) and (not cdsOKhospital.IsEmpty) Then
         Begin
           cdbgOKhospital.Focused;
            cdsOKhospital.Delete;
           cdsOK_AfterPost(dsOKhospital.DataSet);
         end;
    22: If (cdbgOKprivilege.CanFocus) and (not cdsOKprivilege.IsEmpty) Then
         Begin
           cdbgOKprivilege.Focused;
            cdsOKprivilege.Delete;
           cdsOK_AfterPost(dsOKprivilege.DataSet);
         end;
    23: If (cdbgOKincrease.CanFocus) and (not cdsOKincrease.IsEmpty) Then
         Begin
           cdbgOKincrease.Focused;
            cdsOKincrease.Delete;
           cdsOK_AfterPost(dsOKincrease.DataSet);
         end;
    24: If (cdbgok_business_voyage.CanFocus) and (not cdsok_business_voyage.IsEmpty) Then
         Begin
           cdbgok_business_voyage.Focused;
            cdsok_business_voyage.Delete;
           cdsOK_AfterPost(dsok_business_voyage.DataSet);
         end;
    26: If (cdbgok_zp_rate.CanFocus) and (not cdsok_zp_rate.IsEmpty) Then
         Begin
           cdbgok_zp_rate.Focused;
            cdsok_zp_rate.Delete;
           cdsOK_AfterPost(dsok_zp_rate.DataSet);
         end;
    27: If (cdbgok_freedays.CanFocus) and (not cdsok_freedays.IsEmpty) Then
         Begin
           cdbgok_freedays.Focused;
            cdsok_freedays.Delete;
           cdsOK_AfterPost(dsok_freedays.DataSet);
         end;
    End;

  End;

  end; // если отправлен в ГО

end;

procedure TBOKForm.cdsOKEducationAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsOKEducation.FieldByName('NOSTRA_DATE').EditMask  := '!09/09/0099;1;_';
    cdsOKEducation.FieldByName('diplom_date').EditMask    := '!09/09/0099;1;_';
    cdsOKEducation.MasterSource    := dsOKPersonal;
    cdsOKEducation.IndexFieldNames := 'branch;personal_code';
    cdsOKEducation.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.ActDetailUndoExecute(Sender: TObject);
begin
//if  cds.State in [dsEditModes] then cds.Cancel;

     If cdsOKPERsonal.State in dsEditModes    Then cdsOKPERsonal.Cancel;

     If cdsOKEducation.State in dsEditModes    Then cdsOKEducation.Cancel;
     If cdsOKacademic.State in dsEditModes     Then cdsOKacademic.Cancel;
     If cdsOKDegree.State in dsEditModes       Then cdsOKDegree.Cancel;
     If cdsOKaward.State in dsEditModes        Then cdsOKaward.Cancel;
     If cdsOKScientific.State in dsEditModes   Then cdsOKScientific.Cancel;
     If cdsOKVoyage.State in dsEditModes       Then cdsOKVoyage.Cancel;
     If cdsOKLanguage.State in dsEditModes     Then cdsOKLanguage.Cancel;
     If cdsOKRelation.State in dsEditModes     Then cdsOKRelation.Cancel;
     If cdsOKPeriod.State in dsEditModes       Then cdsOKPeriod.Cancel;
     If cdsOKRise.State in dsEditModes         Then cdsOKRise.Cancel;
     If cdsOKElection.State in dsEditModes     Then cdsOKElection.Cancel;
     If cdsOKPremium.State in dsEditModes      Then cdsOKPremium.Cancel;
     If cdsOKArmy.State in dsEditModes         Then cdsOKArmy.Cancel;
     If cdsOKParty.State in dsEditModes        Then cdsOKParty.Cancel;
     If cdsOKYouth.State in dsEditModes        Then cdsOKYouth.Cancel;
     If cdsOKLeave.State in dsEditModes        Then cdsOKLeave.Cancel;
     If cdsOKConvictions.State in dsEditModes  Then cdsOKConvictions.Cancel;
     If cdsOKAddInform.State in dsEditModes    Then cdsOKAddInform.Cancel;
     If cdsOKPenalty.State in dsEditModes      Then cdsOKPenalty.Cancel;
     If cdsOKChangeFIO.State in dsEditModes    Then cdsOKChangeFIO.Cancel;

     If cdsOKhospital.State in dsEditModes        Then cdsOKhospital.Cancel;
     If cdsOKprivilege.State in dsEditModes       Then cdsOKprivilege.Cancel;
     If cdsOKincrease.State in dsEditModes        Then cdsOKincrease.Cancel;
     If cdsok_business_voyage.State in dsEditModes        Then cdsok_business_voyage.Cancel;
     If cdsok_zp_rate.State in dsEditModes        Then cdsok_zp_rate.Cancel;
     If cdsok_freedays.State in dsEditModes        Then cdsok_freedays.Cancel;

     execsql('rollback');
{
  Case PCDetails.ActivePageIndex of
     0: If (cdbgOKEducation.CanFocus)   Then cdsOKEducation.Cancel;
     1: If (cdbgOKacademic.CanFocus)    Then cdsOKacademic.Cancel;
     2: If (cdbgOKDegree.CanFocus)      Then cdsOKDegree.Cancel;
     3: If (cdbgOKaward.CanFocus)       Then cdsOKaward.Cancel;
     4: If (cdbgOKScientific.CanFocus)  Then cdsOKScientific.Cancel;
     5: If (cdbgOKVoyage.CanFocus)      Then cdsOKVoyage.Cancel;
     6: If (cdbgOKLanguage.CanFocus)    Then cdsOKLanguage.Cancel;
     7: If (cdbgOKRelation.CanFocus)    Then cdsOKRelation.Cancel;
     8: If (cdbgOKPeriod.CanFocus)      Then cdsOKPeriod.Cancel;
     9: If (cdbgOKRise.CanFocus)        Then cdsOKRise.Cancel;
    10: If (cdbgOKElection.CanFocus)    Then cdsOKElection.Cancel;
    11: If (cdbgOKPremium.CanFocus)     Then cdsOKPremium.Cancel;
    12: If (cdbgOKArmy.CanFocus)        Then cdsOKArmy.Cancel;
    13: If (cdbgOKParty.CanFocus)       Then cdsOKParty.Cancel;
    14: If (cdbgOKYouth.CanFocus)       Then cdsOKYouth.Cancel;
//    15: If (cdbgOKPost.CanFocus)        Then cdsOKPost.Cancel;
    15: If (cdbgOKLeave.CanFocus)       Then cdsOKLeave.Cancel;
    16: If (cdbgOKConvictions.CanFocus) Then cdsOKConvictions.Cancel;
    17: If (cdbgOKAddInform.CanFocus)   Then cdsOKAddInform.Cancel;
    18: If (cdbgOKPenalty.CanFocus)     Then cdsOKPenalty.Cancel;
    19: If (cdbgOKChangeFIO.CanFocus)   Then cdsOKChangeFIO.Cancel;
  End;
}

end;

procedure TBOKForm.cdsOKAcademicAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKAcademic.FieldByName('academic_date').EditMask  := '!09/09/0099;1;_';
    cdsOKAcademic.MasterSource    := dsOKPersonal;
    cdsOKAcademic.IndexFieldNames := 'branch;personal_code';
    cdsOKAcademic.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_1Show(Sender: TObject);
begin
  if cdsOKAcademic.Active then
  Begin
    Exit;
  End;

        cdsOKAcademic.close;
        with cdsOKAcademic.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKAcademic, SQL_OKAcademic+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKAcademic, SQL_OKAcademic+' where branch=:p_1');
  cdsOKAcademic.Close;
  cdsOKAcademic.DisableControls;
  if not cdsSSOKAcademic_Set.Active then LoadData(cdsSSOKAcademic_Set, SQL_SSOKAcademic_Set);

  addLookUpField(cdsOKAcademic, cdsSSokAcademic_Set, 'academic_code_show', 'academic_code', 'academic_code', 'academic_name', True);
  addLookUpField(cdsOKacademic, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsOKAcademic.Open;
  cdsOKAcademic.EnableControls;

end;

procedure TBOKForm.cdsOKDegreeAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKDegree.FieldByName('degree_date').EditMask  := '!09/09/0099;1;_';
    cdsOKDegree.MasterSource    := dsOKPersonal;
    cdsOKDegree.IndexFieldNames := 'branch;personal_code';
    cdsOKDegree.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKAwardAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKAward.FieldByName('award_date').EditMask  := '!09/09/0099;1;_';
    cdsOKAward.MasterSource    := dsOKPersonal;
    cdsOKAward.IndexFieldNames := 'branch;personal_code';
    cdsOKAward.MasterFields    := 'branch;personal_code';
  End;
end;

procedure TBOKForm.TabDegree_2Show(Sender: TObject);
begin
  if cdsOKDegree.Active then
  Begin
    Exit;
  End;

        cdsOKDegree.close;
        with cdsOKDegree.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKDegree, SQL_OKDegree+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKDegree, SQL_OKDegree+' where branch=:p_1');
  cdsOKDegree.Close;
  cdsOKDegree.DisableControls;
  if not cdsSSOKDegree_Set.Active then LoadData(cdsSSOKDegree_Set, SQL_SSOKDegree_Set);

  addLookUpField(cdsOKDegree, cdsSSokDegree_Set, 'degree_code_show', 'degree_code', 'degree_code', 'degree_name', True);
  addLookUpField(cdsOKdegree, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsOKDegree.Open;
  cdsOKDegree.EnableControls;

end;

procedure TBOKForm.TabSheet_3Show(Sender: TObject);
begin

  if cdsOKAward.Active then
  Begin
    Exit;
  End;

        cdsOKAward.close;
        with cdsOKAward.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKAward, SQL_OKAward+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKAward, SQL_OKAward+' where branch=:p_1');
  cdsOKAward.Close;
  cdsOKAward.DisableControls;

  addLookUpField(cdsOKAward, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', True);

  cdsOKAward.Open;
  cdsOKAward.EnableControls;

end;

procedure TBOKForm.cdsOKScientificAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKScientific.FieldByName('scientific_date').EditMask  := '!09/09/0099;1;_';
    cdsOKScientific.MasterSource    := dsOKPersonal;
    cdsOKScientific.IndexFieldNames := 'branch;personal_code';
    cdsOKScientific.MasterFields    := 'branch;personal_code';
  End;
end;

procedure TBOKForm.TabOKScientific_4Show(Sender: TObject);
begin
  if cdsOKScientific.Active then
  Begin
    Exit;
  End;

  LoadData(cdsOKScientific, SQL_OKScientific);
  cdsOKScientific.Close;
  cdsOKScientific.DisableControls;

  addLookUpField(cdsOKScientific, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', True);

  cdsOKScientific.Open;
  cdsOKScientific.EnableControls;

end;

procedure TBOKForm.TabSheet_5Show(Sender: TObject);
begin
  if cdsOKVoyage.Active then
  Begin
    Exit;
  End;


        cdsOKVoyage.close;
        with cdsOKVoyage.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKVoyage, SQL_OKVoyage+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKVoyage, SQL_OKVoyage+' where branch=:p_1');
  cdsOKVoyage.Close;
  cdsOKVoyage.DisableControls;

  addLookUpField(cdsOKVoyage, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);
  addLookUpField(cdsOKVoyage, cdsS_STR, 'voyage_str_show','voyage_str', 'code_str','name',   false);

  cdsOKVoyage.Open;
  cdsOKVoyage.EnableControls;
end;

procedure TBOKForm.cdsOkLanguageAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKLanguage.FieldByName('Language_date').EditMask  := '!09/09/0099;1;_';
    cdsOKLanguage.MasterSource    := dsOKPersonal;
    cdsOKLanguage.IndexFieldNames := 'branch;personal_code';
    cdsOKLanguage.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_6Show(Sender: TObject);
begin
  if cdsOKLanguage.Active then
  Begin
    Exit;
  End;

        cdsOKLanguage.close;
        with cdsOKLanguage.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKLanguage, SQL_OKLanguage+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKLanguage, SQL_OKLanguage+' where branch=:p_1');
  cdsOKLanguage.Close;
  cdsOKLanguage.DisableControls;

  if not cdsSSOKLanguage_Set.Active then LoadData(cdsSSOKLanguage_Set, SQL_SSOKLanguage_Set);
  if not cdsSSOKLevelLanguage_Set.Active then LoadData(cdsSSOKLevelLanguage_Set, SQL_SSOKLevelLanguage_Set);

  addLookUpField(cdsOKLanguage, cdsSSokLanguage_Set, 'language_code_show', 'language_code', 'language_code', 'language_name', True);
  addLookUpField(cdsOKLanguage, cdsSSokLevelLanguage_Set, 'level_code_show', 'level_code', 'level_language_code', 'level_language_name', False);
  addLookUpField(cdsOKLanguage, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsOKLanguage.Open;
  cdsOKLanguage.EnableControls;
{
Voyage
}

end;

procedure TBOKForm.cdsOkRelationAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKRelation.FieldByName('relation_birthday').EditMask  := '!09/09/0099;1;_';
    cdsOKRelation.MasterSource    := dsOKPersonal;
    cdsOKRelation.IndexFieldNames := 'branch;personal_code';
    cdsOKRelation.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_7Show(Sender: TObject);
begin
  if cdsOKRelation.Active then
  Begin
    Exit;
  End;

        cdsOKRelation.close;
        with cdsOKRelation.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKRelation, SQL_OKRelation+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKRelation, SQL_OKRelation+' where branch=:p_1');
  cdsOKRelation.Close;
  cdsOKRelation.DisableControls;

  if not cds_Str.Active then LoadData(cds_Str, SQL_str);
  if not cds_Region.Active then LoadData(cds_Region, SQL_Sregion);
  if not cds_distr.Active then LoadData(cds_distr, SQL_Sdistr);

  if not cdsSSOKRelation_Set.Active then LoadData(cdsSSOKRelation_Set, SQL_SSOKRelation_Set);
 //     (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
 // ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',' имя поля с показываемыми данными в cds-справочнике ')
  addLookUpField(cdsOKRelation, cdsSSokRelation_Set, 'relation_code_show', 'relation_code', 'relation_code', 'relation_name', True);
  addLookUpField(cdsOKRelation, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsOKRelation.Open;
  cdsOKRelation.EnableControls;

end;

procedure TBOKForm.cdsOKPeriodAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsOKPeriod.FieldByName('in_office_date').EditMask  := '!09/09/0099;1;_';
    cdsOKPeriod.FieldByName('out_office_date').EditMask := '!09/09/0099;1;_';
    cdsOKPeriod.FieldByName('basis_date').EditMask      := '!09/09/0099;1;_';
    cdsOKPeriod.MasterSource    := dsOKPersonal;
    cdsOKPeriod.IndexFieldNames := 'branch;personal_code';
    cdsOKPeriod.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_8Show(Sender: TObject);
var sql_ :string;
  k:integer;
begin
  if cdsOKPeriod.Active then
  Begin
    Exit;
  End;
  k:=0;
  TRY
    k:=k+1;
        cdsOKPeriod.close;
        with cdsOKPeriod.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//    sql_ := SQL_OKPeriod+' where branch = '+''''+curBranch +'''';
    sql_ := SQL_OKPeriod+' where branch=:p_1';
    LoadData(cdsOKPeriod, SQL_);

  // lookup поля - если есть :)
    cdsOKPeriod.Close;
    cdsOKPeriod.DisableControls;

    sql_ := SQL_Doljn;
    k:=k+1;
    if not cdsDoljn.Active then LoadData(cdsDoljn, SQL_);
    sql_ :=    SQL_Pr_off;
    k:=k+1;
    if not cdsPr_off.Active then LoadData(cdsPr_off, SQL_);


    sql_ :=   SQL_SSOKTypePeriod_Set ;
    k:=k+1;
    if not cdsSSOKTypePeriod_Set.Active
    then LoadData(cdsSSOKTypePeriod_Set, SQL_);
    sql_ :=   SQL_SSOKArticle_Set  ;
    k:=k+1;
    if not cdsSSOKArticle_Set.Active
    then LoadData(cdsSSOKArticle_Set, SQL_);
    sql_ := SQL_SSOKBaseMove_Set;
    k:=k+1;
    if not cdsSSOKBaseMove_Set.Active
    then LoadData(cdsSSOKBaseMove_Set, SQL_);

    k:=k+1;
    sql_ := SQL_SS_OK_POST;
    if not cdsSS_OK_POST.Active
    then LoadData(cdsSS_OK_POST, SQL_);

    k:=k+1;
    sql_ := SQL_SS_OK_DEPARTMENT;
    if not cdsSS_OK_DEPARTMENT.Active
    then LoadData(cdsSS_OK_DEPARTMENT, SQL_);

    k:=k+1;
    addLookUpField(cdsOKPeriod, cdsSSokTypePeriod_Set, 'type_period_code_show', 'type_period_code', 'type_period_code', 'type_period_name', True);
    k:=k+1;
    addLookUpField(cdsOKPeriod, cdsSSokArticle_Set, 'article_code_show', 'article_code', 'article_code', 'article_character', False);
    k:=k+1;
    addLookUpField(cdsOKPeriod, cdsSSokBaseMove_Set, 'base_move_show', 'base_move_code', 'base_move_code', 'base_move_name', False);
    k:=k+1;
    addLookUpField(cdsOKPeriod, cdsSS_OK_POST, 'post_show', 'post_code', 'post_code', 'post_name', False);
    k:=k+1;
    addLookUpField(cdsOKPeriod, cdsSS_OK_DEPARTMENT, 'department_show', 'department_code', 'department_code', 'department_name', False);
    k:=k+1;
    addLookUpField(cdsOKperiod, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

    k:=k+1;
//MemoTest.lines.add('*1');
    cdsOKPeriod.Open;
//MemoTest.lines.add('*2');
    k:=k+1;
    cdsOKPeriod.EnableControls;

  Except on e:exception
    do begin
      showmessage(inttostr(k)+') '+sql_+#13+e.Message);
    end;
  End;

//if cdsOKPeriod.Active
//then MemoTest.lines.add('*22*');

end;

procedure TBOKForm.cdsOKRiseAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKRise.MasterSource    := dsOKPersonal;
    cdsOKRise.IndexFieldNames := 'branch;personal_code';
    cdsOKRise.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabOKRise_9Show(Sender: TObject);
begin
  if cdsOKRise.Active then
  Begin
    Exit;
  End;

        cdsOKRise.close;
        with cdsOKRise.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKRise, SQL_OKRise+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKRise, SQL_OKRise+' where branch=:p_1');

  cdsOKrise.Close;
  cdsOKrise.DisableControls;

  addLookUpField(cdsOKrise, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);

  cdsOKrise.Open;
  cdsOKrise.EnableControls;

{
// lookup поля - если есть :)
  cdsOKPeriod.Close;
  cdsOKPeriod.DisableControls;

  if not cdsSSOKTypePeriod_Set.Active then LoadData(cdsSSOKTypePeriod_Set, SQL_SSOKTypePeriod_Set);
  if not cdsSSOKArticle_Set.Active then LoadData(cdsSSOKArticle_Set, SQL_SSOKArticle_Set);

  addLookUpField(cdsOKTypePeriod_Set, cdsSSokTypePeriod_Set_Set, 'type_period_code_show', 'type_period_code', 'type_period_code', 'type_period_name', True);
  addLookUpField(cdsOKArticle, cdsSSokArticle_Set, 'article_code_show', 'article_code', 'article_code', 'article_num', False);

  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKPeriod.Open;
  cdsOKPeriod.EnableControls;
}
end;

procedure TBOKForm.cdsOKElectionAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKElection.FieldByName('election_date_begin').EditMask  := '!09/09/0099;1;_';
//    cdsOKElection.FieldByName('election_date_end').EditMask  := '!09/09/0099;1;_';
    cdsOKElection.MasterSource    := dsOKPersonal;
    cdsOKElection.IndexFieldNames := 'branch;personal_code';
    cdsOKElection.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_10Show(Sender: TObject);
begin
  if cdsOKElection.Active then
  Begin
    Exit;
  End;

        cdsOKElection.close;
        with cdsOKElection.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKElection, SQL_OKElection+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKElection, SQL_OKElection+' where branch=:p_1');

  cdsOKElection.Close;
  cdsOKElection.DisableControls;

  if not cdsSSOKelection_Set.Active then LoadData(cdsSSOKelection_Set, SQL_SSOKelection_Set);
  if not cdsSSOKelection_Set2.Active then LoadData(cdsSSOKelection_Set2, SQL_SSOKElection_Source);
  if not cdsSSOKelection_Set3.Active then LoadData(cdsSSOKelection_Set3, SQL_SSOKElection_Source3);

  addLookUpField(cdsOKElection, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);
//  addLookUpField(cdsOKelection, cdsSSokElection_Set2, 'name', 'id', 'election_code', 'election_name_show', False);
  addLookUpField(cdsOKelection, cdsSSokElection_Set2, 'election_name_show','election_code', 'id', 'name',  False);
  addLookUpField(cdsOKelection, cdsSSokElection_Set3, 'election_address_show', 'election_code', 'id', 'name', False);

  cdsOKElection.Open;
  cdsOKElection.EnableControls;

{
// lookup поля - если есть :)
  cdsOKPeriod.Close;
  cdsOKPeriod.DisableControls;

  if not cdsSSOKTypePeriod_Set.Active then LoadData(cdsSSOKTypePeriod_Set, SQL_SSOKTypePeriod_Set);
  if not cdsSSOKArticle_Set.Active then LoadData(cdsSSOKArticle_Set, SQL_SSOKArticle_Set);

  addLookUpField(cdsOKTypePeriod_Set, cdsSSokTypePeriod_Set_Set, 'type_period_code_show', 'type_period_code', 'type_period_code', 'type_period_name', True);
  addLookUpField(cdsOKArticle, cdsSSokArticle_Set, 'article_code_show', 'article_code', 'article_code', 'article_num', False);

  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKPeriod.Open;
  cdsOKPeriod.EnableControls;
}

end;

procedure TBOKForm.cdsOKPremiumAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKPremium.FieldByName('premium_date').EditMask  := '!09/09/0099;1;_';
    cdsOKPremium.MasterSource    := dsOKPersonal;
    cdsOKPremium.IndexFieldNames := 'branch;personal_code';
    cdsOKPremium.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_11Show(Sender: TObject);
begin
  if cdsOKPremium.Active then
  Begin
    Exit;
  End;

        cdsOKPremium.close;
        with cdsOKPremium.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKPremium, SQL_OKPremium+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKPremium, SQL_OKPremium+' where branch=:p_1');
  cdsOKPremium.Close;
  cdsOKPremium.DisableControls;

  addLookUpField(cdsOKPremium, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);

  cdsOKPremium.Open;
  cdsOKPremium.EnableControls;

end;

procedure TBOKForm.cdsOKArmyAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKArmy.FieldByName('relation_birthday').EditMask  := '!09/09/0099;1;_';
    cdsOKArmy.MasterSource    := dsOKPersonal;
    cdsOKArmy.IndexFieldNames := 'branch;personal_code';
    cdsOKArmy.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_12Show(Sender: TObject);
begin
  if cdsOKArmy.Active then
  Begin
    Exit;
  End;

        cdsOKArmy.close;
        with cdsOKArmy.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
//  LoadData(cdsOKArmy, SQL_OKArmy+' where branch = '+''''+curBranch +'''');
  LoadData(cdsOKArmy, SQL_OKArmy+' where branch=:p_1');

// lookup поля - если есть :)
  cdsOKArmy.Close;
  cdsOKArmy.DisableControls;

  if not cdsSSOKArmy_Set.Active then LoadData(cdsSSOKArmy_Set, SQL_SSOKArmy_Set);
  if not cdsSSOKFitnessArmy_Set.Active then LoadData(cdsSSOKFitnessArmy_Set, SQL_SSOKFitnessArmy_Set);
  if not cdsSSokarmygroup.Active then LoadData( cdsSSokarmygroup , SQL_SSokarmygroup);
  if not cdsSSokCATEGORYARMY.Active then LoadData( cdsSSokCATEGORYARMY , SQL_SSokCATEGORYARMY);
  if not cdsSSokMILITARYRANK.Active then LoadData( cdsSSokMILITARYRANK , SQL_SSokMILITARYRANK);
  if not cdsSSokSTAFF.Active then LoadData( cdsSSokSTAFF , SQL_SSokSTAFF);
  if not cdsSSokTYPEFORCE.Active then LoadData( cdsSSokTYPEFORCE , SQL_SSokTYPEFORCE);

  addLookUpField(cdsOKArmy, cdsSSokArmy_Set, 'army_code_show', 'army_code', 'army_code', 'army_type', True);
  addLookUpField(cdsOKArmy, cdsSSokFitnessArmy_Set, 'fitness_army_code_show', 'fitness_army_code', 'fitness_army_code', 'fitness_army_type', False);
  addLookUpField(cdsOKarmy, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);
  addLookUpField(cdsOKarmy, cdsSSokarmygroup, 'army_group_show', 'army_group_code', 'army_group_code', 'army_group_name', False);
  addLookUpField(cdsOKarmy, cdsSSokCATEGORYARMY, 'CATEGORY_ARMY_show', 'CATEGORY_ARMY_code', 'CATEGORY_ARMY_code', 'CATEGORY_ARMY_name', False);
  addLookUpField(cdsOKarmy, cdsSSokMILITARYRANK, 'MILITARY_RANK_show', 'MILITARY_RANK_code', 'MILITARY_RANK_code', 'MILITARY_RANK_name', False);
  addLookUpField(cdsOKarmy, cdsSSokSTAFF, 'STAFF_show', 'STAFF_code', 'STAFF_code', 'STAFF_name', False);
  addLookUpField(cdsOKarmy, cdsSSokTYPEFORCE, 'TYPE_FORCE_show', 'TYPE_FORCE_code', 'TYPE_FORCE_code', 'TYPE_FORCE_name', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKArmy.Open;
  cdsOKArmy.EnableControls;

end;

procedure TBOKForm.cdsOKPartyAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKParty.FieldByName('party_outdate').EditMask  := '!09/09/0099;1;_';
//    cdsOKParty.FieldByName('punishment_date').EditMask  := '!09/09/0099;1;_';
    cdsOKParty.MasterSource    := dsOKPersonal;
    cdsOKParty.IndexFieldNames := 'branch;personal_code';
    cdsOKParty.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_13Show(Sender: TObject);
begin
  if cdsOKParty.Active then
  Begin
    Exit;
  End;

        cdsOKParty.close;
        with cdsOKParty.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKParty, SQL_OKParty+' where branch=:p_1');

// 1. lookup поля - если есть :)
  cdsOKParty.Close;
  cdsOKParty.DisableControls;

// 2. проверка датасетов-списков
  if not cdsSSOKParty_Set.Active then LoadData(cdsSSOKParty_Set, SQL_SSOKParty_Set);

// 3. Добавление lookup полей
  addLookUpField(cdsOKParty, cdsSSokParty_Set, 'party_code_show', 'party_code', 'party_code', 'party_name', True);
  addLookUpField(cdsOKparty, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKparty.Open;
  cdsOKparty.EnableControls;

end;

procedure TBOKForm.cdsOKYouthAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKYouth.FieldByName('in_date').EditMask  := '!09/09/0099;1;_';
    cdsOKYouth.FieldByName('out_date').EditMask  := '!09/09/0099;1;_';
    cdsOKYouth.MasterSource    := dsOKPersonal;
    cdsOKYouth.IndexFieldNames := 'branch;personal_code';
    cdsOKYouth.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_14Show(Sender: TObject);
begin
  if cdsOKYouth.Active then
  Begin
    Exit;
  End;

        cdsOKYouth.close;
        with cdsOKYouth.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKYouth, SQL_OKYouth+' where branch=:p_1');

// 1. lookup поля - если есть :)
  cdsOKYouth.Close;
  cdsOKYouth.DisableControls;

// 2. проверка датасетов-списков
  if not cdsSSOKYouth_Set.Active then LoadData(cdsSSOKYouth_Set, SQL_SSOKYouth_Set);

// 3. Добавление lookup полей
  addLookUpField(cdsOKYouth, cdsSSokYouth_Set, 'youth_code_show', 'youth_code', 'youth_code', 'youth_name', True);
  addLookUpField(cdsOKyouth, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKyouth.Open;
  cdsOKyouth.EnableControls;

end;

procedure TBOKForm.cdsOKLeaveAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKLeave.FieldByName('begin_year').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('end_year').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_in_leave').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_out_leave').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_basis').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_recall_begin').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_recall_end').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.FieldByName('date_order_recall').EditMask  := '!09/09/0099;1;_';
    cdsOKLeave.MasterSource    := dsOKPersonal;
    cdsOKLeave.IndexFieldNames := 'branch;personal_code';
    cdsOKLeave.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKConvictionsAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKConvictions.FieldByName('convictions_date').EditMask  := '!09/09/0099;1;_';
    cdsOKConvictions.MasterSource    := dsOKPersonal;
    cdsOKConvictions.IndexFieldNames := 'branch;personal_code';
    cdsOKConvictions.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKAddInformAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKAddInform.FieldByName('addInform_date').EditMask  := '!09/09/0099;1;_';
    cdsOKAddInform.MasterSource    := dsOKPersonal;
    cdsOKAddInform.IndexFieldNames := 'branch;personal_code';
    cdsOKAddInform.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKPenaltyAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата

    cdsOKPenalty.FieldByName('penalty_date').EditMask  := '!09/09/0099;1;_';
    cdsOKPenalty.MasterSource    := dsOKPersonal;
    cdsOKPenalty.IndexFieldNames := 'branch;personal_code';
    cdsOKPenalty.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKChangeFIOAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKChangeFIO.FieldByName('change_date').EditMask  := '!09/09/0099;1;_';
    cdsOKChangeFIO.MasterSource    := dsOKPersonal;
    cdsOKChangeFIO.IndexFieldNames := 'branch;personal_code';
    cdsOKChangeFIO.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.TabSheet_16Show(Sender: TObject);
begin

  if cdsOKLeave.Active then
  Begin
    Exit;
  End;

        cdsOKLeave.close;
        with cdsOKLeave.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKLeave, SQL_OKLeave+' where branch=:p_1');

// 1. lookup поля - если есть :)
  cdsOKLeave.Close;
  cdsOKLeave.DisableControls;

// 2. проверка датасетов-списков
  if not cdsSSOKLeave_Set.Active then LoadData(cdsSSOKLeave_Set, SQL_SSOKLeave_Set);

// 3. Добавление lookup полей
  addLookUpField(cdsOKLeave, cdsSSokLeave_Set, 'leave_code_show', 'leave_code', 'leave_code', 'leave_name', True);
  addLookUpField(cdsOKLeave, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsOKLeave.Open;
  cdsOKLeave.EnableControls;

end;

procedure TBOKForm.TabSheet_17Show(Sender: TObject);
begin
  if cdsOKConvictions.Active then
  Begin
    Exit;
  End;

        cdsOKConvictions.close;
        with cdsOKConvictions.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKConvictions, SQL_OKConvictions+' where branch=:p_1');

  cdsOKConvictions.Close;
  cdsOKConvictions.DisableControls;

  addLookUpField(cdsOKConvictions, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);

  cdsOKConvictions.Open;
  cdsOKConvictions.EnableControls;

end;

procedure TBOKForm.TabSheet_18Show(Sender: TObject);
begin
  if cdsOKAddInform.Active then
  Begin
    Exit;
  End;

  LoadData(cdsOKAddInform, SQL_OKAddInform);

  cdsOKAddInform.Close;
  cdsOKAddInform.DisableControls;

  addLookUpField(cdsOKAddInform, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);
  addLookUpField(cdsOKAddInform, cdsss_OK_AddInform, 'ADDINFORM_NAME', 'addinform_code', 'addinform_code', 'ADDINFORM_NAME', False);

  cdsOKAddInform.Open;
  cdsOKAddInform.EnableControls;

end;

procedure TBOKForm.TabSheet_19Show(Sender: TObject);
begin

//showmessage('TBOKForm.TabSheet_19Show');

  if cdsOKPenalty.Active then
  Begin
    Exit;
  End;

        cdsOKPenalty.close;
        with cdsOKPenalty.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKPenalty, SQL_OKPenalty+' where branch=:p_1');

// 1. lookup поля - если есть :)
  cdsOKPenalty.Close;
  cdsOKPenalty.DisableControls;

// 2. проверка датасетов-списков
  if not cdsSSOKPenalty_Set.Active then LoadData(cdsSSOKPenalty_Set, SQL_SSOKPenalty_Set);

// 3. Добавление lookup полей
  addLookUpField(cdsOKPenalty, cdsSSokPenalty_Set, 'penalty_code_show', 'penalty_code', 'penalty_code', 'penalty_name', True);
  addLookUpField(cdsOKpenalty, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsOKPenalty.Open;
  cdsOKPenalty.EnableControls;

end;

procedure TBOKForm.TabSheet_20Show(Sender: TObject);
begin
  if cdsOKChangeFIO.Active then
  Begin
    Exit;
  End;

        cdsOKChangeFIO.close;
        with cdsOKChangeFIO.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
        end;
  LoadData(cdsOKChangeFIO, SQL_OKChangeFIO+' where branch=:p_1');

  cdsOKChangeFIO.Close;
  cdsOKChangeFIO.DisableControls;

  addLookUpField(cdsOKChangeFIO, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);

  cdsOKChangeFIO.Open;
  cdsOKChangeFIO.EnableControls;

end;

procedure TBOKForm.cdsOKPostAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
// поставить маску полям типа дата
    cdsOKPost.FieldByName('basis_date').EditMask  := '!09/09/0099;1;_';
    cdsOKPost.FieldByName('appointment_date').EditMask  := '!09/09/0099;1;_';
    cdsOKPost.MasterSource    := dsOKPersonal;
    cdsOKPost.IndexFieldNames := 'branch;personal_code;appointment_date';
    cdsOKPost.MasterFields    := 'branch;personal_code';
  End;
end;

procedure TBOKForm.cdsOKPostAfterPost(DataSet: TDataSet);
//var
//    ErMessage : string;
//const
//  ERROR_NO = 'ORA-20000: ';
begin

  cdsOK_AfterPost(DataSet);

end;

procedure TBOKForm.actStatSalaryExecute(Sender: TObject);
var V_Mquantity, Hire_v_quantity: variant;
  Dekret_quantity,  I_Mquantity, Hire_quantity: integer;
//    from_okp : string;
begin
    I_Mquantity:=0;
    Hire_quantity:=0;

  try
    if curBranch=''
    then curBranch:=Branch;
  except
  end;

  try
//    from_okp :=  ' from ok_personal '+
//      ' where branch like '''+curBranch+''' '+
//      ' and department_code=' +cdsOKStat.FieldByName('department_code').AsString+
//      ' and post_code=' +cdsOKStat.FieldByName('post_code').AsString+
//      ' and special_code=' +cdsOKStat.FieldByName('special_code').AsString+
//      ' and status_code=2';

    V_Mquantity := GetSqlResultPAR('select quantity_post from ok_stat '+
      ' where branch like :p_1 '+
      ' and department_code=:p_2' +
      ' and post_code=:p_3' +
      ' and special_code=:p_4' ,
         curBranch, cdsOKStat.FieldByName('department_code').AsString,
         cdsOKStat.FieldByName('post_code').AsString, cdsOKStat.FieldByName('special_code').AsString
      );

    Hire_v_quantity := GetSqlResultPar('select count(personal_code) '+
       ' from ok_personal '+
      ' where branch like :p_1 '+
      ' and department_code=:p_2' +
      ' and post_code=:p_3' +
      ' and special_code=:p_4' +
      ' and status_code in(:p_5)',
         curBranch, cdsOKStat.FieldByName('department_code').AsString,
         cdsOKStat.FieldByName('post_code').AsString, cdsOKStat.FieldByName('special_code').AsString,
         '2'
      );

    Dekret_quantity := GetSqlResultPar('select count(personal_code) '+
       ' from ok_personal '+
      ' where branch like :p_1 '+
      ' and department_code=:p_2' +
      ' and post_code=:p_3' +
      ' and special_code=:p_4' +
      ' and status_code in(:p_5)',
         curBranch, cdsOKStat.FieldByName('department_code').AsString,
         cdsOKStat.FieldByName('post_code').AsString, cdsOKStat.FieldByName('special_code').AsString,
         '5'
      );

    cdsOKStatSalary.Close;
      with cdsOKStatSalary.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftFloat,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKStat.FieldByName('department_code').AsFloat;
          CreateParam(ftFloat,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKStat.FieldByName('post_code').AsFloat;
          CreateParam(ftFloat,'p_4' ,ptInput);
          ParamByName('p_4').Value := cdsOKStat.FieldByName('special_code').AsFloat;
          CreateParam(ftInteger,'p_5' ,ptInput);
          ParamByName('p_5').Value := 2;
//          CreateParam(ftInteger,'p_6' ,ptInput);
//          ParamByName('p_6').Value := 5;
      end;

    LoadData(cdsOKStatSalary,'select tabno||'')''||FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC fio '+
       ' from ok_personal '+
      ' where branch like :p_1 '+
      ' and department_code=:p_2' +
      ' and post_code=:p_3' +
      ' and special_code=:p_4' +
      ' and status_code in (:p_5)'
      );

    cdsOKStatSalary2.Close;
      with cdsOKStatSalary2.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftFloat,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKStat.FieldByName('department_code').AsFloat;
          CreateParam(ftFloat,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKStat.FieldByName('post_code').AsFloat;
          CreateParam(ftFloat,'p_4' ,ptInput);
          ParamByName('p_4').Value := cdsOKStat.FieldByName('special_code').AsFloat;
//          CreateParam(ftInteger,'p_5' ,ptInput);
//          ParamByName('p_5').Value := 2;
          CreateParam(ftInteger,'p_6' ,ptInput);
          ParamByName('p_6').Value := 5;
      end;

    LoadData(cdsOKStatSalary2,'select tabno||'')''||FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC fio '+
       ' from ok_personal '+
      ' where branch like :p_1 '+
      ' and department_code=:p_2' +
      ' and post_code=:p_3' +
      ' and special_code=:p_4' +
      ' and status_code in (:p_6)'
      );

  except
   showmessage('Сначала необходимо ввести данные!');
   exit;
  end;

  if VarIsNull(V_Mquantity)
  then begin
    ShowMessage('Ошибка: нет данных в штатном расписании или вы не сохранили данные!');
    Abort;
  end else begin
    if not VarIsNull(Hire_v_quantity)
    then begin
      I_Mquantity := V_Mquantity;
      Hire_quantity := Hire_v_quantity;
    end;

  end;

  LbDepartment.Caption := cdsOkStat.fieldbyname('department_code_show').asstring;
  LbPost.caption := cdsOkStat.fieldbyname('post_code_show').asstring;
  LbSpecial.caption := cdsOkStat.fieldbyname('special_show').asstring;

  LbVacancy.Caption :=IntToStr(I_Mquantity-Hire_quantity);
  LbHire.caption := IntToStr(Hire_quantity);
  LbDekret.caption := IntToStr(Dekret_quantity);

end;

procedure TBOKForm.actStatSaveExecute(Sender: TObject);
var sql_,errMes:string;
begin

 if ((HeadBranch_ ='09004') or ((HeadBranch_ ='00394'))) and (copy(lbfilial.caption,1,5)<>'(EDB)')
 then begin
    showmessage(lbfilial.caption);
    cdsOKStat.Cancel;
 end else begin
  if (HeadBranch_ ='09006') or (HeadBranch_ ='09004')  // 14.12.2012 теперь штатное через едб в агро и халке
  then begin
//    actStatNew.enabled:=false;
//    actStatSave.enabled:=false;
//    actStatDelete.enabled:=false;
//    cdsOKStat.cancel;
//    showmessage('Штатное расписание изменяется в ГО');
  end else begin
    errMes:='';
    if (cdsOKStat.State in dsEditModes)
    then begin

      if cdsOKStat.fieldbyname('quantity_post').IsNull
      then begin
        errMes:=errMes+'Общее количество сотрудников в данной должности'+#13;
      end;

      if cdsOKStat.fieldbyname('department_code').IsNull
      then begin
        errMes:=errMes+'Отдел'+#13;
      end;

      if cdsOKStat.fieldbyname('post_code').IsNull
      then begin
        errMes:=errMes+'Должность'+#13;
      end;

      if cdsOKStat.fieldbyname('special_code').IsNull
      then begin
        errMes:=errMes+'Специализация'+#13;
      end;

      if (cdsOKStat.fieldbyname('salary_fact').IsNull)
      and (cdsOKStat.State in [dsEdit, dsInsert])
      then begin
        cdsOKStat.fieldbyname('salary_fact').AsString:='0';
      end;

      if errMes<>''
      then begin
        showmessage('Чтобы сохранить, укажите сначала '+#13#13+ErrMes);
        exit;
      end;

      cdsOKStat.Post;
  {    sql_ := 'update ok_personal set special_code='+cdsOKStat.fieldbyname('special_code').AsString+
        ' where department_code='+cdsOKStat.fieldbyname('department_code').asstring +
        ' and post_code='+cdsOKStat.fieldbyname('post_code').asstring+
        ' and special_code<>'+cdsOKStat.fieldbyname('special_code').AsString;
  }
      try
        ExecSQLPAR('update ok_personal set special_code=:p_1' +
        ' where department_code=:p_2' +
        ' and post_code=:p_3' +
        ' and special_code<>:p_4',
          cdsOKStat.fieldbyname('special_code').AsString,cdsOKStat.fieldbyname('department_code').asstring,
          cdsOKStat.fieldbyname('post_code').asstring,cdsOKStat.fieldbyname('special_code').AsString
        );
        execsql('commit');
      except on e:exception
        do begin
          execsql('rollback');
          showmessage('ошибка изменения специализации сотрудников'+#13+e.message+#13+sql_);
        end;
      end;
    end;

    cdsOKPersonal.Refresh;
  end;
  
 end;

end;

procedure TBOKForm.actStatDeleteExecute(Sender: TObject);
begin
 if ((HeadBranch_ ='09004') or ((HeadBranch_ ='00394'))) and (copy(lbfilial.caption,1,5)<>'(EDB)')
 then begin
    showmessage(lbfilial.caption);
    cdsOKStat.Cancel;
 end else begin

  if (HeadBranch_ ='09006') or (HeadBranch_ ='09004')  // 14.12.2012 теперь штатное через едб в агро и халке
  then begin
//    actStatNew.enabled:=false;
//    actStatSave.enabled:=false;
//    actStatDelete.enabled:=false;
//    cdsOKStat.cancel;
//    showmessage('Штатное расписание изменяется в ГО');
  end else begin
    if (cdsOKStat.isEmpty)
    then begin
      showmessage('Нет данных для удаления!');
      exit;
    end;

    If Application.MessageBox(PChar('Удалить запись из штатного расписания?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
    Then Begin
      cdbgOKStat.Focused;
      cdsOKStat.Delete;
      cdsOK_AfterPost(dsOKStat.DataSet);
    End;
  end;
  
 end;

end;

procedure TBOKForm.actStatUndoExecute(Sender: TObject);
begin
 if ((HeadBranch_ ='09004') or ((HeadBranch_ ='00394'))) and (copy(lbfilial.caption,1,5)<>'(EDB)')
  then begin
    showmessage(lbfilial.caption);
    cdsOKStat.Cancel;
  end else begin
    cdsOKStat.Cancel;
  end;
end;


procedure TBOKForm.actStatNewExecute(Sender: TObject);
//var i:integer;
begin

 if ((HeadBranch_ ='09004') or ((HeadBranch_ ='00394'))) and (copy(lbfilial.caption,1,5)<>'(EDB)')
 then begin
    showmessage(lbfilial.caption);
    cdsOKStat.Cancel;
 end else begin

  if (HeadBranch_ ='09006') or (HeadBranch_ ='09004')  // 14.12.2012 теперь штатное через едб в агро и халке
  then begin
//    actStatNew.enabled:=false;
//    actStatSave.enabled:=false;
//    actStatDelete.enabled:=false;
//    cdsOKStat.cancel;
//    showmessage('Штатное расписание изменяется в ГО');
  end else begin

    if CBDep.ItemIndex=-1
    then begin
      showmessage('Выберите отдел!');
      exit;
    end;

    cdbgOKStat.Focused;
    cdsOKStat.Insert;

    cdsOKStat.FieldByName('department_code').AsString :=
            TData(CBDep.Items.Objects[CBDep.ItemIndex]).Id;

    cdsOKStat.FieldByName('salary_fact').AsString :='0';
  end;

 end;

end;

procedure TBOKForm.cdsOKStatBeforePost(DataSet: TDataSet);
var V : variant;
    I : integer;
//    Sal,Num : Double;
begin

  DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
  DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
  DataSet.Fields.FieldByName('branch').AsString := Branch;

  if cdsOKStat.State in [dsInsert]
  then begin
    V := GetSqlResultPar('select max(stat_code) from ok_stat where branch=:p_1',curbranch); // '''+Branch+'''' );

    if VarIsNull(V)
    then I:= 0
    else I:= V;

    cdsOKStat.FieldByName('stat_code').AsString := IntToStr(I+1);
  end else begin


  end;


end;

procedure TBOKForm.actChangeFIOExecute(Sender: TObject);
var erMessage : string;
const
  ERROR_NO = 'ORA-20000: ';
begin

  ErMessage := '';

  If fmSaveOKChangeFIO = nil Then fmSaveOKChangeFIO := TfmOKChangeFIO.Create(Self);
  With fmSaveOKChangeFIO do
    Begin
      Caption := ' Изменение ФИО: ';
      gbChangeFIO.Caption  := 'Код сотрудника: '+cdsOKPersonal.FieldByName('personal_code').AsString;
      lbFamily.Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
      lbName.Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
      lbPatronymic.Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;

//      if (LastPanel = 'DetailsPanel') and (cdsOKChangeFIO.Active) then
//      begin
//        medFamily.Text := cdsOKChangeFIO.FieldByName('family').asString;
//        medName.Text := cdsOKChangeFIO.FieldByName('first_name').asString;
//        medPatronymic.Text := cdsOKChangeFIO.FieldByName('patronymic').asString;
//        medChangeDate.Text := cdsOKChangeFIO.FieldByName('change_date').asString;
//        medChangeMotive.Text := cdsOKChangeFIO.FieldByName('change_motive').asString;
//        If cdsOKChangeFIO.State in [dsEdit, dsInsert] then cdsOKChangeFIO.Cancel;
//      end;

      If ShowModal = mrOk Then
      Begin

      End;

    End;

  if ErMessage = ''
  then begin
    fmSaveOKChangeFIO.Close;
    fmSaveOKChangeFIO := nil;
    if (LastPanel = 'DetailsPanel') and (cdsOKChangeFIO.Active) then
      begin
        cdsOKChangeFIO.Refresh;
      end;
//    cdsOKPersonal.Refresh;

//    fmSaveOKChangeFIO.Destroy;
  end;

end;

procedure TBOKForm.actDismissExecute(Sender: TObject);
var erMessage   : string;
     DepartmentCode, PostCode : string; // sql_,
    v : variant;
// motive_dismissial_code,  ArticleCode
const
  ERROR_NO = 'ORA-20000: ';
begin
  if cdsOKPersonal.FieldByName('status_code').AsString<>'2'
  then begin
    if cdsOKPersonal.FieldByName('status_code').AsString='5'
    then begin
      showmessage('Предупреждение: Декретный отпуск.'+#13+'Можно уволить по собственному желанию.');
    end else begin
      showmessage('Можно уволить только принятого сотрудника!');
      exit;
    end;
  end;

  If fmSaveOKDismiss = nil Then fmSaveOKDismiss := TfmOKDismiss.Create(Self);
  With fmSaveOKDismiss do
    Begin
      Caption := ' Увольнение сотрудника: ';
      gbDismiss.Caption  := ' Код сотрудника: '+cdsOKPersonal.FieldByName('personal_code').AsString;
      lbFamily.Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
      lbName.Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
      lbPatronymic.Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;

      DepartmentCode := '';
//      sql_ :='select department_name from ss_ok_department '+
//                ' where department_code='+cdsOKPERSONAL.FieldByName('Department_Code').AsString+
//                ' and state_notes=''A'' ';
      try
          v := GetSQLResultPAR('select department_name from ss_ok_department '+
                ' where department_code=:p_1'+
                ' and state_notes=:p_2 ',
                cdsOKPERSONAL.FieldByName('Department_Code').AsString,'A'
                );
          If not VarIsNull(v) then begin
            DepartmentCode := v;
            lbDepartment.Caption := DepartmentCode;
          end else begin
            //
          end;
      except
//            showmessage('*1'+sql_);
      end;


      PostCode := '';
//      sql_:= 'select post_name from ss_ok_post '+
//                ' where post_code='+cdsOKPERSONAL.FieldByName('Post_Code').AsString+
//                ' and state_notes=''A'' ';
      try
          v := GetSQLResultPAR(
                'select post_name from ss_ok_post '+
                ' where post_code=:p_1'+
                ' and state_notes=:p_2',
                cdsOKPERSONAL.FieldByName('Post_Code').AsString,'A'
          );
          If not VarIsNull(v) then begin
            PostCode := v;
            lbPost.Caption := PostCode;
          end else begin
            //
          end;
      except
//            showmessage('*2'+sql_);
      end;

      if cdsOKPost.Active then
      begin
        If cdsOKPost.State in [dsEdit, dsInsert] then cdsOKPost.Cancel;
      end;
      if cdsOKPersonal.Active then
      begin
        If cdsOKPersonal.State in [dsEdit, dsInsert] then cdsOKPersonal.Cancel;
      end;

      If ShowModal = mrOk Then
      Begin

      End;
    End;

  if ErMessage = ''
  then begin
    fmSaveOKDismiss.Close;
    fmSaveOKDismiss := nil;
//    if (LastPanel = 'DetailsPanel') and (cdsOKPost.Active) then
//      begin
//
//      end;

  end;

  cdsOKPersonal.Refresh;

  if cdsOKPost.Active
  then cdsOKPost.Refresh;

end;

procedure TBOKForm.actAppointExecute(Sender: TObject);
//var d: tdata;
begin
  if cdsOKPersonal.FieldByName('status_code').AsString<>'2'
  then begin
    showmessage('Можно переместить только принятого сотрудника!');
    exit;
  end;

  If fmSaveOKAppoint = nil Then fmSaveOKAppoint := TfmOKAppoint.Create(Self);
  With fmSaveOKAppoint do
    Begin
      Caption:='Перемещение';
      If ShowModal = mrOk Then
      Begin
//        cdsOKPersonal.Refresh;
      End;
  End;
  fmSaveOKAppoint.Close;
  fmSaveOKAppoint := nil;

  cdsOKPersonal.Refresh;

  if cdsOKPost.Active
  then cdsOKPost.Refresh;


end;

procedure TBOKForm.actSaveExistExecute(Sender: TObject);
var z,i: integer;
 sql_,ErMessage: string;
 QuantityPost_ , QuantityPostReal_ : integer;
 text_f : TextFile;
begin

  if not (cdsOKPersonal.State in dseditmodes)
  then begin
    cdsOKPersonal.edit;
  end;

  if (HeadBranch_='09006') and (cdsOKPersonal.FieldByName('passport_type_code').AsInteger <> 1)    // не связано с подтв. в ГО
  then begin
    cdsOKPersonal.FieldByName('passport_type_code').AsInteger := 1;
  end;

  cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString := cdsOKPERSONAL.FieldByName('cod_obl_live').AsString ;
  cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_DISTR').AsString := cdsOKPERSONAL.FieldByName('cod_distr_live').AsString ;
//  cdsOKPERSONAL.FieldByName('').AsString := cdsOKPERSONAL.FieldByName('').AsString ;
//  HOME_ADDRESSFACT_REGION_ID := cod_obl_live;
//  HOME_ADDRESSFACT_DISTR     := cod_distr_live;
//  HOME_ADDRESSFACT

  ErMessage:='';
  for i := 0 to cdbgOK_Personal.Columns.Count-1 do
  begin
    if cdbgOK_Personal.Columns.Items[i].Visible  then
    begin
      if (cdsOKPersonal.Fields.FieldByName(cdbgOK_Personal.Columns.Items[i].FieldName).AsString='')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'Отчество')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'N')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'За рубежом')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'N приказа')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'Дата приказа')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<>'Причина увольнения')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'За рубежом')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место рождения')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место жительства')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место выдачи паспорта')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Пенсионный ИН')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Отдел')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Должность')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Специализация')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Работник ОК')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Дата ввода')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> '(обл)Место рождения')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> '(район)Место рождения')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место прописки Область')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место прописки Район')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место прописки')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место жительства Область')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место жительства Район')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'Место жительства')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'За рубежом')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'состояние в ГО')
      and (cdbgOK_Personal.Columns.Items[i].Title.Caption<> 'profmember')
      then
      begin
        ErMessage := ErMessage+' "'+cdbgOK_Personal.Columns.Items[i].Title.Caption+'" ';
      end;

    end;
  end;

      if (headbranch_='09006')    // не связано с подтв. в ГО
      then begin
        if cdsOKPersonal.FieldByName('profmember').AsString=''
        then ErMessage := ErMessage+' "Профсоюз" ';
        if cdsOKPersonal.FieldByName('telefon').AsString=''
        then ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
        try
          strtoint64(cdsOKPersonal.FieldByName('telefon').AsString);
        except
          ErMessage := ErMessage+' "Телефон '+cdsOKPersonal.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
        end;
      end;

  if  ( cdsOKPersonal.FieldByName('reg_type_code').AsString='2')
  and (   cdsOKPersonal.FieldByName('REG_DATE_END').AsString='')
  then begin
    ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
  end;

  if  ( cdsOKPersonal.FieldByName('HOME_ADDRESS_REGION_ID').AsString='')
  and  ( cdsOKPersonal.FieldByName('HOME_ADDRESS_DISTR').AsString='')
  and  ( cdsOKPersonal.FieldByName('Home_Address').AsString='')
  then begin
    ErMessage := ErMessage+' "Где прописан- район,обл,адрес" ';
  end;

// убрал 28.11.2011
//  if  ( cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString='')
//  or  ( cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_DISTR').AsString='')
//  or  ( cdsOKPersonal.FieldByName('HOME_ADDRESSFACT').AsString='')
//  then begin
//    ErMessage := ErMessage+' "Место жительства- район,обл,адрес" ';
//  end;

  if  ( cdsOKPersonal.FieldByName('Education_Title_CODE').AsString='')
  then begin
    ErMessage := ErMessage+' "Образование" ';
  end;

  if  ( cdsOKPersonal.FieldByName('inn').AsString='')
  then begin
    ErMessage := ErMessage+' "ИНН" ';
  end;

  if cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if  ( cdsOKPersonal.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
    end;
  end;

  if  ( cdsOKPersonal.FieldByName('bank_spec').AsString='')
  then begin
    ErMessage := ErMessage+' "Наличие банковской специальности *" ';
  end;

  if  ( cdsOKPersonal.FieldByName('Education_Title_CODE').AsString='')
  then begin
    ErMessage := ErMessage+' "Образование  Сотрудника *" ';
  end;

  if  ( cdsOKPersonal.FieldByName('is_boss').AsString='')
  then begin
    ErMessage := ErMessage+' "Входит в руководящий состав *" ';
  end;

  if  ( cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='')
  then begin
    ErMessage := ErMessage+' "Гражданство" ';
  end;

// убрал 28.11.2011
//  if  ( cdsOKPersonal.FieldByName('PASS_REG').AsString='')
//  then begin
//    ErMessage := ErMessage+' "Место регистрации" ';
//  end;

  if  ( cdsOKPersonal.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
  end;


  if ( strtoint(copy(datetostr(now),7,4))-
        strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
        <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
  or (( strtoint(copy(datetostr(now),7,4))-
        strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
        =45) and (now< strtodate(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
  )
  then begin
    if (cdsokpersonal.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
    then begin
      ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
    end else begin
      if (cdsokpersonal.FieldByName('PASS_DATE_END').AsDateTime < now)
      then ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
    end;
  end;

  if  ( cdsOKPersonal.FieldByName('cod_str_birth').AsString='')
  then begin
    ErMessage := ErMessage+' "Страна рождения" ';
  end;

  if  ( cdsOKPersonal.FieldByName('check_kfs').AsString='')
  then begin
    ErMessage := ErMessage+' "Резерв руководящего состава *" ';
  end;

  if (cdsokpersonal.fieldbyname('gender_code').asstring='1')
  and (not cdsokpersonal.fieldbyname('maiden_family').IsNull)
  then begin
    ErMessage := ErMessage+' "Нельзя ввести девичью фамилию - вы ввели пол Мужской" ';
  end;

  if  ( cdsOKPersonal.FieldByName('region_id').AsString='')
  and ( cdsOKPersonal.FieldByName('cod_obl_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Область рождения или Примечание" ';
  end;

  if  ( cdsOKPersonal.FieldByName('distr').AsString='')
  and ( cdsOKPersonal.FieldByName('cod_place_birth_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Район/город рождения или Примечание" ';
  end;

  If ( cdsOKPersonal.FieldByName('Education_Title_CODE').AsString='')
  Then ErMessage := ErMessage+' "Образование сотрудника" ';

// проверка cdsOKPERSONAL.FieldByName('status_code').AsString
// нельзя ставить статус 4-уволен
    if (OldStatus<>'4') and (cdsOKPERSONAL.FieldByName('status_code').AsString='4')
    then begin
        ErMessage := ErMessage+#13+#13+'Чтобы перевести статус сотрудника в состояние "Уволен" используйте кнопку "Увольнение".';
        Showmessage(ErMessage);
      exit;
    end;
// END проверка cdsOKPERSONAL.FieldByName('status_code').AsString
///////

// проверка cdsOKPERSONAL.FieldByName('TABNO').AsString
{    sql_ := 'select count(id) from ok_personal where branch='+cdsOKPERSONAL.FieldByName('branch').AsString+
        ' and tabno='+cdsOKPERSONAL.FieldByName('tabno').AsString+
        ' and personal_code<>'+cdsOKPERSONAL.FieldByName('personal_code').AsString;
}    sql_ := 'select count(id) from ok_personal where branch=:p_1'+ //cdsOKPERSONAL.FieldByName('branch').AsString+
        ' and tabno=:p_2'+ //cdsOKPERSONAL.FieldByName('tabno').AsString+
        ' and personal_code<>:p_3'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
    try
      z := getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('branch').AsString,
          cdsOKPERSONAL.FieldByName('tabno').AsString,
          cdsOKPERSONAL.FieldByName('personal_code').AsString
      );
      if (z<>0)
      then begin
        ErMessage := ErMessage+#13+#13+'Табельный номер '+cdsOKPERSONAL.FieldByName('tabno').AsString+' уже используется!'+#13+' Измените табельный номер и сохраните данные.';
        Showmessage(ErMessage);
        exit;
      end;
    except
      showmessage('Для ввода нового сотрудника перейдите в режим "Таблица" и нажмите кнопку "Новый". ');
      cdsOKPERSONAL.cancel;
      exit;
    end;


    ///////


    if cdsOKPERSONAL.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'+ //cdsOKPERSONAL.FieldByName('nps_id').AsString+
        ' and personal_code<>:p_2'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('nps_id').AsString,
                cdsOKPERSONAL.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+#13+#13+'Пенсионный ИН '+cdsOKPERSONAL.FieldByName('nps_id').AsString+' уже используется!'+#13+' Измените Пенсионный ИН и сохраните данные.';
          Showmessage(ErMessage);
          exit;
        end;
      except on e:exception
        do begin
          showmessage('10333)нпс='+cdsOKPERSONAL.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOKPERSONAL.FieldByName('personal_code').AsString+#13+
            sql_+#13+e.message);

          exit;
        end;
      end;


      z := length(cdsOKPERSONAL.FieldByName('inn').AsString);
      if (z<>9) and (z<>0)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле ИНН должно содержать 9 цифр'+#13+
          'вы ввели ИНН='+cdsOKPERSONAL.FieldByName('inn').AsString+#13+
          'только '+IntToStr(z)+' символов';
        Showmessage(ErMessage);
        exit;
      end;

      z := length(cdsOKPERSONAL.FieldByName('nps_id').AsString);
      if (z<>14) and (z<>0)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН должно содержать 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
        Showmessage(ErMessage);
        exit;
      end;
    end;

  if ErMessage <> '' then
  begin
    ErMessage :='(8523)Пожалуйста, Укажите данные сотрудника:'+ ErMessage;
    ShowMessage( ErMessage);
////
    if HeadBranch_=HeadBranch_ //
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');
      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');

      try
        System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok.txt');
        System.Rewrite(text_f);

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok.txt"');
        raise;
      end;

      try
        WinExec('notepad C:\NCI Bank\OK\Temp\err_ok.txt', SW_MAXIMIZE);
      except
        showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok.txt"');
      end;
    end;
////
    exit;
  end;

  ErMessage:='';

  if (cdsOKPERSONAL.FieldByName('status_code').AsString<>'2')
  then begin
//    cdsOKPERSONAL.FieldByName('special_code').AsString:='';
  end else begin
    if HeadBranch_<>'09006' // временно(т.е. навсегда) отключено в халке  // не связано с подтв. в ГО
    then begin

      QuantityPost_     :=-1;
      QuantityPostReal_ :=-1;

      try
  {    sql_ :=  'select ok_service.get_QuantityPost('+
        ''''+cdsOKPERSONAL.FieldByName('branch').AsString +''','+
        cdsOKPERSONAL.FieldByName('department_code').AsString +','+
        cdsOKPERSONAL.FieldByName('post_code').AsString +','+
        cdsOKPERSONAL.FieldByName('special_code').AsString +
        ') from dual'   ;
  }    sql_ :=  'select ok_service.get_QuantityPost(:p_1,:p_2,:p_3,:p_4) from dual'   ;
      QuantityPost_ := GetSQLResultpar(sql_,
        cdsOKPERSONAL.FieldByName('branch').AsString ,
        cdsOKPERSONAL.FieldByName('department_code').AsString ,
        cdsOKPERSONAL.FieldByName('post_code').AsString ,
        cdsOKPERSONAL.FieldByName('special_code').AsString
      );

  {    sql_ := 'select ok_service.get_QuantityPostReal('+
        ''''+cdsOKPERSONAL.FieldByName('branch').AsString +''','+
        cdsOKPERSONAL.FieldByName('department_code').AsString +','+
        cdsOKPERSONAL.FieldByName('post_code').AsString +','+
        cdsOKPERSONAL.FieldByName('special_code').AsString +
        ') from dual'     ;
  }    sql_ := 'select ok_service.get_QuantityPostReal(:p_1,:p_2,:p_3,:p_4) from dual'   ;

      QuantityPostReal_ := GetSQLResultpar(sql_,
        cdsOKPERSONAL.FieldByName('branch').AsString ,
        cdsOKPERSONAL.FieldByName('department_code').AsString ,
        cdsOKPERSONAL.FieldByName('post_code').AsString ,
        cdsOKPERSONAL.FieldByName('special_code').AsString
      );

      except on e:exception
        do begin
          ErMessage:= 'Указанная специализация не найдена. Операция прервана!'+#13+
          sql_+#13+e.message;
        end;
      end;

      if QuantityPost_ =-1 then
        ErMessage:= 'Указанная специализация не найдена. Операция прервана!';

      if (QuantityPostReal_ >=QuantityPost_)
      and (OldSpecial<>cdsOKPERSONAL.FieldByName('special_code').AsString)
      then begin
        ErMessage := 'В штатном расписании указано '+inttostr(QuantityPost_)+
          ' рабочих мест по указанной специализации. Фактически назначено '+
            inttostr(QuantityPostReal_)+' сотрудников. Операция прервана!';
      end;
    END;
  end;

  if ErMessage <> '' then
  begin
    ShowMessage( ErMessage);
////
    if HeadBranch_=HeadBranch_ //
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');
      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');

      try
        System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok.txt');
        System.Rewrite(text_f);

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok.txt"');
        raise;
      end;

      try
        WinExec('notepad C:\NCI Bank\OK\Temp\err_ok.txt', SW_MAXIMIZE);
      except
        showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok.txt"');
      end;
    end;
////
    exit;
  end;

   cdsOKPersonal.Post;



end;

procedure TBOKForm.actEditExecute(Sender: TObject);
begin

  if LastPanel = 'FormPanel' then
  begin
    actSaveExistExecute(Sender);
  end;

  if OptionsPanel.Visible
  then begin
    bbSaveOptionsClick(nil);
  end;

  if LastPanel = 'DetailsPanel' then
  begin
    ActDetailSaveExecute(nil);
  end;

  if LastPanel = 'IIASPanel' then
  begin
    bbSaveIIASClick(nil);
  end;

end;

procedure TBOKForm.actUnactiveExecute(Sender: TObject);
begin
  if LastPanel = 'FormPanel' then
  begin
    actDismissExecute(Sender);
  end;

end;

procedure TBOKForm.DBEd_RegionChange(Sender: TObject);
begin

  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_live').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_live').asstring:='860';

  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_birth').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_birth').asstring:='860';

  if sender.ClassType= TDBEdit
  then begin
    if tdbedit(sender).Text = ''
    then begin
      cdsSDistr_RO.Filtered := False;
    end
    else begin
      cdsSDistr_RO.Filtered := False;
      cdsSDistr_RO.Filter := 'region_id='+ cdsSRegion.FieldByName('region_id').AsString;
      cdsSDistr_RO.Filtered := True;
    end;
  end;

end;

procedure TBOKForm.actDetailsFirstExecute(Sender: TObject);
begin
//showmessage(Branch);
  PCDetails.ActivePageIndex := 0;
  CBDetails.ItemIndex := 0;
end;

procedure TBOKForm.actDetailsLastExecute(Sender: TObject);
begin
  PCDetails.ActivePageIndex := PCDetails.PageCount-2;
  CBDetails.ItemIndex := PCDetails.PageCount-2;
end;

procedure TBOKForm.actDetailsPrevExecute(Sender: TObject);
var k : integer;
begin
  if PCDetails.ActivePageIndex = 0
  then k := PCDetails.PageCount-2
  else k := PCDetails.ActivePageIndex-1;

  PCDetails.ActivePageIndex := k;
  CBDetails.ItemIndex := k;

end;

procedure TBOKForm.actDetailsNextExecute(Sender: TObject);
var k : integer;
begin

  k := PCDetails.ActivePageIndex+1;     
  if k >= PCDetails.PageCount-2 then k := 0;
  PCDetails.ActivePageIndex := k;
  CBDetails.ItemIndex := k;
//  showmessage(intToStr(k));

end;

procedure TBOKForm.CBDetailsChange(Sender: TObject);
begin
//   
    PCDetails.ActivePageIndex := StrToInt( TData(CBDetails.Items.Objects[CBDetails.ItemIndex]).Id );

end;

procedure TBOKForm.ViewRef(NumberRef : Integer);
begin

 Params.Clear;
 Params.Add('NUMBERREF='+intToStr(NumberRef));

 (Owner as TBaseForm).RunModule('TBOKRefForm',Params);

end;


procedure TBOKForm.actSSOKPenaltyExecute(Sender: TObject);
begin
  ViewRef(19);

end;

procedure TBOKForm.TabPhotoShow(Sender: TObject);
begin

  actShowPhotoExecute(sender);

end;

procedure TBOKForm.cdsOKPhotoAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsOKPhoto.MasterSource    := dsOKPersonal;
    cdsOKPhoto.IndexFieldNames := 'branch;personal_code';
    cdsOKPhoto.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.cdsOKPhotoBeforeGetRecords(Sender: TObject;
  var OwnerData: OleVariant);
begin
  OwnerData := 'WithoutBlobs';

end;

procedure TBOKForm.actPhotoInsertExecute(Sender: TObject);
begin
  cdsOKPhoto.Insert;

end;

procedure TBOKForm.actPhotoRemoveExecute(Sender: TObject);
begin

  If Application.MessageBox(PChar('Удалить фото?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
  Then Begin
    cdsOKPhoto.Delete;
  End;

end;

procedure TBOKForm.actPhotoAttachExecute(Sender: TObject);
begin
  with TOpenDialog.Create(Self) do
  try
    Title := actPhotoAttach.Hint;
    Filter := GraphicFilter(TJPEGImage);
    if Execute then
    begin
      if not (cdsOKPhoto.State in dsEditModes) then
        cdsOKPhoto.Edit;
      (cdsOKPhoto.FieldByName('photo') as TBlobField).LoadFromFile(FileName);
       imgPreview.Picture.LoadFromFile(FileName);
    end;
  finally
    Free;
  end;


end;

procedure TBOKForm.actPhotoActualSizeExecute(Sender: TObject);
begin
  actPhotoActualSize.Checked := not actPhotoActualSize.Checked;

end;

procedure TBOKForm.actPhotoSaveExecute(Sender: TObject);
begin
  cdsOKPhoto.Post;
  imgPreview.picture.Graphic := nil;

end;

procedure TBOKForm.dsOKPhotoDataChange(Sender: TObject; Field: TField);
begin
  if Assigned(Field) then
    if Field.FieldName <> 'photo' then
      Exit;
  with imgSignature.Picture, cdsOKPhoto do
  begin
    Graphic := nil;
    if FieldByName('photo').Value <> '' then
    begin
      Graphic := TJPEGImage.Create;
      Graphic.Assign(FieldByName('photo'));
      if actPhotoActualSize.Checked then
      begin
        ScrollBox.HorzScrollBar.Position := 0;
        ScrollBox.VertScrollBar.Position := 0;
      end;
    end
    else if actPhotoActualSize.Checked then
    begin
      imgSignature.Width := 0;
      imgSignature.Height := 0;
    end;
  end;

end;

procedure TBOKForm.actAnketaExecute(Sender: TObject);
var App:      Variant;
    i,k:      integer;
  Text_, Text2, Text3,Text4,Text5,Text6,Text7,Text8,Text9,Text10: string;
  Text11, Text12, Text13,Text14,Text15,Text16, Text16a, Text16b: string;
  Text16i, Text16j, Text16h,   text16c,  text16d,  text16e,  text16f,  text16g  : string;
  Text17,Text18,Text19,Text20,Text21: string;
  file_name_, sql_, where_pers, where_pers_a : string;
  Save_Cursor:TCursor;
begin

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }
                                   // час стекла - песочные часы
 TRY
    { Do some lengthy operation }

  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // не связано с подтв. в ГО
  then begin
    App := PrepareOle( 'pril01_kb.doc' ,'Word.Application');
    file_name_:= 'pril01_kb.doc';
  end else begin
    App := PrepareOle( 'pril01_new.doc' ,'Word.Application');
    file_name_:= 'pril01_new.doc';
  end;

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\'+file_name_+
      #10#13+ ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+
      #10#13+'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;

  try
// ЭТО РАБОТАЕТ !!!!

    App.Selection.Find.Execute('<INN>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('inn').AsString, 2);
    App.Selection.Find.Execute('<PASS_SERIYA>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('PASS_SERIYA').AsString, 2);
    App.Selection.Find.Execute('<PASS_NUM>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('PASS_NUM').AsString, 2);
    App.Selection.Find.Execute('<PASS_DATE>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('PASS_DATE').AsString, 2);
    App.Selection.Find.Execute('<PASS_REG>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('PASS_REG').AsString, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESS_REGION_ID_SHOW').AsString+' '+
              cdsOKPersonal.FieldByName('HOME_ADDRESS_DISTR_SHOW').AsString;
    App.Selection.Find.Execute('<KB_HOME_ADDRESS>', false, false, false, false, false,
           true, 1, false, text21, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESS').AsString; // ok_personal.home_address
    App.Selection.Find.Execute('<HOME_ADDRESS>', false, false, false, false, false,
           true, 1, false, text21, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_REGION_ID_SHOW').AsString+ ' ' +
              cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_DISTR_SHOW').AsString;
    App.Selection.Find.Execute('<KB_HOME_ADDRESSFACT>', false, false, false, false, false,
           true, 1, false, text21, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESSFACT').AsString; // ok_personal.home_address
    App.Selection.Find.Execute('<HOME_ADDRESSFACT>', false, false, false, false, false,
           true, 1, false, text21, 2);



    App.Selection.Find.Execute('<FAMILY1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('family').AsString, 2);

    App.Selection.Find.Execute('<NAME1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('First_Name').AsString, 2);

    App.Selection.Find.Execute('<PATRONYMIC1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('Patronymic').AsString, 2);

    text21 := cdsOKPersonal.FieldByName('home_address').AsString; // ok_personal.home_address
    App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
           true, 1, false, text21, 2);

//    where_pers := ' WHERE branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                  ' AND personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
//    where_pers_a := ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                    ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers := ' WHERE branch=:p_1'+
                  ' AND personal_code=:p_2' ;
    where_pers_a := ' WHERE a.branch=:p_1'+
                    ' AND a.personal_code=:p_2' ;
    TRY
    sql_ := SQL_OKPhoto+where_pers+     ' and (priznak is null or priznak=:p_3)';

    try

      cdsOKPhoto.close;
      with cdsOKPhoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
      LoadData(cdsOKPhoto, sql_);

      if fileexists('C:\NCI Bank\Ok\Temp\photo.jpg')
      then deletefile('C:\NCI Bank\Ok\Temp\photo.jpg');

      if not cdsOKPhoto.FieldByName('photo').IsNull
      then begin
//        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
  //      App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', false,true ,400,0);
        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
        App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', false,true  ,1,1);
        cdsOKPhoto.Close;
      end else begin
        cdsOKPhoto.Close;
      end;
    except
    end;

//text2
  text2 := '';
  sql_:= 'SELECT change_date,change_motive '+
                         ' FROM ok_change_fio'+
                           where_pers+' order by change_date' ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text2 = ''
    then Text2:= cdsTempSource.fieldbyname('change_date').asstring+' йил '+cdsTempSource.fieldbyname('change_motive').asstring
    else Text2:= text2+#13+cdsTempSource.fieldbyname('change_date').asstring+' йил '+cdsTempSource.fieldbyname('change_motive').asstring;

    cdsTempSource.next;

  End;
  if text2 = '' then text2 := 'узгармаган';
  App.Selection.Find.Execute('<TEXT2>', false, false, false, false, false,
           true, 1, false, text2, 2);

//text3
//  text3 := cdsOKPersonal.FieldByName('birthday').AsString;
  text3 := cdsOKPersonal.FieldByName('birthday').AsString+' йил ';

  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    text3 := text3 +' '+cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
//    sql_:='SELECT region_nam '+
//                         ' FROM s_region'+
//                         ' where region_id='''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,'SELECT region_nam '+
                         ' FROM s_region'+
                         ' where region_id=:p_1', True);
    text3 := text3 + ' '+cdsTempSource.FieldByName('region_nam').AsString;

//    sql_:='SELECT distr_name '+
//                         ' FROM s_distr'+
//                         ' where distr='''+cdsOKPersonal.FieldByName('distr').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,'SELECT distr_name '+
                         ' FROM s_distr'+
                         ' where distr=:p_1', True);
    text3 := text3 + ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;

    App.Selection.Find.Execute('<TEXT3>', false, false, false, false, false,
           true, 1, false, text3, 2);


//text4
  text4 := '';
//  sql_:='SELECT nationality_name '+
//                         ' FROM ss_ok_nationality'+
//                         ' where nationality_code='+cdsOKPersonal.FieldByName('nationality_code').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('nationality_code').AsString;
      end;
  LoadData(cdsTempSource,'SELECT nationality_name '+
                         ' FROM ss_ok_nationality'+
                         ' where nationality_code=:p_1' , True);

  text4 := cdsTempSource.FieldByName('nationality_name').AsString;

  App.Selection.Find.Execute('<TEXT4>', false, false, false, false, false,
           true, 1, false, text4, 2);


//text5 text17, text18
  text5  := '';
  text17 := '';
  text18 := '';
  sql_:= 'select b.party_name, party_outdate,out_party, '+
                ' punishment_date||'' ''||punishment_motive text18'+
                ' from ok_party a, ss_ok_party b'+
                  where_pers_a +
//                ' and a.party_outdate is null'+
                ' and a.party_code = b.party_code'+
                ' order by a.party_date'  ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);
// ||'' йил ''||
  While not cdsTempSource.Eof do
  Begin
    if text5 = ''
    then Text5:= cdsTempSource.fieldbyname('party_name').asstring
    else Text5:= text5+' '+cdsTempSource.fieldbyname('party_name').asstring;

    text_:='';
    if cdsTempSource.fieldbyname('party_outdate').asstring<>''
    then
      text_:= cdsTempSource.fieldbyname('party_outdate').asstring+' йил '+
                  cdsTempSource.fieldbyname('out_party').asstring;
    if text17 = ''
    then Text17:= text_
    else Text17:= text17+#13+text_;

    if text18 = ''
    then Text18:= cdsTempSource.fieldbyname('text18').asstring
    else Text18:= text18+#13+cdsTempSource.fieldbyname('text18').asstring;

    cdsTempSource.next;

  End;

  if text5 = ''
  then Text5:= 'партия аъзоси эмас';

  App.Selection.Find.Execute('<TEXT5>', false, false, false, false, false,
           true, 1, false, text5, 2);

  App.Selection.Find.Execute('<TEXT17>', false, false, false, false, false,
           true, 1, false, text17, 2);

  App.Selection.Find.Execute('<TEXT18>', false, false, false, false, false,
           true, 1, false, text18, 2);


//text6
  text6 := '';
  sql_:='select substr(a.end_date||'' йил ''|| b.institution_name||'',  № ''|| a.diplom_num||'', ''||'+
                ' c.qualification_name||'', ''|| a.profession_personal,1,250) all_data'+
                ' from ok_education a, ss_ok_institution b, ss_ok_qualification c'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and a.qualification_code = c.qualification_code'+
                ' order by a.end_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  k:=1;
  While not cdsTempSource.Eof do
  Begin
    Text6:= cdsTempSource.fieldbyname('all_data').asstring;
    App.Selection.Find.Execute('<TEXT6'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text6, 2);
    inc(k);
    cdsTempSource.next;
  End;

  for i:= k to 6
  do begin
      App.Selection.Find.Execute('<TEXT6'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;

//text7
  text7 := '';
// награды
  sql_:='select award_date||'' йил ''||award_info all_data'+
                ' from ok_award '+
                  where_pers +
                ' order by award_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text7 = ''
    then Text7:= cdsTempSource.fieldbyname('all_data').asstring
    else Text7:= text7+' ; '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

// ученые степени
   sql_:='select a.degree_date||'' йил ''||b.degree_name all_data'+
                ' from ok_degree a, ss_ok_degree b'+
                  where_pers_a +
                ' and a.degree_code= b.degree_code'+
                ' order by a.degree_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text7 = ''
    then Text7:= cdsTempSource.fieldbyname('all_data').asstring
    else Text7:= text7+' ; '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//
    if text7 = ''
    then Text7:= 'илмий даражаси йук';
  App.Selection.Find.Execute('<TEXT7>', false, false, false, false, false,
           true, 1, false, text7, 2);

//text8
  text8 := '';
//OK_SCIENTIFIC
  sql_:='select scientific_date||'' йил ''||scientific_info all_data'+
                ' from ok_scientific'+
                  where_pers +
                ' order by scientific_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    if text8 = ''
    then Text8:= cdsTempSource.fieldbyname('all_data').asstring
    else Text8:= text8+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

    if text8 = ''
    then Text8:= 'илмий ишлари йук';
  App.Selection.Find.Execute('<TEXT8>', false, false, false, false, false,
           true, 1, false, text8, 2);

//text9
  text9 := '';
  sql_:='select voyage_date, voyage_land, voyage_info'+
                ' from ok_voyage'+
                  where_pers +
                ' order by voyage_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    text_:='';
    if cdsTempSource.fieldbyname('voyage_date').asstring<>''
    then text_:= cdsTempSource.fieldbyname('voyage_date').asstring+' йил '+
                 cdsTempSource.fieldbyname('voyage_land').asstring+' '+
                 cdsTempSource.fieldbyname('voyage_info').asstring;

    if text9 = ''
    then Text9:= text_
    else Text9:= text9+'; '+text_;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT9>', false, false, false, false, false,
           true, 1, false, copy(text9,1,250) , 2);

//text10
  text10 := '';
  sql_:='select b.language_name||'' - ''||c.level_language_name all_data'+
                ' from ok_language a, ss_ok_language b, ss_ok_level_language c'+
                  where_pers_a +
                ' and a.language_code= b.language_code'+
                ' and a.level_code= c.level_language_code'+
                ' order by a.language_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text10 = ''
    then Text10:= cdsTempSource.fieldbyname('all_data').asstring
    else Text10:= text10+'                                 '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//showmessage('text10 '+text10);
  App.Selection.Find.Execute('<TEXT10>', false, false, false, false, false,
           true, 1, false, text10, 2);


//text11
  text11 := '';
  k:=11;
  // тут
  sql_:='select b.relation_name,a.RELATION_FAMILY	||'' ''||a.RELATION_NAME ||'' ''||'+
                ' a.RELATION_PATRONYMIC,'+
                ' a.RELATION_BIRTHDAY||'' йил ''||'+
                 'decode(COD_STR_BIRTH,null,nvl(COD_STR_BIRTH_PRIM,'' ''),ok_service.GET_S_STR(COD_STR_BIRTH))||'' ''||'+
                 'decode(COD_OBL_birth,null,nvl(COD_OBL_BIRTH_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_birth))||'' ''||'+
                 'decode(COD_CITY_birth,null,nvl(COD_CITY_BIRTH_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY_birth))'+
//                 '||'' ''||nvl(a.RELATION_BIRTHPLACE,'' ''),'+
                 ','+
                ' nvl(a.RELATION_OFFICE,'' '')||'' ''||nvl(a.RELATION_POST,'' '') ,'+
                 'decode(COD_STR_LIVE,null,nvl(COD_STR_LIVE_PRIM,'' ''),ok_service.GET_S_STR(COD_STR_LIVE))||'' ''||'+
                 'decode(COD_OBL_LIVE,null,nvl(COD_OBL_LIVE_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_LIVE))||'' ''||'+
                 'decode(COD_CITY,null,nvl(COD_CITY_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY))||'' ''||'+
                'nvl(a.RELATION_HOME_ADDRESS,'' '')'+
                ' from ok_relation a, ss_ok_relation b'+
                  where_pers_a +
                ' and a.relation_code=b.relation_code'+
                ' order by a.relation_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text11:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;
      App.Selection.Find.Execute('<TEXT11'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text11, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 114
  do begin
      App.Selection.Find.Execute('<TEXT11'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;
//text11:=copy(text11,1,255);
//showmessage('text11 '+text11);



//text12
  text12 := '';
  k:=11;
  sql_:='select IN_OFFICE_DATE ||'' й.'' IN_OFFICE_DATE_,'+
        ' OUT_OFFICE_DATE ||'' й.'' OUT_OFFICE_DATE_,'+
        ' substr(OFFICE_NAME,1,250) OFFICE_NAME_,'+
        ' substr(ESTABLISHED_DEPARTMENT,1,250) ESTABLISHED_DEPARTMENT_,'+
        ' substr(ESTABLISHED_POST,1,250) ESTABLISHED_POST_, OFFICE_ADDRESS'+
        ' from ok_period '+
        where_pers+' order by in_office_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 5
    do begin
      Text12 := cdsTempSource.fields[i].asstring;
      App.Selection.Find.Execute('<TEXT12'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text12, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 136
  do begin
      App.Selection.Find.Execute('<TEXT12'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;




//text13
  text13 := '';
  sql_:='select RISE_DATE_YEAR,'+
        'RISE_INFO '+
        ' from ok_rise '+
        where_pers+' order by rise_date_year';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    text_:='';

    if cdsTempSource.fieldbyname('RISE_DATE_YEAR').asstring<>''
    then text_:= cdsTempSource.fieldbyname('RISE_DATE_YEAR').asstring+' йил '+
                 cdsTempSource.fieldbyname('RISE_INFO').asstring;

    cdsTempSource.next;

  End;
  // только последнее повышение квалификации
  Text13:= text_;

//showmessage('text13 '+text13);
  App.Selection.Find.Execute('<TEXT13>', false, false, false, false, false,
           true, 1, false, text13, 2);



//text14
  text14 := '';
  k:=11;
  sql_:='select b.ELECTION_ADDRESS,b.ELECTION_NAME,'+
        'a.ELECTION_POST ,a.ELECTION_DATE_BEGIN,a.ELECTION_DATE_END '+
        ' from ok_election a, ss_ok_election b'+
        where_pers+
        ' and a.election_code=b.election_code'+
        ' and b.state_notes='+#39+'A'+#39+
        ' order by election_date_begin';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text14 := cdsTempSource.fields[i].asstring;
      App.Selection.Find.Execute('<TEXT14'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text14, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 30
  do begin
      App.Selection.Find.Execute('<TEXT14'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;

  if text14=''
  then begin
      App.Selection.Find.Execute('<TEXT14>', false, false, false, false, false,
            true, 1, false, 'катнашмаган', 2);
  end else begin
      App.Selection.Find.Execute('<TEXT14>', false, false, false, false, false,
            true, 1, false, ' ', 2);
  end;


//text15
  text15 := ''; // Гос премии ok_premium
//PREMIUM_DATE 	DATE not null, --Дата получения премии	Вводится с клавиатуры, невидимое поле, обязательное для заполнения
//PREMIUM_NAME	VARCHAR2(200) not null, --Наименование премии	Вводится с клавиатуры, невидимое поле, обязательное для заполнения
  sql_:='select premium_date, premium_name '+
                ' from ok_premium'+
                  where_pers +
                ' order by premium_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    text_:='';
    if cdsTempSource.fieldbyname('premium_date').asstring<>''
    then text_ := cdsTempSource.fieldbyname('premium_date').asstring+' йил '+
                  cdsTempSource.fieldbyname('premium_name').asstring;

    if text15 = ''
    then Text15:= text_
    else Text15:= text15+' ; '+text_;

    cdsTempSource.next;
  End;

  if text15 = ''
  then Text15:= 'мукофотломнаган';

  App.Selection.Find.Execute('<TEXT15>', false, false, false, false, false,
           true, 1, false, text15, 2);


  text16 := '';
  text16a := '';
  text16b := '';
  text16c := '';
  text16d := '';
  text16e := '';
  text16f := '';
  text16g := '';
  sql_:= 'select ok_service.get_staffname(a.staff_code) staff_show,'+
         ' ok_service.get_typeforcename(a.type_force_code) type_force_show, '+
         ' ok_service.get_categoryarmyname(a.CATEGORY_ARMY_CODE) CATEGORY_ARMY,'+
         ' a.SPECREG_NUMBER, a.NUMBER_VUS, b.fitness_army_type, a.NAME_ARMY_OFFICE,'+
         ' ok_service.get_armytype(a.army_code) army_type, '+
         ' ok_service.get_militaryrankname(a.military_rank_code) MILITARY_RANK, '+
         ' ok_service.get_armygroupname(a.army_group_code) ARMY_GROUP'+
                ' from ok_army a, ss_ok_fitness_army b'+
                 where_pers_a +
                ' and a.fitness_army_code= b.fitness_army_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text16a := cdsTempSource.fieldbyname('staff_show').asstring ;
  text16b := cdsTempSource.fieldbyname('type_force_show').asstring ;

  Text16c := cdsTempSource.fieldbyname('CATEGORY_ARMY').asstring ;
  Text16d := cdsTempSource.fieldbyname('SPECREG_NUMBER').asstring ;
  Text16e := cdsTempSource.fieldbyname('NUMBER_VUS').asstring  ;
  Text16f := cdsTempSource.fieldbyname('fitness_army_type').asstring ;
  Text16g := cdsTempSource.fieldbyname('NAME_ARMY_OFFICE').asstring ;

  text16i := cdsTempSource.fieldbyname('army_type').asstring ;
  Text16j := cdsTempSource.fieldbyname('MILITARY_RANK').asstring  ;
  Text16h := cdsTempSource.fieldbyname('ARMY_GROUP').asstring ;

  Text16 :=  Text16j+' '+text16i; //  MILITARY_RANK   army_type


//text16
  // группа учета, категория учета,
//ARMY_GROUP_CODE
//CATEGORY_ARMY_CODE
//MILITARY_RANK_CODE
//STAFF_CODE
//TYPE_FORCE_CODE

  if text16=''
  then begin
    text16 :='муносабати йук';
  end;

  App.Selection.Find.Execute('<TEXT16>', false, false, false, false, false,
           true, 1, false, text16, 2);
  App.Selection.Find.Execute('<TEXT16A>', false, false, false, false, false,
           true, 1, false, text16a, 2);
  App.Selection.Find.Execute('<TEXT16B>', false, false, false, false, false,
           true, 1, false, text16b, 2);

  App.Selection.Find.Execute('<TEXT16C>', false, false, false, false, false,
           true, 1, false, text16c, 2);
  App.Selection.Find.Execute('<TEXT16D>', false, false, false, false, false,
           true, 1, false, text16d, 2);
  App.Selection.Find.Execute('<TEXT16E>', false, false, false, false, false,
           true, 1, false, text16e, 2);
  App.Selection.Find.Execute('<TEXT16F>', false, false, false, false, false,
           true, 1, false, text16f, 2);
  App.Selection.Find.Execute('<TEXT16G>', false, false, false, false, false,
           true, 1, false, text16g, 2);

  App.Selection.Find.Execute('<TEXT16H>', false, false, false, false, false,
           true, 1, false, text16h, 2);
  App.Selection.Find.Execute('<TEXT16I>', false, false, false, false, false,
           true, 1, false, text16i, 2);
  App.Selection.Find.Execute('<TEXT16J>', false, false, false, false, false,
           true, 1, false, text16j, 2);

//text17 см пункт 5 партийность
//text18 см пункт 5 партийность

//text19
  text19 := '';
//CONVICTIONS_DATE 	DATE not null, --Дата привлечения	Вводится с клавиатуры, видимое поле, обязательное для заполнения
//CONVICTIONS_MOTIVE	VARCHAR2(200) not null, --Причина привлечения	Вводится с клавиатуры, видимое поле, обязательное для заполнения
  sql_:='select CONVICTIONS_date||'' ''||CONVICTIONS_MOTIVE all_data'+
                ' from ok_convictions'+
                  where_pers +
                ' order by CONVICTIONS_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text19 = ''
    then Text19:= cdsTempSource.fieldbyname('all_data').asstring
    else Text19:= text19+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text19 = ''
  then Text19:= 'судланмаган';

  App.Selection.Find.Execute('<TEXT19>', false, false, false, false, false,
           true, 1, false, text19, 2);


//text20
  text20 := ''; // ss_ok_FAMILY_STATUS.FAMILY_STATUS_CODE
//  sql_:='select family_status_name all_data'+
//                ' from ss_ok_FAMILY_STATUS'+
//                ' where FAMILY_STATUS_CODE='+ cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      end;
  LoadData(cdsTempSource,'select family_status_name all_data'+
                ' from ss_ok_FAMILY_STATUS'+
                ' where FAMILY_STATUS_CODE=:p_1', True);
  EXCEPT
    raise;
  END;
  Text20:= cdsTempSource.fieldbyname('all_data').asstring;

//showmessage('text20 '+text20);
  App.Selection.Find.Execute('<TEXT20>', false, false, false, false, false,
           true, 1, false, text20, 2);


//text21 см text1 (где ФИО)

// до этой команды приложение word работает в фоновом режиме
  App.Visible:=true;

//  App.Application.Quit; -- выход из ворда совсем
 except
  App.Application.Quit(false); // выход из ворда совсем без сохранения
/////
  raise;
//  App.Application.Quit(true); // выход из ворда с сохранением
 end;

  App:=unassigned;
 FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

function TBOKForm.PrepareOle(FileName: String; TypeApp: String): Variant;
var fname, curdir,errmsg_:   String;
    SaveCursor:              TCursor;
    fh1, fh2:                Integer;
    iFileLength, iBytesRead: Integer;
    Buffer:                  PChar;
    App:                     Variant;
begin
  Result := null;
  SaveCursor := 0;

  fname      := 'C:\NCI Bank\Ok\Temp\'+FileName;

  curdir     := 'C:\NCI Bank\Ok\TEMPLATES';
  If not DirectoryExists('C:\NCI Bank\Ok\TEMPLATES\') Then ForceDirectories('C:\NCI Bank\Ok\TEMPLATES\');
  If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');

  Buffer     := nil;
  iBytesRead := 0;

  If not FileExists(curdir+'\'+FileName) Then
    Begin
      errmsg_ := 'Не найден файл '+curdir+'\'+FileName;
      curdir:=GetCurrentDir_templates;
      If not FileExists(curdir+'\'+FileName) Then
        Begin
          curdir:=GetCurrentDir_templates;
          ShowMessage(errmsg_+#13+'Не найден файл '+curdir+'\'+FileName);
          errmsg_ := 'Не найден файл '+curdir+'\'+FileName;
          Exit;
        End;
    End;


  fh1 := FileOpen(curdir+'\'+FileName, fmOpenRead);

  If fh1 <> -1 Then
    Begin
      iFileLength := FileSeek(fh1,0,2);
      FileSeek(fh1,0,0);
      Buffer     := PChar(AllocMem(iFileLength + 1));
      iBytesRead := FileRead(fh1, Buffer^, iFileLength);
      FileClose(fh1);
    End;

  If Buffer <> nil Then
    Begin
      fh2 := FileCreate(fname);
      If fh2 = -1 Then
        Begin
          FreeMem(Buffer);
          Screen.Cursor := SaveCursor;
          Showmessage('Ошибка при создании файла '+fname);
          Exit;
        End
      Else
        Begin
          FileWrite(fh2,Buffer^,iBytesRead);
          FileClose(fh2);
          FreeMem(Buffer);
          Try
            App := CreateOleObject(TypeApp);
          Except
            Showmessage('Ошибка при создании OLE-объекта('+TypeApp+')!');
            Exit;
          End;
          Try
            If TypeApp = 'Word.Application' Then
              Begin
                App.Documents.Open(fname,
                                   EmptyParam, EmptyParam, EmptyParam,
                                   EmptyParam, EmptyParam, EmptyParam,
                                   EmptyParam, EmptyParam, EmptyParam);
                App.Selection.HomeKey(6);
                App.Selection.Find.ClearFormatting;
              End
            Else
              Begin
                App.Workbooks.Open(fname);
              End;
          Except
            on E: Exception do
              begin
                Showmessage('Ошибка при открытии '+TypeApp+'!'+#13#10+E.Message);
                If not VarIsNull(App) Then Begin App.Save;App.Workbooks.Close; End;
                App := null;
              end;
          End;
        End;
    End;
  Result := App;
end;


procedure TBOKForm.actLichKartaAExecute(Sender: TObject);
var App:      Variant;
  text_,Text2, Text3, Text4, Text5, Text6, Text6a, Text6b, Text6c : string;
  Text7, Text17,Text7a, Text7b, Text8, Text8a, Text9, Text9a : string;
  Text10,  Text11, Text11a, Text11b, Text11c  : string;
// Text10a,
  Text12, Text12a, Text12b, Text12c, Text12d, Text12e, Text12f,  Text12g : string;
//  text16a,text16b,  text16c,  text16d,  text16e,  text16f,  text16g,
  Text13 : string;
//   Text14, Text15 : string;
  file_name_, sql_,where_pers, where_pers_a,BIRTHPLACE_,stag_ : string;
  Save_Cursor:TCursor;
  k,i : integer;
  enter_,s_ ,s2_:string;
begin

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }
//    where_pers := ' WHERE branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                  ' AND personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
//    where_pers_a := ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                    ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers := ' WHERE branch=:p_1'+
                  ' AND personal_code=:p_2' ;
    where_pers_a := ' WHERE a.branch=:p_1'+
                    ' AND a.personal_code=:p_2' ;

 TRY
    { Do some lengthy operation }

  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049')   // не связано с подтв. в ГО
  then begin
    App := PrepareOle( 'pril02a_kb.doc' ,'Word.Application');
    file_name_:= 'pril02a_kb.doc';
  end else begin
    App := PrepareOle( 'pril02a.doc' ,'Word.Application');
    file_name_:= 'pril02a.doc';
  end;

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\'+file_name_ +#10#13+
           ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+#10#13+
    'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;

  try
// ЭТО РАБОТАЕТ !!!!
    enter_:=#13;
//////////
// родственники
    sql_:= 'select ok_service.get_relationname(a.relation_code)||'': ''||RELATION_FAMILY||'' ''||RELATION_NAME||'' ''||RELATION_PATRONYMIC||'' ''||RELATION_BIRTHDAY rel '+
                ' from ok_relation a'+
                  where_pers_a +
                ' order by a.relation_code'  ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    s_:='';
    s2_:='';
    While not cdsTempSource.Eof do
    Begin
      if (length(s_+enter_+cdsTempSource.fieldbyname('rel').asstring )<255)
      and (s2_='')
      then begin
        if s_=''
        then s_:= cdsTempSource.fieldbyname('rel').asstring
        else s_:=s_+enter_+cdsTempSource.fieldbyname('rel').asstring;
      end else begin
        if s2_=''
        then s2_:= cdsTempSource.fieldbyname('rel').asstring
        else s2_:=s2_+enter_+cdsTempSource.fieldbyname('rel').asstring;

      end;
      cdsTempSource.Next;
    end;
    App.Selection.Find.Execute('<R>', false, false, false, false, false,
           true, 1, false, copy(s_,1,255), 2);
    App.Selection.Find.Execute('<R2>', false, false, false, false, false,
           true, 1, false, copy(s2_,1,255), 2);
////////////
// образование
//    sql_:= 'select ok_service.get_EDUCATIONTITLEname('+cdsOKPersonal.FieldByName('EDUCATION_TITLE_code').asstring +') rel from dual ' ;
    sql_:= 'select ok_service.get_EDUCATIONTITLEname(:p_1) rel from dual ' ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('EDUCATION_TITLE_code').asstring;
      end;
    LoadData(cdsTempSource,sql_, True);
//    SS_OK_EDUCATION_TITLE
    App.Selection.Find.Execute('<R3>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('rel').AsString, 2);
/////////////
    App.Selection.Find.Execute('<FAMILY1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('family').AsString, 2);

    App.Selection.Find.Execute('<NAME1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('First_Name').AsString, 2);

    App.Selection.Find.Execute('<PATRONYMIC1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('Patronymic').AsString, 2);

    App.Selection.Find.Execute('<YEAR>', false, false, false, false, false,
           true, 1, false, copy(cdsOKPersonal.FieldByName('BIRTHDAY').AsString, 7, 4), 2);
    App.Selection.Find.Execute('<MONTH>', false, false, false, false, false,
           true, 1, false,ToMonthName( copy(cdsOKPersonal.FieldByName('BIRTHDAY').AsString, 4, 2)), 2);
    App.Selection.Find.Execute('<DAY>', false, false, false, false, false,
           true, 1, false, copy(cdsOKPersonal.FieldByName('BIRTHDAY').AsString, 1, 2), 2);


// Стаж работы по - текущий день bankdate
//        sql_:='select ok_service.get_work_period('''+branch+''','+
//            cdsokpersonal.fieldbyname('personal_code').asstring+','+
//            'to_date('''+bankdate+''',''dd.mm.yyyy'') ) from dual';
        sql_:='select ok_service.get_work_period(:p_1,:p_2,'+
            'to_date(:p_3,:p_4) ) from dual';
        try
          stag_:= getsqlresultPAR(sql_, curbranch, cdsokpersonal.fieldbyname('personal_code').asstring,
            bankdate , 'dd.mm.yyyy'
          );
        except on e:exception
          do begin
            showmessage(sql_+#13+e.message);
            SelectNext(ActiveControl, FALSe, True);
          end;
        end;

    App.Selection.Find.Execute('<STAG>', false, false, false, false, false,
           true, 1, false, stag_ , 2);

    if cdsOKPersonal.FieldByName('profmember').AsString='1'
    then begin
      cdsSSOKProfmember_SET.Last;
    end else begin
      cdsSSOKProfmember_SET.first;
    end;
    App.Selection.Find.Execute('<PROFSO>', false, false, false, false, false,
           true, 1, false, cdsSSOKProfmember_SET.fieldbyname('PROFMEMBER_NAME').asstring, 2);

    BIRTHPLACE_:=' ';
  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    BIRTHPLACE_:= BIRTHPLACE_+' '+cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
//    sql_:='SELECT region_nam  FROM s_region'+
//                         ' where region_id='''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
    sql_:='SELECT region_nam  FROM s_region'+
                         ' where region_id=:p_1';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);

    BIRTHPLACE_:= BIRTHPLACE_+ ' '+cdsTempSource.FieldByName('region_nam').AsString;

//    sql_:='SELECT distr_name  FROM s_distr'+
//                         ' where distr='''+cdsOKPersonal.FieldByName('distr').AsString+'''';
    sql_:='SELECT distr_name FROM s_distr'+
                         ' where distr=:p_1';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    BIRTHPLACE_:= BIRTHPLACE_+ ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;

    App.Selection.Find.Execute('<BIRTHPLACE>', false, false, false, false, false,
           true, 1, false, BIRTHPLACE_, 2);


//text5 text17, text18
  text5  := '';
  text17 := '';
  sql_:= 'select b.party_name, a.party_date '+
                ' from ok_party a, ss_ok_party b'+
                  where_pers_a +
                ' and a.party_code = b.party_code'+
                ' order by a.party_date'  ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);
// ||'' йил ''||
  While not cdsTempSource.Eof do
  Begin
    if text5 = ''
    then Text5:= cdsTempSource.fieldbyname('party_name').asstring
    else Text5:= text5+' '+cdsTempSource.fieldbyname('party_name').asstring;

    text_:='';
    if cdsTempSource.fieldbyname('party_date').asstring<>''
    then
      text_:= cdsTempSource.fieldbyname('party_date').asstring;
    if text17 = ''
    then Text17:= text_
    else Text17:= text17+#13+text_;


    cdsTempSource.next;

  End;

  if text5 = ''
  then Text5:= 'партия аъзоси эмас';

  App.Selection.Find.Execute('<R5>', false, false, false, false, false,
           true, 1, false, text5, 2);

  App.Selection.Find.Execute('<R17>', false, false, false, false, false,
           true, 1, false, text17, 2);




    try
      cdsokphoto.close;
      with cdsokphoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
      LoadData(cdsOKPhoto, SQL_OKPhoto+where_pers+    ' and (priznak is null or priznak=:p_3)');
// фото
//    App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30, 90,120);
// пусть сами подбирают размер фото !!!
      if not cdsOKPhoto.FieldByName('photo').IsNull
      then begin
        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
        App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30);
        cdsOKPhoto.Close;
      end else begin
        cdsOKPhoto.Close;
      end;
    except
    end;


{
//text
  text := '';
  App.Selection.Find.Execute('<TEXT>', false, false, false, false, false,
           true, 1, false, text, 2);
}

//text2 пол
  sql_:= 'SELECT gender_name '+
                         ' FROM ss_ok_gender'+
                         ' where gender_code=:p_1'; // cdsOKPersonal.FieldByName('gender_code').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('gender_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text2:= cdsTempSource.fieldbyname('gender_name').asstring;

  App.Selection.Find.Execute('<TEXT2>', false, false, false, false, false,
           true, 1, false, text2, 2);

//text3 день рождения
  text3 := cdsOKPersonal.FieldByName('birthday').AsString;
  App.Selection.Find.Execute('<TEXT3>', false, false, false, false, false,
           true, 1, false, text3, 2);

//text4 место рождения

  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    text4 := cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
    sql_:='SELECT region_nam '+
                         ' FROM s_region'+
                         ' where region_id=:p_1'; //'''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4 := cdsTempSource.FieldByName('region_nam').AsString;

    sql_:='SELECT distr_name '+
                         ' FROM s_distr'+
                         ' where distr=:p_1'; //'''+cdsOKPersonal.FieldByName('distr').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4 := text4 + ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;

  App.Selection.Find.Execute('<TEXT4>', false, false, false, false, false,
           true, 1, false, text4, 2);

//text5 национальность
  sql_:='SELECT nationality_name '+
                         ' FROM ss_ok_nationality'+
                         ' where nationality_code=:p_1'; //+cdsOKPersonal.FieldByName('nationality_code').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('nationality_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  text5 := cdsTempSource.FieldByName('nationality_name').AsString;

  App.Selection.Find.Execute('<TEXT5>', false, false, false, false, false,
           true, 1, false, text5, 2);

//text6
//Паспорт:… <TEXT6>..№…<TEXT6A>… Дата выдачи…<TEXT6B>   выдан…<TEXT6C>
//PASS_SERIYA 	VARCHAR2(9) not null,	-- 'Серия паспорта	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
//PASS_NUM	VARCHAR2(9) not null,	-- 'Номер паспорта	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
//PASS_DATE	DATE not null,	-- 'Дата выдачи паспорта	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
//PASS_REG	VARCHAR2(200) not null,	-- 'Место выдачи паспорта	Вводится с клавиатуры, видимое поле, обязательное для заполнения'

  text6 := cdsOKPersonal.FieldByName('pass_seriya').AsString;
  App.Selection.Find.Execute('<TEXT6>', false, false, false, false, false,
           true, 1, false, text6, 2);

  text6a := cdsOKPersonal.FieldByName('pass_num').AsString;
  App.Selection.Find.Execute('<TEXT6A>', false, false, false, false, false,
           true, 1, false, text6a, 2);

  text6b := cdsOKPersonal.FieldByName('pass_date').AsString;
  App.Selection.Find.Execute('<TEXT6B>', false, false, false, false, false,
           true, 1, false, text6b, 2);

  text6c := cdsOKPersonal.FieldByName('pass_reg').AsString;
  App.Selection.Find.Execute('<TEXT6C>', false, false, false, false, false,
           true, 1, false, text6c, 2);

//text7
// Домашний адрес…<TEXT7>  Телефон…<TEXT7A>…     Табельный номер…<TEXT7B>
  text7 :=  cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_REGION_ID_SHOW').AsString+
        ' '+cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_DISTR_SHOW').AsString+
        ' '+cdsOKPersonal.FieldByName('home_address').AsString;
  App.Selection.Find.Execute('<TEXT7>', false, false, false, false, false,
           true, 1, false, text7, 2);

  text7a := cdsOKPersonal.FieldByName('telefon').AsString; // ok_personal.
  App.Selection.Find.Execute('<TEXT7A>', false, false, false, false, false,
           true, 1, false, text7a, 2);

  text7b := cdsOKPersonal.FieldByName('tabno').AsString; // ok_personal.
  App.Selection.Find.Execute('<TEXT7B>', false, false, false, false, false,
           true, 1, false, text7b, 2);

//text8
// Стаж работы с:… <TEXT8> первая дата приема на работу min(IN_OFFICE_DATE) ok_period
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,'select min(in_office_date) all_data'+
                ' from ok_period'+
                  where_pers , True);
  text8 := '';
  Text8:= cdsTempSource.fieldbyname('all_data').asstring;

//…Стаж в предприятии с …<TEXT8A>  text8 := ''; текущая дата приема max(IN_OFFICE_DATE) ok_period
// select min(appointment_date) from ok_post
// where appointment_date >= max(out_office_date) from ok_period
// первый прием после последнего увольнения)
  if text8 = ''
  then begin
    App.Selection.Find.Execute('<TEXT8>', false, false, false, false, false,
           true, 1, false, ' ', 2);
  end else begin
    App.Selection.Find.Execute('<TEXT8>', false, false, false, false, false,
           true, 1, false, text8, 2);
  end;

  sql_:='select max(out_office_date) all_data'+
                ' from ok_period'+
                  where_pers;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text8:= cdsTempSource.fieldbyname('all_data').asstring;
{
11.Последнее место работы…<TEXT11>
Должность…<TEXT11A>…дата увольнения…<TEXT11B>
Причина увольнения…<TEXT11C>
}
  if text8 <> ''
  then begin
    sql_:='select office_name, established_post'+
//        ' ok_service.get_motivname(motive_) motive_out'+
                ' from ok_period'+
                  where_pers +
                ' and TYPE_PERIOD_CODE<>:p_3' +
//                ' and out_office_date<=to_date('''+text8+''',''dd.mm.yyyy'')';
                ' and out_office_date<=to_date(:p_4,:p_5)';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftInteger,'p_3' ,ptInput);
          ParamByName('p_3').Value := 3;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := text8;
          CreateParam(ftString,'p_5' ,ptInput);
          ParamByName('p_5').Value := 'dd.mm.yyyy';
      end;
    LoadData(cdsTempSource, sql_ , True);
    Text11:= cdsTempSource.fieldbyname('office_name').asstring;
    Text11a:= cdsTempSource.fieldbyname('established_post').asstring;
    text11b := text8;
//    Text11c:= cdsTempSource.fieldbyname('motive_out').asstring;
// в пахте сказали убрать причину увольнения
// хотя в личной карточке есть это поле!!!!!!!!!!
    text11c := '';
  end else begin
    text11  := '';
    text11a := '';
    text11b := '';
    text11c := '';
  end;

  App.Selection.Find.Execute('<TEXT11>', false, false, false, false, false,
           true, 1, false, text11, 2);
  App.Selection.Find.Execute('<TEXT11A>', false, false, false, false, false,
           true, 1, false, text11a, 2);
  App.Selection.Find.Execute('<TEXT11B>', false, false, false, false, false,
           true, 1, false, text11b, 2);
  App.Selection.Find.Execute('<TEXT11C>', false, false, false, false, false,
           true, 1, false, text11c, 2);

//

  if text8 = '' then text8 := '01.01.1901';
  sql_:= 'select min(IN_OFFICE_DATE) all_data'+
                ' from ok_period'+
                  where_pers +
//                ' and IN_OFFICE_DATE >= to_date('''+text8+''',''dd.mm.yyyy'' )';
                ' and IN_OFFICE_DATE >= to_date(:p_3,:p_4 )';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := text8;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'dd.mm.yyyy';
      end;
  LoadData(cdsTempSource, sql_ , True);
//  Text8a:= cdsTempSource.fieldbyname('all_data').asstring;
  Text8a:= cdsTempSource.fieldbyname('all_data').asstring;

  App.Selection.Find.Execute('<TEXT8A>', false, false, false, false, false,
           true, 1, false, text8a, 2);


//text9
{select soe.education_name from ss_ok_education soe, ss_ok_institution soi
where soe.education_code=soi.education_code
and soi.institution_code=  text9 := '';
}
  sql_:= 'select b.institution_name||'' ''||b.institution_place,'+
                ' to_char(a.begin_date),'+
                ' DECODE (a.end_date,null, ''    '', to_char(a.end_date)),'+
                ' a.profession_personal,'+
                ' a.diplom_num,'+
                ' c.education_name'+
                ' from ok_education a, ss_ok_institution b, ss_ok_education c'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and b.education_code = c.education_code'+
                ' order by a.end_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_ , True);
{
Наименование учебного заведения и его местонахождение
 b.institution_name||'' ''||b.institution_place||'' ''||
Год поступления
' to_char(a.begin_date,''yyyy'')||'' ''||'+
Год окончания или ухода
' to_char(a.end_date,''yyyy'')||'' ''||'+
Какую специальность получил в результате окончания учебного заведения
' a.profession_personal'+
№ диплома или удостоверения
 a.diplom_num
}
  k:=11;
  While not cdsTempSource.Eof do
  Begin
    for i:=0 to 4
    do begin
      Text9a:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;

      App.Selection.Find.Execute('<'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text9a, 2);
      inc(k);
    end;
//    k:=k+4;
//    if text9a = ''
//    then Text9a:= cdsTempSource.fieldbyname('all_data').asstring
//    else Text9a:= text9a+';'+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  for i:= k to 30
  do begin
      App.Selection.Find.Execute('<'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;

  Text9:= cdsTempSource.fieldbyname('education_name').asstring;

  App.Selection.Find.Execute('<TEXT9>', false, false, false, false, false,
           true, 1, false, text9, 2);

//  App.Selection.Find.Execute('<TEXT9A>', false, false, false, false, false,
//           true, 1, false, copy(text9a,1,250), 2);

//text10
  text10 := ''; // ss_ok_FAMILY_STATUS.FAMILY_STATUS_CODE
  sql_:= 'select family_status_name all_data'+
                ' from ss_ok_FAMILY_STATUS'+
                ' where FAMILY_STATUS_CODE=:p_1'; // cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text10:= cdsTempSource.fieldbyname('all_data').asstring;

  App.Selection.Find.Execute('<TEXT10>', false, false, false, false, false,
           true, 1, false, text10, 2);


  k:=11;
  sql_:='select b.relation_name,a.RELATION_FAMILY	||'' ''||a.RELATION_NAME ||'' ''||'+
                ' a.RELATION_PATRONYMIC,a.RELATION_BIRTHDAY '+
                ' from ok_relation a, ss_ok_relation b'+
                  where_pers_a +
                ' and a.relation_code=b.relation_code'+
                ' order by a.relation_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 2
    do begin
      Text11:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;
      App.Selection.Find.Execute('<TEXT11'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text11, 2);
      inc(k);
    end;
    k:=k+2;
    cdsTempSource.next;
  End;

  for i:= k to 114
  do begin
      App.Selection.Find.Execute('<TEXT11'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;




//text11 см text8

//text12
{

ARMY_CODE 	NUMBER(1) not null, --	'Отношение к военной службе 	Выбирается из справочника SS_OK_ARMY  поле ARMY_CODE  обязательное для заполнения'
FITNESS_ARMY_CODE	NUMBER (1) not null, --	'Годность к службе	Выбирается из справочника SS_OK_Fitness_ARMY  поле fitness_ARMY_Code'
STAFF 	VARCHAR2(50) , --,--	'Вид состава	Вводится с клавиатуры, идимое поле, обязательное для заполнения'
TYPE_FORCE	VARCHAR2(50) , --,--	'Род войск	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
ARMY_GROUP	VARCHAR2(50) , --,--	'Группа учета	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
CATEGORY_ARMY	VARCHAR2(50) , --,--	'Категория учета	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
SPECIAL_ARMY 	VARCHAR2(50) , --,--	'Воинская Специальность	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
MILITARY_RANK	VARCHAR2      (50),--	'Воинское звание	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
NUMBER_VUS	VARCHAR2(50),	--'Номер военной учетной специальности (ВУС)	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
CODE_ARMY_POST	VARCHAR2(50),--	'Код должности и особые признаки военной службы	Вводится с клавиатуры, видимое поле, обязательное для заполнния'
NAME_ARMY_OFFICE	VARCHAR2(50) not null,--	'Военкомат	Вводится с клавиатуры, видимое поле, обязательное для заполнения'
SPECREG_NUMBER	VARCHAR2      (50),--	'Состоит на спецучете N	Вводится с клавиатуры, видимое поле, обязательное для заполнения'

12.Сведения о воинском учете: воинское звание…<TEXT12>
Группа учета…<TEXT12A>…Состав…<TEXT12B>
Категория учета…<TEXT12C>….Специальный учет…<TEXT12D>
ВУС…<TEXT12E>…Годность…<TEXT12F>
Рай.военкомат…<TEXT12G>
}
  text12 := '';
  text12a := '';
  text12b := '';
  text12c := '';
  text12d := '';
  text12e := '';
  text12f := '';
  text12g := '';
  sql_:= 'select ok_service.get_militaryrankname(a.military_rank_code) MILITARY_RANK,'+
         ' ok_service.get_armygroupname(a.army_group_code) ARMY_GROUP,'+
         ' ok_service.get_staffname(a.staff_code) staff,'+
         ' ok_service.get_categoryarmyname(a.CATEGORY_ARMY_CODE) CATEGORY_ARMY,'+
         ' a.SPECREG_NUMBER,'+
                ' a.NUMBER_VUS, b.fitness_army_type, a.NAME_ARMY_OFFICE'+
                ' from ok_army a, ss_ok_fitness_army b'+
                  where_pers_a +
                ' and a.fitness_army_code= b.fitness_army_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text12 := cdsTempSource.fieldbyname('MILITARY_RANK').asstring  ;
  Text12a := cdsTempSource.fieldbyname('ARMY_GROUP').asstring ;
  Text12b := cdsTempSource.fieldbyname('staff').asstring ;
  Text12c := cdsTempSource.fieldbyname('CATEGORY_ARMY').asstring ;
  Text12d := cdsTempSource.fieldbyname('SPECREG_NUMBER').asstring ;
  Text12e := cdsTempSource.fieldbyname('NUMBER_VUS').asstring  ;
  Text12f := cdsTempSource.fieldbyname('fitness_army_type').asstring ;
  Text12g := cdsTempSource.fieldbyname('NAME_ARMY_OFFICE').asstring ;

  App.Selection.Find.Execute('<TEXT12>', false, false, false, false, false,
           true, 1, false, text12, 2);
  App.Selection.Find.Execute('<TEXT12A>', false, false, false, false, false,
           true, 1, false, text12a, 2);
  App.Selection.Find.Execute('<TEXT12B>', false, false, false, false, false,
           true, 1, false, text12b, 2);
  App.Selection.Find.Execute('<TEXT12C>', false, false, false, false, false,
           true, 1, false, text12c, 2);
  App.Selection.Find.Execute('<TEXT12D>', false, false, false, false, false,
           true, 1, false, text12d, 2);
  App.Selection.Find.Execute('<TEXT12E>', false, false, false, false, false,
           true, 1, false, text12e, 2);
  App.Selection.Find.Execute('<TEXT12F>', false, false, false, false, false,
           true, 1, false, text12f, 2);
  App.Selection.Find.Execute('<TEXT12G>', false, false, false, false, false,
           true, 1, false, text12g, 2);

//text13
  text13 := DateToStr(Date);
  App.Selection.Find.Execute('<TEXT13>', false, false, false, false, false,
           true, 1, false, text13 , 2);
{
//text14
  text14 := '';

APPOINTMENT_DATE 	DATE not null, -- 'Дата с какого числа перемещен в должности	Вводится с клавиатуры, видимое поле, обязательное для заполнения
APPOINTMENT_MOTIVE	VARCHAR2(100) not null, -- 'Причина перемещения	Вводится с клавиатуры, видимое поле, обязательное для заполнения
DEPARTMENT_CODE 	NUMBER (2) not null, -- 'Наименование отдела куда перемещен	Выбирается из справочника SS_OK_DEPARTAMENT поле DEPARTAMENT_CODE  в зависимости от типа отдела . видимое поле, обязательное для заполнения
POST_CODE	NUMBER (3) not null, -- 'На какую должность перемещен	Выбирается из справочника SS_OK_POST поле POST_CODE, видимое поле, обязательное для заполнения
GRADE 	NUMBER (2) not null, -- 'Разряд 	Вводится с клавиатуры, невидимое поле, необязательное для заполнения
SALARY_FACT  	NUMBER(10,2)  not null, -- 'Должностной оклад	Вводится с клавиатуры, видимое поле, обязательное для заполнения
RAISE_PERSONAL	NUMBER(10,2) not null, -- 'Персональная надбавка 	Вводится с клавиатуры, видимое поле, обязательное для заполнения
RAISE_ADD 	NUMBER(10,2) not null, -- 'Другая надбавка	Вводится с клавиатуры, видимое поле, обязательное для заполнения
BASIS_NUM 	NUMBER (3) not null, -- 'Номер приказа/основания	Вводится с клавиатуры, видимое поле, обязательное для заполнения
BASIS_DATE	DATE not null, -- 'Дата приказа/основания	Вводится с клавиатуры, видимое поле, обязательное для заполнения
N Основание   BASIS_NUM
Подразделение    DEPARTMENT_CODE
Должность    POST_CODE
Дата       BASIS_DATE
Причина перемещения   APPOINTMENT_MOTIVE
Разряд GRADE
Надбавка (две) RAISE_PERSONAL+RAISE_ADD
Оклад   SALARY_FACT
}
//
// до этой команды приложение word работает в фоновом режиме
  App.Visible:=true;

//  App.Application.Quit; -- выход из ворда совсем
 except
  App.Application.Quit(false); // выход из ворда совсем без сохранения
//  App.Application.Quit(true); // выход из ворда с сохранением
//showmessage(sql_);
   raise;
 end;

  App:=unassigned;
 FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.dbeokRegionChange(Sender: TObject);
begin

  if  DBEokRegion.Text = ''
  then begin
    cdsSDistr_RO.Filtered := False;
  end
  else begin
    cdsSDistr_RO.Filtered := False;
    cdsSDistr_RO.Filter := 'region_id='+ cdsSRegion.FieldByName('region_id').AsString;
    cdsSDistr_RO.Filtered := True;
  end;

end;

procedure TBOKForm.cdbgOKEducationEditButtonClick(Sender: TObject);
begin

  if bokmain.BossLevel='0'
  then begin
        showmessage('Нельзя изменить: Данные доступны Только для чтения!!!');
    exit;
  end;

  If cdsOKEducation.State in dsEditModes
  Then //
  Else cdsOKEducation.Edit;

  try
//,RPad(institution_name,25,'' '') name2
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKEducation.FieldByName('education_code').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
    BOKForm.LoadData(cdsTempSource,'SELECT to_char(institution_code) id, institution_name name, INSTITUTION_PLACE'+
                                              ' FROM ss_ok_institution'+
                                              ' WHERE education_code=:p_1'+ //cdsOKEducation.FieldByName('education_code').AsString+
                                              ' AND state_notes=:p_2',True); // ''A''',True);
  except
    Showmessage('Пожалуйста, укажите Образование и только затем Учебное заведение!');
    exit;
  end;

  cdsTempSource.Edit;
  With TSelectDialog.CreateEx(Self, cdsTempSource, cdsTempSource, cdsTempSource.FindField('id').Index) do
    Try
      If ShowModal = mrOk
      Then begin
        cdsOKEducation.FieldByName('institution_code').AsString  := cdsTempSource.FieldByName('ID').AsString;
        cdsOKEducation.FieldByName('cod_vuz_prim').AsString  := cdsTempSource.FieldByName('NAME').AsString;
        if cdsOKEducation.FieldByName('education_end').AsString='1'
        then
        cdsOKEducation.FieldByName('education_city').AsString  := cdsTempSource.FieldByName('INSTITUTION_PLACE').AsString;

      end;
//      lbInstitution.Caption := cdsTempSource.FieldByName('NAME2').AsString+'*';
    Finally
      Destination.Filtered:=false;
      Free;
    End;

{пример:
procedure TBuildForm.cdbgSS_DEPPAREditButtonClick(Sender: TObject);
var cdbg: TClientDBGrid;
begin
  cdbg := Sender as TClientDBGrid;
  With TfmLargeField.Create(Self) do
    Try
      Begin
        Caption := cdbg.Columns[cdbg.SelectedIndex].Title.Caption;
        SetDep('');
        redLargeField.Clear;
        redLargeField.Text := cdbg.SelectedField.AsString;
        If ShowModal = mrOk Then
          Begin
            If cdbg.DataSource.DataSet.State <> dsEdit Then cdbg.DataSource.DataSet.Edit;
            cdbg.SelectedField.AsString := redLargeField.Text;
          End;
      End;
    Finally
      Free;
    End;
}

end;




procedure TBOKForm.actRef2Execute(Sender: TObject);
var
// n_TreeNode : TTreeNode;
  ParentNode0, ParentNode1, ParentNode2, ParentNode3, ParentNode4, ParentNode5: TTreeNode;
  i : integer;
//  q:integer;
//  key_txt,
  sql_ :string;
//  D : tdata;
begin

  actCopyPers.Checked     := False ;
  actRef.Checked     := False ;
  actRef2.Checked    := True ;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;

  actNew.Checked     := False;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  actiias.Checked := false;

  if bosslevel<>'0' then actNew.Enabled         := True ;
  actUndoChanges.Enabled := False;

  OptionsPanel.Visible := False;

  LastPanel := 'Ref2Panel';
  pcmainok.ActivePage := RefPanel_;

// здесь растет дерево BEGIN
  TreeV.Items.BeginUpdate;
  try
    for I := TreeV.Items.Count - 1 downto 0
    do begin
      TreeV.items[I].Delete;
    end;
  finally
    TreeV.Items.EndUpdate;
  end;


  TreeV.Items.BeginUpdate;
  ParentNode0 := TreeV.Items.Add(nil, FiltrLevelName );
  ParentNode0.ImageIndex := 0;
  ParentNode0.SelectedIndex := 0;
  TreeV.Items.EndUpdate;

  try
    cdsDerevo.close;
    if bosslevel='0'
    then begin

      with cdsDerevo.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := 'A';
      end;
      sql_:=SQL_Derevo+
          ' where state_notes=:p_1 '+
          ' connect by d.high_dep_code = prior d.department_code'+
          ' start with d.high_dep_code is null';
    end else begin

      with cdsDerevo.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := FiltrLevel;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
      sql_:=SQL_Derevo+
          ' where d.level_department_code=:p_1'+ //FiltrLevel+
          ' and state_notes=:p_2'+ //''A'' '+
          ' connect by d.high_dep_code = prior d.department_code'+
          ' start with d.high_dep_code is null';
    end;
    loaddata( cdsDerevo, sql_);


  except on e:exception
    do begin
      showmessage(sql_+#13+e.Message);
    end;
  end;

// ветки дерева BEGIN
  ParentNode1 :=ParentNode0;
  ParentNode2 :=ParentNode0;
  ParentNode3 :=ParentNode0;
  ParentNode4 :=ParentNode0;
//  ParentNode5 :=ParentNode0;

  cdsDerevo.first;
  while not cdsDerevo.eof do begin
//try
    if cdsDerevo.FieldbyName('level').AsString='1'
    then begin
      ParentNode1 := TreeV.Items.AddChildObject(
        ParentNode0,
        cdsDerevo.FieldbyName('name_').AsString,
        Pointer( cdsDerevo.FieldbyName('id').AsInteger));
      ParentNode1.ImageIndex := 1;
      ParentNode1.SelectedIndex := 1;
    end;

    if cdsDerevo.FieldbyName('level').AsString='2'
    then begin
      ParentNode2 := TreeV.Items.AddChildObject(
        ParentNode1,
        cdsDerevo.FieldbyName('name_').AsString,
        Pointer( cdsDerevo.FieldbyName('id').AsInteger));
      ParentNode2.ImageIndex := 1;
      ParentNode2.SelectedIndex := 1;
    end;

    if cdsDerevo.FieldbyName('level').AsString='3'
    then begin
      ParentNode3 := TreeV.Items.AddChildObject(
        ParentNode2,
        cdsDerevo.FieldbyName('name_').AsString,
        Pointer( cdsDerevo.FieldbyName('id').AsInteger));
      ParentNode3.ImageIndex := 1;
      ParentNode3.SelectedIndex := 1;
    end;

    if cdsDerevo.FieldbyName('level').AsString='4'
    then begin
      ParentNode4 := TreeV.Items.AddChildObject(
        ParentNode3,
        cdsDerevo.FieldbyName('name_').AsString,
        Pointer( cdsDerevo.FieldbyName('id').AsInteger));
      ParentNode4.ImageIndex := 1;
      ParentNode4.SelectedIndex := 1;
    end;

    if cdsDerevo.FieldbyName('level').AsString='5'
    then begin
      ParentNode5 := TreeV.Items.AddChildObject(
        ParentNode4,
        cdsDerevo.FieldbyName('name_').AsString,
        Pointer( cdsDerevo.FieldbyName('id').AsInteger));
      ParentNode5.ImageIndex := 1;
      ParentNode5.SelectedIndex := 1;
    end;

//except
//showmessage('*5');
//end;
    cdsDerevo.Next;
  end;

// ветки дерева END

// здесь растет дерево END


  PC.ActivePage := TabOKPersonal;
  ActDetailUndoExecute(nil);
//showmessage('!!'+INIT_KEY + 'TBOKForm\TfmFilterPersonal');
  if BOKForm.chbsavefiltr.checked
  then begin

    With BOKForm.Registry do
    Try
      OpenKey(INIT_KEY + 'TBOKForm\TfmFilterPersonal', False);

      If ValueExists('edDepartment')
      Then Begin
//        key_txt := ReadString('edDepartment');
//        if  key_txt <>''
//        then begin
//showmessage('1)'+key_txt);
//          edDepartmentcodeNew.Text := '1';
          edDepartmentcodeNew.Text := ReadString('edDepartment');
//        end;
      end;
    Finally
      CloseKey;
    End;

    With BOKForm.Registry do
    Try
      OpenKey(INIT_KEY + TComponent(Self.Owner).ClassName + '\' + Self.ClassName, False);
{
      If ValueExists('edDepartmentcodeNew')
      Then Begin
        key_txt := ReadString('edDepartmentcodeNew');
        if key_txt <> ''
        then begin
//showmessage('2)'+key_txt);
          edDepartmentcodeNew.Text := key_txt;
        end;
      End;
}
      If ValueExists('edDEPARTMENTNUMnew')
      Then Begin
        edDEPARTMENTNUMnew.Text := ReadString('edDEPARTMENTNUMnew');
      End;

      If ValueExists('edDepartmentNameNew')
      Then Begin
        edDepartmentNameNew.Text := ReadString('edDepartmentNameNew');
      End;

    Finally
      CloseKey;
    End;

      if edDepartmentNameNew.Text<>''
      then begin
        edDEPARTMENTNUMnew.text:='';
        edDepartmentcodeNew.Text:='';
//        edDepartmentNameNew.Text:='';
      end;
      if  edDEPARTMENTNUMnew.Text<>''
      then begin
//        edDEPARTMENTNUMnew.text:='';
        edDepartmentcodeNew.Text:='';
        edDepartmentNameNew.Text:='';
      end;
      if  edDepartmentcodeNew.Text<>''
      then begin
        edDEPARTMENTNUMnew.text:='';
//        edDepartmentcodeNew.Text:='';
        edDepartmentNameNew.Text:='';
      end;

    if (edDepartmentNameNew.Text<>'')
      or  (edDEPARTMENTNUMnew.Text<>'')
      or  (edDepartmentcodeNew.Text<>'')
    then begin
      actFindDep.execute;
    end;

  end;


end;

procedure TBOKForm.actObiektivkaExecute(Sender: TObject);
var App:      OLEVariant;
//  i,j:      integer;
  Text_i, Text_iB: string;
  Text1a,Text2a,Text3a,Text4a,Text5a,Text6a,Text7a,Text8a,Text9a,Text10a: string;
  Text11a, Text12a, Text13a: string;
//  Text17,Text18,Text19,Text20,
  ErMes, Text21,Text22: string;
  texth3, sql_,where_pers, where_pers_a : string;
  file_name_,text11,TextDD,TextMM,TextYYYY :string;

//  V: Variant;

// col, nn,
 k,i :integer;

// NumFormat,  DateFormat,
//  StrFormat: String;
//  first_string : boolean;
//  prev0,prev2 : string;
//  prev1 : string;
    Save_Cursor:TCursor;

begin


  ErMes := '';

  if cdsOKPersonal.FieldByName('education_title_code').AsString =''
  then begin
    erMes := erMes+'В данных сотрудника не указано Наименование образования сотрудника!'+#13;
  end;

  if ErMes<>''
  then begin
    showmessage(ErMes);
    exit;
  end;

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }


 TRY
    { Do some lengthy operation }
   if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1) // не связано с подтв. в ГО
   then begin
     App := PrepareOle( 'pril03_kb.doc' ,'Word.Application');
     file_name_  := 'pril03_kb.doc';
   end else begin
     App := PrepareOle( 'pril03.doc' ,'Word.Application');
     file_name_  := 'pril03.doc';
   end;

//  App := CreateOleObject('Word.Application');
//App.visible:=true;
//  App.Documents.Add('"C:\NCI Bank\Ok\Templates\pril03.doc"');


//  App.Selection.HomeKey(6);
//  App.Selection.Find.ClearFormatting;

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\ '+file_name_ +#10#13+
           ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+#10#13+
    'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;
//App.Visible:=true;
  try
    where_pers := ' WHERE branch=:p_1'+ // '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                  ' AND personal_code=:p_2'; //+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers_a := ' WHERE a.branch=:p_1'+ // ''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                    ' AND a.personal_code=:p_2'; //+cdsOKPersonal.FieldByName('personal_code').AsString;

    sql_:='select to_char(a.in_office_date,''yyyy'') column0,'+
                         ' to_char(a.in_office_date,''mm'') column1,'+
                         '  ESTABLISHED_POST column3'+
                         ' FROM ok_period a '+
                         ' WHERE a.branch=:p_1'+
                    ' AND a.personal_code=:p_2'+
                         ' and a.in_office_date='+
                         ' (select max(in_office_date) from ok_period '+
                         ' WHERE branch=:p_3'+
                    ' AND personal_code=:p_4)';
    ErMes:='не удалось получить сведения о работе';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);

    App.Selection.Find.Execute('<TEXTH1>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('column0').AsString, 2);

    App.Selection.Find.Execute('<TEXTH2>', false, false, false, false, false,
           true, 1, false, toMonthName(cdsTempSource.FieldByName('column1').AsString), 2);


    App.Selection.Find.Execute('<TEXTH4>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('column3').AsString, 2);

    sql_:='select level, d.department_name name_, d.department_code,'+
        ' d.high_dep_code from ss_ok_department d'+
        ' connect by d.department_code = prior  d.high_dep_code'+
//        ' start with d.department_code='+cdsOKPersonal.FieldByName('department_code').AsString;
        ' start with d.department_code=:p_1';

    texth3:='';

  try
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('department_code').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    While not cdsTempSource.Eof do
    Begin
      texth3:= cdsTempSource.FieldByName('name_').AsString+' '+texth3;
      cdsTempSource.next;
    End;
  except
      texth3:=' не указано в данных сотрудника!';
  end;


    App.Selection.Find.Execute('<TEXTH3>', false, false, false, false, false,
           true, 1, false, texth3, 2);

// ЭТО РАБОТАЕТ !!!!

    App.Selection.Find.Execute('<FAMILY1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('family').AsString, 2);

    App.Selection.Find.Execute('<NAME1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('First_Name').AsString, 2);

    App.Selection.Find.Execute('<PATRONYMIC1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('Patronymic').AsString, 2);

    try
      cdsOKPhoto.close;
      with cdsOKPhoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
      LoadData(cdsOKPhoto, SQL_OKPhoto+where_pers+    ' and (priznak is null or priznak=:p_3)');

      if not cdsOKPhoto.IsEmpty
      then begin
//        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
  //      App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30);
        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
        App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg',  false,true, 1,1);

         cdsOKPhoto.Close;
      end;
    except
    end;
//text1a

    DateTimeToString(TextDD, 'dd', cdsOKPersonal.FieldByName('birthday').AsDateTime);
    DateTimeToString(TextMM, 'mm', cdsOKPersonal.FieldByName('birthday').AsDateTime);
    DateTimeToString(TextYYYY, 'yyyy', cdsOKPersonal.FieldByName('birthday').AsDateTime);
    Text1a := TextDD+' '+ToMonthName(TextMM)+' '+TextYYYY+' йил';

    App.Selection.Find.Execute('<TEXT1A>', false, false, false, false, false,
           true, 1, false, Text1a, 2);

//DateTimeToString(var Result: string; const Format: string; DateTime: TDateTime);


//text2a
  text2a := '';
  sql_:='SELECT nationality_name '+
                         ' FROM ss_ok_nationality'+
                         ' where nationality_code=:p_1'+ //cdsOKPersonal.FieldByName('nationality_code').AsString+
                         ' and state_notes=:p_2'; // +#39+'A'+#39;
  ErMes:='не удалось получить сведения о национальности';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('nationality_code').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  LoadData(cdsTempSource,sql_, True);

  text2a := cdsTempSource.FieldByName('nationality_name').AsString;

  App.Selection.Find.Execute('<TEXT2A>', false, false, false, false, false,
           true, 1, false, text2a, 2);

//text3a
  sql_:='SELECT education_title_name '+
                         ' FROM ss_ok_education_title'+
                         ' where education_title_code=:p_1'+ //cdsOKPersonal.FieldByName('education_title_code').AsString+
                         ' and state_notes=:p_2'; // +#39+'A'+#39;
  try
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('education_title_code').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
    LoadData(cdsTempSource,sql_, True);
    Text3a:= cdsTempSource.fieldbyname('education_title_name').asstring;
  except
    Text3a:='';
  end;

  App.Selection.Find.Execute('<TEXT3A>', false, false, false, false, false,
           true, 1, false, text3a, 2);

//text4a
  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    text4a := cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
    ErMes:='не удалось получить сведения о месте рождения';
    sql_:='SELECT region_nam FROM s_region'+
                         ' where region_id=:p_1'; //'''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4a := cdsTempSource.FieldByName('region_nam').AsString;

    sql_:='SELECT distr_name FROM s_distr'+
                         ' where distr=:p_1'; //'''+cdsOKPersonal.FieldByName('distr').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4a := text4a + ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;

    App.Selection.Find.Execute('<TEXT4A>', false, false, false, false, false,
           true, 1, false, text4a, 2);
//text5a
  ErMes:='не удалось получить сведения о партии';
  sql_:='select b.party_name'+
                ' from ok_party a, ss_ok_party b'+
                  where_pers_a +
                ' and a.party_code = b.party_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.party_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;

  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text5a = ''
    then Text5a:= cdsTempSource.fieldbyname('party_name').asstring
    else Text5a:= text5a+','+cdsTempSource.fieldbyname('party_name').asstring;
    cdsTempSource.next;
  End;

  if text5a='' then text5a:='партиясиз';
  App.Selection.Find.Execute('<TEXT5A>', false, false, false, false, false,
           true, 1, false, text5a, 2);

//text6a
//text7a
  text6a := '';
  text7a := '';
//  ||to_char(a.END_DATE)
  if (HeadBranch_ ='00883') or (HeadBranch_ ='09006')  // не связано с подтв. в ГО
//or (1=1)
  then begin
  // народный банк
    sql_:='select b.institution_name||'' ''||to_char(a.END_DATE)||'' йил.'' all_data0,'+
                ' a.profession_personal all_data1'+
                ' from ok_education a, ss_ok_institution b'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.end_date';
  end else begin
    sql_:='select b.institution_name all_data0,'+
                ' a.profession_personal all_data1'+
                ' from ok_education a, ss_ok_institution b'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and b.state_notes=:p_3'+ //#39+'A'+#39+
                ' order by a.end_date';
  end;
  ErMes:='не удалось получить сведения об учебном заведении';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    if text6a = ''
    then Text6a:= cdsTempSource.fieldbyname('all_data0').asstring
    else Text6a:= text6a+#13+cdsTempSource.fieldbyname('all_data0').asstring;
    if text7a = ''
    then Text7a:= cdsTempSource.fieldbyname('all_data1').asstring
    else Text7a:= text7a+#13+cdsTempSource.fieldbyname('all_data1').asstring;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT6A>', false, false, false, false, false,
           true, 1, false, text6a, 2);
  App.Selection.Find.Execute('<TEXT7A>', false, false, false, false, false,
           true, 1, false, text7a, 2);


//text8a
// ученые степени
  sql_:='select b.degree_name all_data'+
                ' from ok_degree a, ss_ok_degree b'+
                  where_pers_a +
                ' and a.degree_code= b.degree_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.degree_date';
  ErMes:='не удалось получить сведения об ученой степени';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text8a = ''
    then Text8a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text8a:= text8a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//
  if text8a='' then text8a:='йук';
  App.Selection.Find.Execute('<TEXT8A>', false, false, false, false, false,
           true, 1, false, text8a, 2);

//text9a
  text9a := ''; //
  ErMes:='не удалось получить сведения об ученом звании';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
  LoadData(cdsTempSource,'select b.academic_name all_data'+
                ' from ok_academic a,ss_ok_academic b '+
                  where_pers_a +
                ' and a.academic_code=b.academic_code'+
                ' and b.state_notes=:p_3'+ //#39+'A'+#39+
                ' order by a.academic_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text9a = ''
    then Text9a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text9a:= text9a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT9A>', false, false, false, false, false,
           true, 1, false, text9a, 2);

//text10a
  text10a := '';
  ErMes:='не удалось получить сведения об иностранных языках';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
      end;
  LoadData(cdsTempSource,'select b.language_name||'' тили (''|| c.LEVEL_LANGUAGE_NAME ||'')'' all_data'+
                ' from ok_language a, ss_ok_language b, ss_ok_level_language c'+
                  where_pers_a +
                ' and a.language_code= b.language_code'+
                ' and a.level_code=c.level_language_code'+
                ' and c.state_notes=:p_3'+ //#39+'A'+#39+
                ' and b.state_notes=:p_4'+ //#39+'A'+#39+
                ' order by a.language_code', True);

  While not cdsTempSource.Eof do
  Begin
    if text10a = ''
    then Text10a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text10a:= text10a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text10a='' then text10a:='билмайди';
  App.Selection.Find.Execute('<TEXT10A>', false, false, false, false, false,
           true, 1, false, text10a, 2);

//text11a
  text11a := '';
  ErMes:='не удалось получить сведения о зарубежных поездках';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,'select voyage_date||'' ''||voyage_land all_data'+
                ' from ok_voyage'+
                  where_pers +
                ' order by voyage_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text11a = ''
    then Text11a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text11a:= text11a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text11a='' then text11a:='булмаган';

  App.Selection.Find.Execute('<TEXT11A>', false, false, false, false, false,
           true, 1, false, text11a, 2);

//text12a
  text12a := ''; // Гос премии ok_premium

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,'select premium_name all_data'+
                ' from ok_premium'+
                  where_pers +
                ' order by premium_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text12a = ''
    then Text12a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text12a:= text12a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text12a='' then text12a:='йук';

  App.Selection.Find.Execute('<TEXT12A>', false, false, false, false, false,
           true, 1, false, text12a, 2);

//text13a
  text13a := '';

  ErMes:='не удалось получить сведения об избрании';
  sql_:='select b.ELECTION_name all_data'+
        ' from ok_election a, ss_ok_election b '+
        where_pers+
                ' and a.election_code= b.election_code'+
                ' and b.state_notes='+#39+'A'+#39+
        ' order by a.election_date_begin';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text13a = ''
    then Text13a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text13a:= text13a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;

  End;

  if text13a='' then text13a:='сайланмаган';
  App.Selection.Find.Execute('<TEXT13A>', false, false, false, false, false,
           true, 1, false, text13a, 2);

//text14a
// Отчет сформирован: (убрал)
//  App.Selection.Find.Execute('<TEXT14A>', false, false, false, false, false,
//           true, 1, false, DateToStr(Date), 2);


  text_i := '';
  text_iB := '';
  ErMes:='сведения о работе (Мехнат фаолияти)';

  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1)    // не связано с подтв. в ГО
  then begin
// капитал-банку дату показывать день-месяц-год
    sql_:='select to_char(IN_OFFICE_DATE,''dd.mm.yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''dd.mm.yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'', ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
  end else begin

    sql_:='select to_char(IN_OFFICE_DATE,''mm.yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''mm.yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'', ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
  end;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

//  row:=1;
  sql_ := 'App.Selection.GoTo(2, 1, 4, '''');';


  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1)   // не связано с подтв. в ГО
  then begin
    App.Selection.GoTo(2, 1, 3, '');
  end else begin
    App.Selection.GoTo(2, 1, 4, '');
  end;

  sql_:='App.Selection.SelectRow;';
  App.Selection.SelectRow;
//App.Visible:=true;
//showmessage('1');
  sql_:='App.Selection.Copy;';
  App.Selection.Copy;
//      App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
//                                         true, 1, false, ' ', 1);
//      App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
//                                         true, 1, false, 'Мехнат фаолияти', 1);

//   sql_ := 'App.Selection.InsertRowsBelow;';
//      App.Selection.InsertRowsBelow;
//   sql_ := 'App.Selection.Paste';
//      App.Selection.Paste;



//   sql_ := 'App.Selection.PasteSpecial;'; сообщает об ошибке
//      App.Selection.PasteSpecial;

  While not cdsTempSource.eOF do
    begin
      cdsTempSource.Next;
    end;

  While not cdsTempSource.bOF do
    begin
      if cdsTempSource.Fields[1].AsString <> ''
      then begin
        text21 := cdsTempSource.Fields[0].AsString+' - '+cdsTempSource.Fields[1].AsString+ ' й.';
        text22 := cdsTempSource.Fields[2].AsString;
        App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
                                         true, 1, false, text21, 1);
        App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                         true, 1, false, text22, 1);

//        App.Selection.PasteAppendTable;
//        App.Selection.InsertRowsBelow;
//        App.Selection.Paste;
        sql_ := 'App.Selection.InsertRows(1);';
        App.Selection.InsertRows(1);
        sql_ := 'App.Selection.paste;';
        App.Selection.Paste;

      end else begin
        text21 := cdsTempSource.Fields[0].AsString+' йилдан хозирги ваутгача';
        text22 := cdsTempSource.Fields[2].AsString;
        App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
                                         true, 1, false, text21, 1);
        App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                         true, 1, false, text22, 1);
        sql_ := 'App.Selection.InsertRows(1);';
        App.Selection.InsertRows(1);
        sql_ := 'App.Selection.paste;';
        App.Selection.Paste;

      end;

      cdsTempSource.prior;
    end;

      App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
                                         true, 1, false, ' ', 1);
      App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                         true, 1, false, 'Мехнат фаолияти', 1);

// до этой команды приложение word работает в фоновом режиме

//  App.Visible:=true;

//  V.Visible:=true;


   if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1)  // не связано с подтв. в ГО
   then begin
//text11
  text11 := '';
  k:=11;

  sql_:='select b.relation_name,a.RELATION_FAMILY	||'' ''||a.RELATION_NAME ||'' ''||'+
                ' a.RELATION_PATRONYMIC,'+
                ' a.RELATION_BIRTHDAY||'' йил ''||'+
                 'decode(COD_OBL_birth,null,nvl(COD_OBL_BIRTH_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_birth))||'' ''||'+
                 'decode(COD_CITY_birth,null,nvl(COD_CITY_BIRTH_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY_birth))'+
//                 '||'' ''||nvl(a.RELATION_BIRTHPLACE,'' ''),'+
                 ','+
                ' nvl(a.RELATION_OFFICE,'' '')||'' ''||nvl(a.RELATION_POST,'' '') ,'+
                 'decode(COD_OBL_LIVE,null,nvl(COD_OBL_LIVE_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_LIVE))||'' ''||'+
                 'decode(COD_CITY,null,nvl(COD_CITY_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY))||'' ''||'+
                'nvl(a.RELATION_HOME_ADDRESS,'' '')'+
                ' from ok_relation a, ss_ok_relation b'+
                  where_pers_a +
                ' and a.relation_code=b.relation_code'+
                ' order by a.relation_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text11:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;
      App.Selection.Find.Execute('<TEXT11'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text11, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 114
  do begin
      App.Selection.Find.Execute('<TEXT11'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;
//text11:=copy(text11,1,255);
//showmessage('text11 '+text11);

   end;

   App.visible:=true;
   App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\temp.doc"');

 except
//  App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\temp.doc"');
  App.Application.Quit(false); // выход из ворда совсем без сохранения
  showmessage(ermes+#13+sql_);
//  App.Application.Quit(true); // выход из ворда с сохранением
//  V.Quit(false); // выход из ексцеля совсем без сохранения
   raise;
 end;

  App := unassigned;
//  V := unassigned;
//        App.Selection.EndKey(6);
//    App.ActiveDocument.Range.InsertAfter('one' +#9+ 'two' +#9+ 'three'+#10);
//    App.ActiveDocument.Range.ConvertToTable(Separator:=Chr(9), NumRows:=1, NumColumns:=3);

 FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.actOptionsExecute(Sender: TObject);
begin
  LastPanel := 'OptionsPanel';
  pcmainok.ActivePage := OptionsPanel_;

  DetailsPanel.Visible             := False;
  FormPanel.Visible             := False;
  OpenPanel.Visible             := False;
//  OptionsPanel.Visible := False;
  RefPanel.Visible               := False;
  TablePanel.Visible            := False;

  actDetails.Checked := False;
  actForm.Checked    := False;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actTable.Checked   := False;
  actReAccept.Checked   := False;
//  actUndoChanges.Enabled := True;

  actOptions.Checked   := True;
  OptionsPanel.Visible := True;

end;

procedure TBOKForm.edFilialExit(Sender: TObject);
//var i: Integer;
begin
  //inherited;

  If not edFilial.Modified Then Exit;
  With Registry do
    Try
      OpenKey(INIT_KEY + Self.ClassName, True);
      WriteString('edFilial', edFilial.Text);
    Finally
      CloseKey;
    End;

end;

procedure TBOKForm.edOfficeAddressExit(Sender: TObject);
begin
  If not edOfficeAddress.Modified Then Exit;
  With Registry do
    Try
      OpenKey(INIT_KEY + Self.ClassName, True);
      WriteString('edOfficeAddress', edOfficeAddress.Text);
    Finally
      CloseKey;
    End;

end;

procedure TBOKForm.ChbArticleClick(Sender: TObject);
begin

  if not ChbArticle.Checked
  then begin
    If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
    Then begin
      cdsOKPeriod.FieldByName('article_code').AsString:='';
    end else begin
      cdsOKPeriod.Edit;
      cdsOKPeriod.FieldByName('article_code').AsString:='';
    end;  
  end;

end;

procedure TBOKForm.actRezervSetExecute(Sender: TObject);
begin

  LastPanel := 'RezervSetPanel';
// такой нет  pcmainok.ActivePage := RezervSetPanel_;
  ActDetailUndoExecute(nil);

  If fmSaveOKRezerv = nil Then fmSaveOKRezerv := TfmOKRezerv.Create(Self);

  With fmSaveOKRezerv do
  Begin
      If ShowModal = mrOk Then
      Begin
//        showmessage('OK');
      End;
  End;

  fmSaveOKRezerv.Close;
  fmSaveOKRezerv := nil;
end;

procedure TBOKForm.actToExcelExecute(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant;
 i, col,row,nn:integer;
 NumFormat,DateFormat,StrFormat: String;


begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  cdbgOK_PERSONAL.DataSource.Dataset.DisableControls;
  cdbgOK_PERSONAL.DataSource.Dataset.First;

  row:=1;
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;
  nn:=cdbgOK_PERSONAL.Columns.Count-1;
  i:=1;
  // формирование шапки для текстового файла
  for col:=0 to nn
  do begin
    if cdbgOK_PERSONAL.Columns.Items[col].Visible then
    begin
      V.Cells[row, i ].Value := cdbgOK_PERSONAL.Columns.Items[col].title.Caption;
//          rpad(cdbgSSOK.Columns.Items[i].title.Caption, cdbgSSOK.Columns.Items[i].Width div 6)  + '|';
      inc(i);
    end;
  end;

  inc(row);
  While not cdbgOK_PERSONAL.DataSource.Dataset.Eof
  do begin
    i := 1;
    For col:=0 To nn
    Do Begin

      if cdbgOK_PERSONAL.Columns.Items[col].Visible
      then begin
        case cdbgOK_PERSONAL.DataSource.Dataset.Fields[col].DataType Of
          ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
          ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
          ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
{
           begin
                           if i=14 then V.Cells[row, i ].NumberFormat := StrFormat
                                   else V.Cells[row, i ].NumberFormat := DateFormat;
                         end;
}
        end;
//     V.Cells[row,col+1].Font.Bold := False;
        V.Cells[row, i ].Value := Trim(cdbgOK_PERSONAL.DataSource.Dataset.Fields.FieldByName(cdbgOK_PERSONAL.Columns.Items[col].FieldName).AsString );
        inc(i);
      end;

    End;

    inc(row);
    cdbgOK_PERSONAL.DataSource.Dataset.Next;
    Application.ProcessMessages;
  end;

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее
  cdbgOK_PERSONAL.DataSource.Dataset.ENableControls;
 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.actDeleteExecute(Sender: TObject);
begin

  if LastPanel = 'DetailsPanel'
  then begin
    ActDetailDeleteExecute(nil);
  end;

  if LastPanel = 'FormPanel'
  then begin

    if cdsOKPersonal.FieldByName('status_code').AsInteger >1
    then begin
      showmessage('Нельзя удалить. Только нового сотрудника можно удалить.');
    end else begin
      If Application.MessageBox(PChar('Удалить ВСЕ данные о сотруднике?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
      Then Begin
        Try

//          ExecSQLPAR('delete from ok_personal where personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString+
//                            ' and branch='+#39+cdsOKPersonal.FieldByName('branch').AsString+#39);
          ExecSQLPAR('delete from ok_personal where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          try
          ExecSQLPAR('delete from OK_ACADEMIC where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_ADDINFORM where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_ARMY where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_ATTESTATION where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_AWARD where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_CHANGE_FIO where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_CONVICTIONS where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_DEGREE where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_EDUCATION where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_ELECTION where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_LANGUAGE where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_LEAVE where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_PARTY where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_PENALTY where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_PERIOD where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_POST where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_PREMIUM where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_RELATION where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_RISE where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_SCIENTIFIC where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);

          ExecSQLPAR('delete from OK_VOYAGE where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          ExecSQLPAR('delete from OK_YOUTH where branch=:p_1 and personal_code=:p_2',
                            cdsOKPersonal.FieldByName('branch').AsString,
                            cdsOKPersonal.FieldByName('personal_code').AsString);
          except
          end;
          ExecSQL('COMMIT');

        Except on E: Exception do
          Begin
            ExecSQL('ROLLBACK');
            ShowMessage('Ошибка при удалении.'+#13+E.Message);
          End;
        End;

        cdsOKPersonal.Refresh;
      end;
    end;

// end else begin
//   showmessage('чтобы удалить данные о сотруднике,'+
//     ' перейдите на вкладку "Форма-Информация по сотруднику"!');
  end;

end;

procedure TBOKForm.cdsSSOKDepartment_SETBeforePost(DataSet: TDataSet);
begin
  DataSet.Fields.FieldByName('branch').AsString := Branch;
  DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
  DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
  if DataSet.Fields.FieldByName('state_notes').AsVariant<>'P'
  then DataSet.Fields.FieldByName('state_notes').AsVariant:='A';

end;

procedure TBOKForm.cdsOKPersonalBeforeEdit(DataSet: TDataSet);
begin
  OldStatus := cdsOKPERSONAL.FieldByName('status_code').AsString;
  OldSpecial := cdsOKPERSONAL.FieldByName('special_code').AsString;
end;

procedure TBOKForm.cdsOKPersonalAfterOpen(DataSet: TDataSet);
begin
    cdsOKPersonal.FieldByName('birthday').EditMask  := '!09/09/0099;1;_';
    cdsOKPersonal.FieldByName('pass_date').EditMask := '!09/09/0099;1;_';
    cdsOKPersonal.FieldByName('pass_date_end').EditMask := '!09/09/0099;1;_';
    cdsOKPersonal.FieldByName('srok_date').EditMask := '!09/09/0099;1;_';

    cdsOKPersonal.FieldByName('REG_DATE_END').EditMask := '!09/09/0099;1;_';

end;

procedure TBOKForm.dsOKPersonalDataChange(Sender: TObject; Field: TField);
var po_trud_sogl:integer;
begin
  StatusBar.Panels[0].Text := Format('Всего: %d', [cdsOKPersonal.RecordCount]);
  po_trud_sogl:= getsqlresultpar('select count(*) f1 from ok_personal where branch=:p_1 and TRUD_SOGL=:p_2',branch,'1');
  StatusBar.Panels[1].Text := Format('По трудовому соглашению: %d', [po_trud_sogl]);
//  ed_iias_strChange(nil);
//  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.chbTabVisibleClick(Sender: TObject);
var n:integer;
begin

  if chbTabVisible.checked
  then begin

    with PCDetails
    do begin
      for n:=0 to PageCount-2
      do begin
        Pages[n].TabVisible:= true;
      end;
    end;

  end else begin

    with PCDetails
    do begin
      for n:=0 to PageCount-2
      do begin
        Pages[n].TabVisible:=false;
      end;
    end;

  end;

end;

procedure TBOKForm.actLichKartaBExecute(Sender: TObject);
{
var App:      Variant;
//  Text2, Text3, Text4, Text5, Text6, Text6a, Text6b, Text6c : string;
//  Text7, Text7a, Text7b, Text8, Text8a, Text9, Text9a : string;
//  Text10, Text10a, Text11, Text11a, Text11b, Text11c  : string;
//  Text12, Text12a, Text12b, Text12c, Text12d, Text12e, Text12f,  Text12g : string;
   Text14, Text15, Text16 : string;
 sql_, where_pers, where_pers_a : string;
  Save_Cursor:TCursor;
}  
begin
{
  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;

 TRY

  App := PrepareOle( 'pril02b.doc' ,'Word.Application');

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\pril02b.doc .' +#10#13+
               ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+#10#13+
    'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;

  try
// ЭТО РАБОТАЕТ !!!!
}
{
    App.Selection.Find.Execute('<FAMILY1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('family').AsString, 2);

    App.Selection.Find.Execute('<NAME1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('First_Name').AsString, 2);

    App.Selection.Find.Execute('<PATRONYMIC1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('Patronymic').AsString, 2);

    try


// фото
      (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
      cdsOKPhoto.Close;

//    App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30, 90,120);
// пусть сами подбирают размер фото !!!
      App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30);
    except
    end;
}
{    where_pers := ' WHERE branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                  ' AND personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers_a := ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                    ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;




}{
  While not cdsTempSource.Eof do
  Begin
    if text14 = ''
    then Text14:= cdsTempSource.fieldbyname('all_data').asstring
    else Text14:= text14+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;

  End;

try
  App.Selection.Find.Execute('<TEXT14>', false, false, false, false, false,
           true, 1, false, text14, 2);
except
showmessage(text14);
raise;
end;
}{
//text14
  text14 := '';
//

//try

//except
//memo3.Clear;
//memo3.lines.add(sql_);
//raise;
//end;

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text11:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;
      App.Selection.Find.Execute('<TEXT11'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text11, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 114
  do begin
      App.Selection.Find.Execute('<TEXT11'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;



//text15
  text15 := '';
  sql_:='select b.leave_name||'' ''||a.BEGIN_YEAR||''-''||'+
        ' a.END_YEAR||'' ''||a.DATE_IN_LEAVE||''-''||a.DATE_OUT_LEAVE||'' ''||'+
        ' a.PERIOD_LEAVE||'' ''||a.MOTIVE_LEAVE'+
        ' as all_data'+
        ' from ok_leave a, ss_ok_leave b'+
          where_pers_a+
        ' and a.leave_code= b.leave_code'+
        ' and b.state_notes='+#39+'A'+#39+
        ' order by a.date_in_leave';


  While not cdsTempSource.Eof do
  Begin
    if text15 = ''
    then Text15 := cdsTempSource.fieldbyname('all_data').asstring
    else Text15 := text15+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;

  End;

  App.Selection.Find.Execute('<TEXT15>', false, false, false, false, false,
           true, 1, false, text15, 2);

//text16 Отчет сформирован: …<TEXT16>
  text16 := DateToStr(Date);
  App.Selection.Find.Execute('<TEXT16>', false, false, false, false, false,
           true, 1, false, text16, 2);

// до этой команды приложение word работает в фоновом режиме
  App.Visible:=true;

//  App.Application.Quit; -- выход из ворда совсем
 except
  App.Application.Quit(false); // выход из ворда совсем без сохранения
//  App.Application.Quit(true); // выход из ворда с сохранением
   raise;
 end;

  App:=unassigned;
 FINALLY
    Screen.Cursor := Save_Cursor;
 END;
}
end;

procedure TBOKForm.actObiektivkaRTFExecute(Sender: TObject);
var
s: string;
tf:textFile;
//app: variant;
begin

  try
    AssignFile(tf,'C:\NCI Bank\OK\Temp\rep_ok.rtf');
    Rewrite(tf);
    s:='{\rtf1\ansi\ansicpg1251\deff0\deflang1049{\fonttbl{\f0\fswiss\fcharset204{\*\fname Arial;}Arial CYR;}}'+#13#10+
    '\viewkind4\uc1\pard\qc\b\f0\fs20 План-Отчет о проделанной работе\par '+#13#10+
    '\pard\b0\par '+#13#10+
    '\par '+#13#10+
    '\qc Исполнитель  '+cdsOKPersonal.FieldByName('family').AsString+'.\par '+#13#10+
    'Руководитель \par '+#13#10+
    '\par '+#13#10+
    '\par '+#13#10+
    '\trowd\trbrdrt\brdrdb\brdrw20 '+#13#10+
    '\trbrdrb\brdrdb\brdrw20 '+#13#10+
    '\cellx850\cellx1300\cellx4800\cellx8000\cellx8668\pard '+#13#10+
    '\intbl\qc Дата\cell Вр.\cell План\cell Фактически выполнено\cell % выпол-нения\cell\pard\row';
    WriteLn(tf,s);

    s:='\intbl 1'+
    '\cell 2'+
    '\cell 3' +
    '\cell 4'  +
    '\cell 5'   +
    '\cell\row';
    WriteLn(tf,s);

    s:='\intbl 1'+
    '\cell 2'+
    '\cell 3' +
    '\cell 4'  +
    '\cell 5'   +
    '\cell\row';
    WriteLn(tf,s);

    s:='\pard\sb100\sa100 '+#13#10+
      '\par\pard\f1\fs20\par '+#13#10+
      '\par '+#13#10+
      '\par '+#13#10+
      '\viewkind4\uc1\pard\qc\b\f0\fs20 Исполнитель                                 Руководитель\par'+#13#10+
      '\pard\b0\par'+#13#10+
      '}';
    WriteLn(tf,s);
  finally
    CloseFile(tf);
  end;

  try
    WinExec('C:\NCI Bank\OK\wordpad.exe "C:\NCI Bank\OK\Temp\rep_ok.rtf"', SW_MAXIMIZE);
  except
    showmessage('Не удалось открыть  "C:\NCI Bank\OK\wordpad.exe C:\NCI Bank\OK\Temp\rep_ok.rtf"');
  end;

end;

procedure TBOKForm.actLichKartaB_rtfExecute(Sender: TObject);
var
  sql_,text11,s: string;
  tf:textFile;
  app: variant;
//  where_pers, where_pers_a :string;
  i,k:integer;
begin

{    where_pers := ' WHERE branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                  ' AND personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers_a := ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                    ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
}
  try
    AssignFile(tf,'C:\NCI Bank\OK\Templates\rep_ok.rtf');
    Rewrite(tf);

    s:='{\rtf1\ansi\ansicpg1251\deff0\deflang1049{\fonttbl{\f0\froman\fprq2\'+
      'fcharset204{\*\fname Times New Roman;}Times New Roman CYR;}'+
      '{\f1\fswiss\fcharset204{\*\fname Arial;}Arial CYR;}}';
    WriteLn(tf,s);

    s:='{\stylesheet{ Normal;}{\s1 heading 1;}}';
    WriteLn(tf,s);

    s:='\viewkind4\uc1\pard\keepn\nowidctlpar\s1\qc\lang1033\b\f0\fs24 НАЗНАЧЕНИЕ, ПЕРЕМЕЩЕНИЯ ПО РАБОТЕ, ОПЛАТА \par ';
    WriteLn(tf,s);

    s:='\trowd\trgaph108\trleft-142\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb';
    WriteLn(tf,s);

    s:='\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15';
    WriteLn(tf,s);


    s:='\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1700\clbrdrt\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx3500\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5000\clbrdrt';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs \cellx6500\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx10000\clbrdrt\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx11000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx12000\clbrdrt\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx13000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx15000\pard';
    WriteLn(tf,s);



    s:='\intbl\b0 N Приказа Основания\cell Подразделение\cell Должность\cell Дата\cell Причина перемещения\cell Разряд\cell Надбавка\cell Оклад\cell Подпись\cell\b\row';
    WriteLn(tf,s);

  sql_:='select a.BASIS_NUM, a.ESTABLISHED_DEPARTMENT,'+
        ' a.ESTABLISHED_POST, to_char(a.basis_date,''dd.mm.yyyy'') b_date,'+
        ' b.BASE_MOVE_NAME,'+
        ' 0, 0, 0'+
        ' from ok_period a, ss_ok_BASE_MOVE b'+
        ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
            ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString+
        ' and a.BASE_MOVE_CODE= b.BASE_MOVE_CODE'+
        ' and b.state_notes='+#39+'A'+#39+
        ' order by a.basis_date';

  try
    cdsTempSource.close;
    with cdsTempSource.params
      do begin
        clear;
         CreateParam(ftString, 'p_1', ptInput);
         ParamByName('p_1').Value   :=15;
      end;
    LoadData(cdsTempSource,sql_, True);
  except
    showmessage(sql_);
    raise;
  end;
  k:=0;

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 7
    do begin
      Text11:= Text11+cdsTempSource.fields[i].asstring+'\cell ';
    end;

    s:='\intbl\b0 '+text11+'  \cell\b\row';
    WriteLn(tf,s);
    cdsTempSource.next;
    Text11:='';
    k:=k+1;
  End;

  if k=0
  then begin
    s:='\intbl\b0 \cell \cell \cell \cell \cell \cell \cell \cell \cell\b\row';
    WriteLn(tf,s);
  end;

    s:='\pard\nowidctlpar\b0\f1\fs20\par\pard\f2\par';
    WriteLn(tf,s);

//------------------------

    s:='\viewkind4\uc1\pard\keepn\nowidctlpar\s1\qc\lang1033\b\f0\fs24 '+
      ' СВЕДЕНИЯ ОБ ОТПУСКАХ \par ';
    WriteLn(tf,s);


    s:='\trowd\trgaph108\trleft-142\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb';
    WriteLn(tf,s);

    s:='\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2000\clbrdrt\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx5000\clbrdrt';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs \cellx8000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx10000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrr\brdrw15\brdrs';
    WriteLn(tf,s);

    s:=' \cellx13000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx16000\pard';
    WriteLn(tf,s);

    s:='\intbl\b0 Вид отпуска\cell Рабочий год\cell Предоставлен отпуск\cell Продолжительность отпуска\cell Основание\cell ОТМЕТКА ОБ УВОЛЬНЕНИИ\cell\b\row';
    WriteLn(tf,s);









    s:='\trowd\trgaph108\trleft-142\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb';
    WriteLn(tf,s);

    s:='\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2000\clbrdrt\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx3500\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5000\clbrdrt';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs \cellx6500\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8000\clbrdrt\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15';
    WriteLn(tf,s);

    s:='\brdrs \cellx10000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb';
    WriteLn(tf,s);

    s:='\brdrw15\brdrs\clbrdrr\brdrw15\brdrs';
    WriteLn(tf,s);

    s:=' \cellx13000\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs';
    WriteLn(tf,s);

    s:='\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx16000\pard';
    WriteLn(tf,s);

    s:='\intbl\b0  \cell начало\cell окончание\cell начало\cell окончание\cell  \cell  \cell ..............................\cell\b\row';
    WriteLn(tf,s);


  sql_:='select b.leave_name,a.BEGIN_YEAR,'+
        ' a.END_YEAR,a.DATE_IN_LEAVE,a.DATE_OUT_LEAVE,'+
        ' a.PERIOD_LEAVE,a.MOTIVE_LEAVE'+
        ' from ok_leave a, ss_ok_leave b'+
        ' WHERE a.branch=:p_1'+ // '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
            ' AND a.personal_code=:p_2'+  //cdsOKPersonal.FieldByName('personal_code').AsString+
        ' and a.leave_code= b.leave_code'+
        ' and b.state_notes=:p_3'+ //#39+'A'+#39+
        ' order by a.date_in_leave';

  try
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
    LoadData(cdsTempSource,sql_, True);
  except on e:exception
    do begin
      showmessage(sql_+#13+e.Message);
      raise;
    end;
  end;
  k:=0;
  Text11:='';

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 6
    do begin
      Text11:= Text11+cdsTempSource.fields[i].asstring+'\cell ';
    end;

    s:='\intbl\b0 '+text11+'  \cell\b\row';
    WriteLn(tf,s);
    cdsTempSource.next;
    Text11:='';
    k:=k+1;
  End;

  if k=0
  then begin
    s:='\intbl\b0 \cell \cell \cell \cell \cell \cell \cell \cell\b\row';
    WriteLn(tf,s);
  end;

    s:='\pard\nowidctlpar\b0\f1\fs20\par\pard\f2\par';
    WriteLn(tf,s);



//-----------------------

    // End of File.rtf
    s:='}';
    WriteLn(tf,s);


  finally
    CloseFile(tf);
  end;

  try
    App := PrepareOle( 'rep_ok.rtf' ,'Word.Application');
    App.Visible:=true;
  except
    App.Application.Quit(false); // выход из ворда совсем без сохранения
    raise;
//  App.Application.Quit(true); // выход из ворда с сохранением
    showmessage('Не удалось открыть "rep_ok.rtf"');
  end;
  App:=unassigned;


end;

procedure TBOKForm.actStatExecute(Sender: TObject);
begin
//
end;

procedure TBOKForm.cdbgOK_PERSONALDblClick(Sender: TObject);
begin

  if actForm.Enabled
  then begin
    actFormExecute(nil);
  end;

end;

procedure TBOKForm.actChangePassportExecute(Sender: TObject);
var erMessage : string;
const
  ERROR_NO = 'ORA-20000: ';
begin


  if (cdsOKPERSONAL.state in dseditmodes)
  then begin
    showmessage('Сохраните данные перед изменением серии и номера паспорта!');
    exit;
  end;

  if cdsOKPERSONAL.FieldByName('PASSPORT_TYPE_CODE').isnull
  then begin
    showmessage('Укажите тип документа! (Паспорт).');
    exit;
  end;


    If fmSaveOKChangePasport = nil Then fmSaveOKChangePasport := TfmOKChangePasport.Create(Self);
    With fmSaveOKChangePasport do
      Begin

        Caption  := 'Код сотрудника: '+cdsOKPersonal.FieldByName('personal_code').AsString;
        lbFamily.Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
        lbName.Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
        lbPatronymic.Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;

        if (cdsOKPERSONAL.FieldByName('PASSPORT_TYPE_CODE').AsString='1')
        or (cdsOKPERSONAL.FieldByName('PASSPORT_TYPE_CODE').AsString='6')
        then begin
          medNum.editmask:='0000000;1;_';
        end else begin
          medNum.editmask:='000000000;1;_';
        end;
        medSeriya.Text := cdsOKPERSONAL.FieldByName('PASS_SERIYA').AsString;
        medNum.Text := cdsOKPERSONAL.FieldByName('PASS_NUM').asString;

//        lbSeriya.caption := cdsOKPERSONAL.FieldByName('PASS_SERIYA').AsString;
//        lbPassNum.caption := cdsOKPERSONAL.FieldByName('PASS_NUM').asString;

//        medDateOfIssue.text    := cdsOKPERSONAL.FieldByName('PASS_DATE').asString;
//        lbDateOfIssue.caption  := cdsOKPERSONAL.FieldByName('PASS_DATE').asString;

//        EdDistrAuthority.text := cdsOKPERSONAL.FieldByName('cod_distr_uvd').asString;
//        cbDistrAuthority.text := dblcb_iias_uvd_distr.text;

//        EdAuthority.text := cdsOKPERSONAL.FieldByName('cod_distr_prim').asString;


        If ShowModal = mrOk Then
        Begin
        end;
      End;

    if ErMessage = ''
    then begin
      fmSaveOKChangePasport.Close;
      fmSaveOKChangePasport := nil;
      cdsOKPersonal.Refresh;

  //    fmSaveOKChangeFIO.Destroy;
    end;


end;

procedure TBOKForm.dbeOK_PASS_NUMKeyPress(Sender: TObject; var Key: Char);
begin
//showmessage(Key);
  if key<>chr(vk_back)
  then begin

    try
      StrToInt(Key);
    except
      Key:=#0;
    end;

//    if length(dbeOK_PASS_NUM.Text)>=7
//    then begin
//      key:=#0;
//    end;

  end;

end;

procedure TBOKForm.dbeOK_PASS_SERIYAKeyPress(Sender: TObject;
  var Key: Char);
var is_good_ :boolean;
    Str_Key : string;
begin

  if cdsOKPersonal_NEW.FieldByName('passport_type_code').asstring='1'
  then begin
    Str_Key:=Key;

    if (key<>chr(vk_back))
    and (key<>chr(vk_return))
    then begin

      is_good_:= false;

      if Key in ['a'..'z']
      then begin
        Str_Key := Key;
        Str_Key:= upperCase( Str_Key ); //  UpperCase не работает для Char
        Key := Str_Key[1];
      end;

      if Key in ['A'..'Z']
      then begin
        is_good_:=true;
      end else begin
        showmessage('Серия паспорта должна быть введена латинскими буквами!');
      end;

      if not is_good_
      then key:=#0;

      if length(dbeOK_PASS_SERIYA.Text)>=2
      then begin
        key:=#0;
      end;

    end;
  end;


end;

procedure TBOKForm.actAppointNewExecute(Sender: TObject);
begin
  if cdsOKPersonal.FieldByName('status_code').AsString<>'1'
  then begin
    showmessage('Можно принять только нового сотрудника!');
    exit;
  end;

  If fmSaveOKAppoint = nil Then fmSaveOKAppoint := TfmOKAppoint.Create(Self);
  With fmSaveOKAppoint do
    Begin
      Caption:='Назначение';
//      CBArticle.Visible := false;
//      lBArticle.Visible := false;
//      edArticle.Visible := false;

      If ShowModal = mrOk Then
      Begin
//
      End;
  End;
  fmSaveOKAppoint.Close;
  fmSaveOKAppoint := nil;
  cdsOKPersonal.Refresh;


end;

procedure TBOKForm.edDepChange(Sender: TObject);
var i : integer;
    is_found : boolean;
begin

  DBEdPost.Text:='';
  DBLCBpost.ItemIndex:=-1;
  is_found := false;

  if (cdsOKStat.State in dsEditModes)
  then cdsOKStat.cancel;

  for i:=1 to CBDep.Items.Count
  do begin

    if edDep.text = TData(CBDep.Items.Objects[ i-1 ]).Id
    then begin
        is_found := true;
        CBDep.ItemIndex := i-1;
      cdsOKStat.Filtered := False;
      cdsOKStat.Filter := 'department_code='+
      TData(CBDep.Items.Objects[CBDep.ItemIndex]).Id;
      cdsOKStat.Filtered := True;
    end;

  end;

  if not is_found
  then begin
    CBDep.ItemIndex := -1;
  end;


end;

procedure TBOKForm.DBEdPostChange(Sender: TObject);
var i : integer;
    is_found : boolean;
    SQLParams:TParams;
    sql_ : string;
    salary_ : double;
begin


  if (not (cdsOKStat.State in dsEditModes))
  and (DBEdPost.text <>'')
  then begin
    showmessage('Не указан отдел'+#13+' или'+#13+'вы не включили кнопку "Новый"!');
    DBEdPost.OnChange := nil;
    DBEdPost.text :='';
    DBEdPost.OnChange := DBEdPostChange;
    exit;
  end;

  is_found := false;

  for i:=1 to DBLCBpost.Items.Count
  do begin
//showmessage(edDep.text +' == '+ TData(DBLCBpost.Items.Objects[ i-1 ]).Id);
    if DBEdPost.text = TData(DBLCBpost.Items.Objects[ i-1 ]).Id
    then begin
      is_found := true;
      DBLCBpost.ItemIndex := i-1;
      cdsOKStat.FieldByName('post_code').AsString :=
        TData(DBLCBpost.Items.Objects[DBLCBpost.ItemIndex]).Id;
  // взять у должности разряд и по разряду подставить оклад
///////
      sql_ := 'select ok_service.GET_POST_Salary( :P_POST_CODE ) from dual';
      SQLParams:=TParams.Create;
      with SQLParams do
        begin
           clear;
           CreateParam(ftInteger,'P_POST_CODE',ptInput);
           ParamByName('P_POST_CODE').Value := cdsOKStat.FieldByName('post_code').asinteger;
        end;
      salary_ :=0;
      try
        salary_ := GetSqlResult(sql_,sqlParams);  // :P
      except on e:exception
        do begin
          showmessage('ошибка запроса'+#13+sql_+#13+e.Message);
        end;
      end;
      cdsOKStat.FieldByName('salary_fact').AsFloat := salary_;

      if salary_=0
      then LbOklad.caption :='(не введен)'
      else LbOklad.caption :='           ';

////////

    end;

  end;

  if not is_found
  then begin
    DBLCBpost.ItemIndex := -1;
  end;

end;

procedure TBOKForm.DBLCBpostChange(Sender: TObject);
var
    SQLParams:TParams;
    sql_ : string;
    salary_ : double;
begin


  if DBLCBpost.itemIndex = -1
  then begin
    exit;
  end else begin

    if not (cdsOKStat.State in dsEditModes)
    then begin
      showmessage('Чтобы начать ввод штатного расписания, нажмите кнопку "Новый"!');
      DBLCBpost.itemIndex := -1;
      exit;
    end;

    cdsOKStat.FieldByName('post_code').AsString :=
      TData(DBLCBpost.Items.Objects[DBLCBpost.ItemIndex]).Id;
    DBEdPost.OnChange := nil;
    DBEdPost.text  := TData( DBLCBpost.Items.Objects[ DBLCBpost.ItemIndex]).Id;
  // взять у должности разряд и по разряду подставить оклад
///////
      sql_ := 'select ok_service.GET_POST_Salary( :P_POST_CODE ) from dual';
      SQLParams:=TParams.Create;
      with SQLParams do
        begin
           clear;
           CreateParam(ftInteger,'P_POST_CODE',ptInput);
           ParamByName('P_POST_CODE').Value := cdsOKStat.FieldByName('post_code').asinteger;
        end;
      salary_ :=0;
      try
        salary_ := GetSqlResult(sql_,sqlParams);  // :P
      except on e:exception
        do begin
          showmessage('ошибка запроса'+#13+sql_+#13+e.Message);
        end;
      end;
      cdsOKStat.FieldByName('salary_fact').AsFloat := salary_;
      if salary_=0
      then LbOklad.caption :='(не введен)'
      else LbOklad.caption :='           ';

////////

    DBEdPost.OnChange := DBEdPostChange  ;

  end;

end;

procedure TBOKForm.CBdepChange(Sender: TObject);
begin


  if CBdep.itemIndex = -1
  then begin
    exit;
  end else begin
    if (cdsOKStat.State in dsEditModes)
    then cdsOKStat.cancel;
    
    cdsOKStat.Filtered := False;
    cdsOKStat.Filter := 'department_code='+
    TData(CBDep.Items.Objects[CBDep.ItemIndex]).Id;
    cdsOKStat.Filtered := True;
//    lbDep.caption:=TData(CBDep.Items.Objects[CBDep.ItemIndex]).name;
    edDep.text  := TData(CBDep.Items.Objects[CBDep.ItemIndex]).Id;
  end;

end;

procedure TBOKForm.TreeVKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  TreeVClick(Sender);

end;

procedure TBOKForm.TreeVClick(Sender: TObject);
var
// is_found : boolean;
//  i : integer;
  w : string;
begin

//  showmessage('TreeV.Selected.Text ='+TreeV.Selected.Text+#13+
//              'TreeV.Selected.data ='+ IntToStr(integer(TreeV.Selected.data))
//  );
  if TreeV.Selected=nil
  then exit;

  if integer(TreeV.Selected.data)<>0
  then begin
    cdsDerevo.Locate('id', Integer(TreeV.Selected.data), []);
    lbDepcode.Caption := cdsDerevo.FieldByname('department_code').AsString;
    LbDepname.Caption := cdsDerevo.FieldByname('department_name').AsString;

//    is_found := false;

//    for i:=1 to cbDepType.Items.Count
//    do begin
//      if cdsDerevo.FieldByname('department_type_code').AsString = TData(cbDepType.Items.Objects[ i-1 ]).Id
//      then begin
//        is_found := true;
//        cbDepType.ItemIndex := i-1;
//      end;
//    end;

//    if not is_found
//    then begin
//      cbDepType.ItemIndex := -1;
//    end;

          cdsOKPersonal.BeforePost := nil;
          cdsOKPersonal.DisableControls;

         cdsOKPersonal.close;
         if bosslevel='0'
         then begin

            with cdsOKPersonal.Params
            do begin
                clear;
                CreateParam(ftString,'p_1' ,ptInput);
                ParamByName('p_1').Value := curBranch;
                CreateParam(ftString,'p_2' ,ptInput);
                ParamByName('p_2').Value := lbDepcode.Caption;
                CreateParam(ftString,'p_3' ,ptInput);
                ParamByName('p_3').Value := lbDepcode.Caption;
            end;

            w := ' where p.branch like :p_1'+ // ''''+curBranch+''''+
            ' and (p.department_code=:p_2'+ // lbDepcode.Caption+
            ' or p.department_code in '+
                  '(select d.department_code from ss_ok_department d'+
                  ' connect by d.high_dep_code = prior d.department_code'+
//                  ' start with d.high_dep_code='+ lbDepcode.Caption+') )'
                  ' start with d.high_dep_code=:p_3) )';
         end else begin
            with cdsOKPersonal.Params
            do begin
                clear;
                CreateParam(ftString,'p_1' ,ptInput);
                ParamByName('p_1').Value := curBranch;
                CreateParam(ftString,'p_2' ,ptInput);
                ParamByName('p_2').Value := lbDepcode.Caption;
                CreateParam(ftString,'p_3' ,ptInput);
                ParamByName('p_3').Value := lbDepcode.Caption;
            end;

            w := ' where p.branch=:p_1'+ // ''''+curBranch+''''+
            ' and (p.department_code=:p_2'+ //lbDepcode.Caption+
            ' or p.department_code in '+
                  '(select d.department_code from ss_ok_department d'+
                  ' connect by d.high_dep_code = prior d.department_code'+
//                  ' start with d.high_dep_code='+ lbDepcode.Caption+') )';
                  ' start with d.high_dep_code=:p_3) )';
         end;
          LoadData(cdsOKPersonal,  SQL_OKPersonal+w);
          cdsOKPersonal.Close;

  loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
  addLookUpField_OkPersonal;
// END добавление смотрящих-выше-полей

          cdsOKPersonal.Open;
          cdsOKPersonal.EnableControls;

          cdsOKPersonal.BeforePost := cdsOK_BeforePost;



  end else begin
// выбран корень дерева
//    edDepartmentcode.text  := '';
//    edDepartmentName.text:= '';
//    edDEPARTMENTNUM.text := '';
//    LbDepname.caption := FiltrLevelName;
//    cbDepType.ItemIndex := -1;
  end;

end;

procedure TBOKForm.actDekretExecute(Sender: TObject);
var erMessage   : string;
    sql_, DepartmentCode, PostCode : string;
    v : variant;
// motive_dismissial_code,  ArticleCode
const
  ERROR_NO = 'ORA-20000: ';
begin

//  if cdsOKPersonal.FieldByName('gender_code').AsString<>'2'
//  then begin
//    showmessage('Не могу отправить в декрет сотрудника!');
//    exit;
//  end;

  if cdsOKPersonal.FieldByName('status_code').AsString<>'2'
  then begin
    showmessage('Можно отправить в отпуск только принятого сотрудника!');
    exit;
  end;

  If fmSaveOKDekret = nil Then fmSaveOKDekret := TfmOKDekret.Create(Self);
  With fmSaveOKDekret do
    Begin
      Caption := ' Декретный отпуск ';
      gbDismiss.Caption  := ' Код сотрудника: '+cdsOKPersonal.FieldByName('personal_code').AsString;
      lbFamily.Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
      lbName.Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
      lbPatronymic.Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;

      DepartmentCode := '';
{      sql_ :='select department_name from ss_ok_department '+
                ' where department_code='+cdsOKPERSONAL.FieldByName('Department_Code').AsString+
                ' and state_notes=''A'' ';
}      sql_ :='select department_name from ss_ok_department '+
                ' where department_code=:p_1'+ //cdsOKPERSONAL.FieldByName('Department_Code').AsString+
                ' and state_notes=:p_2'; //''A'' ';
      try
          v := GetSQLResultpar(sql_,cdsOKPERSONAL.FieldByName('Department_Code').AsString,'A');

          If not VarIsNull(v) then begin
            DepartmentCode := v;
            lbDepartment.Caption := DepartmentCode;
          end else begin
            //
          end;
      except
//            showmessage('*1'+sql_);
      end;


      PostCode := '';
{      sql_:= 'select post_name from ss_ok_post '+
                ' where post_code='+cdsOKPERSONAL.FieldByName('Post_Code').AsString+
                ' and state_notes=''A'' ';
}      sql_:= 'select post_name from ss_ok_post '+
                ' where post_code=:p_1'+ //cdsOKPERSONAL.FieldByName('Post_Code').AsString+
                ' and state_notes=:p_2'; //'A'' ';
      try
          v := GetSQLResultpar(sql_,cdsOKPERSONAL.FieldByName('Post_Code').AsString,'A');
          If not VarIsNull(v) then begin
            PostCode := v;
            lbPost.Caption := PostCode;
          end else begin
            //
          end;
      except
//            showmessage('*2'+sql_);
      end;

      if cdsOKPost.Active then
      begin
        If cdsOKPost.State in [dsEdit, dsInsert] then cdsOKPost.Cancel;
      end;
      if cdsOKPersonal.Active then
      begin
        If cdsOKPersonal.State in [dsEdit, dsInsert] then cdsOKPersonal.Cancel;
      end;

      If ShowModal = mrOk Then
      Begin

      End;
    End;

  if ErMessage = ''
  then begin
    fmSaveOKDekret.Close;
    fmSaveOKDekret := nil;
//    if (LastPanel = 'DetailsPanel') and (cdsOKPost.Active) then
//      begin
//
//      end;

//    fmSaveOKChangeFIO.Destroy;
  end;
  
end;

procedure TBOKForm.actDekretOutExecute(Sender: TObject);
var erMessage,sql_   : string;
//var  motive_dismissial_code, ArticleCode   : string;
//    sql_, DepartmentCode, PostCode : string;
//    v : variant;
  lbFamily_Caption,lbName_Caption,lbPatronymic_Caption : string;
//  YesOrNo : boolean;
  YourChoice_ : integer;
const
  ERROR_NO = 'ORA-20000: ';
begin

  if cdsOKPersonal.FieldByName('status_code').AsString<>'5'
  then begin
    showmessage('СОТРУДНИК не в декретном отпуске!!!');
    exit;
  end;

//  If Application.MessageBox(PChar('Вы действительно хотите вывести'+
//    ' сотрудника из декретного отпуска?'),
//    PChar('Выход из декрета'), MB_YESNO or MB_ICONQUESTION) = mrNo
//    then exit;


  YourChoice_:= Application.MessageBox(PChar('YES - Переместить на другую должность при выходе из декрета,'+#13+
    'NO - Восстановить в той же должности.'+#13+'CANCEL - Отмена.'),
    PChar('Выход из декрета'), MB_YESNOCANCEL or MB_ICONQUESTION);
  If YourChoice_=mrYes
  Then Begin

  If fmSaveOKAppoint = nil Then fmSaveOKAppoint := TfmOKAppoint.Create(Self);
  With fmSaveOKAppoint do
    Begin
      Caption:='Перемещение при выходе из декрета';
      If ShowModal = mrOk Then
      Begin
//        cdsOKPersonal.Refresh;
      End;
  End;
  fmSaveOKAppoint.Close;
  fmSaveOKAppoint := nil;
//  bCancel.click;
  end;

  If YourChoice_=mrNo
  Then Begin

//  ErMessage:='';
//  lbFamily_Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
//  lbName_Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
//  lbPatronymic_Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;
  try
    sql_:= 'begin param.ClearParam; end;';
    BOKForm.execSQL(sql_);

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'PERSONAL_CODE',BOKForm.cdsOKPERSONAL.FieldByName('PERSONAL_CODE').AsString );

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'BRANCH',branch);

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'EMP_CODE', UserId );

    sql_:= 'begin OK_SERVICE.DekretOut; end;';
    BOKForm.execSQL(sql_);

    sql_:= 'begin Param.ClearParam; end;';
    BOKForm.execSQL(sql_);

    sql_:= 'COMMIT';
    BOKForm.execSQL(sql_);

    BOKForm.cdsOKPersonal.Refresh;
          if     BOKForm.cdsOKPost.Active
          then begin
                BOKForm.cdsOKPost.Refresh;
          end;

        except
          on E: Exception do
            Begin
              ExecSQL('ROLLBACK');
//showmessage(sql_);
              If Pos(ERROR_NO, E.Message) <> 0 Then
                Begin
                  erMessage := Copy(E.Message, Pos(ERROR_NO, E.Message) + Length(ERROR_NO), Length(E.Message));
                  erMessage := Copy(erMessage, 1, Pos(#10, erMessage) - 1);
                  E.Message := StringReplace(E.Message, #13, '', [rfReplaceAll]);
                  E.Message := StringReplace(E.Message, #10, #13#10, [rfReplaceAll]);
                  ShowErrorBox(erMessage,E.Message,Self.Caption);
                End
              Else If pos('ORA-01400', E.Message) > 0 Then ShowMessage('Ошибка при сохранении(12911). Пожалуйста, заполните пустые поля!'+#13+e.messAge)
                   else ShowMessage(e.Message);
              exit;
            End;
          end;

  showmessage(lbFamily_Caption+' '+
    lbName_Caption+' '+lbPatronymic_Caption+'. Декретный отпуск закончен.');


  end;
  cdsOKPersonal.Refresh;

end;

procedure TBOKForm.actShuBankdaExecute(Sender: TObject);
begin
//

    If not (cdsOKPeriod.State in dsEditModes)
    then begin
      cdsOKPeriod.edit;
    end;
      cdsOKPeriod.FieldByName('type_period_code').AsString := '3';
      cdsOKPeriod.FieldByName('office_name').AsString := edFilial.text;
      cdsOKPeriod.FieldByName('office_address').AsString := edOfficeAddress.text;


end;

procedure TBOKForm.PCDetailsChange(Sender: TObject);
begin
    ActDetailUndoExecute(nil);

end;

procedure TBOKForm.dbedHOME_ADDRESSFACTChange(Sender: TObject);
begin
  if (BOKForm.cdsOKPersonal.State in [dsEdit, dsInsert])
  and (chbGluk.checked)
  then begin
    cdsOKPersonal.FieldByName('home_address').AsString := dbedHOME_ADDRESSFACT.Text ;
    cdsOKPersonal.FieldByName('HOME_ADDRESS_REGION_ID').AsString :=
       cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString ;
    cdsOKPersonal.FieldByName('HOME_ADDRESS_DISTR').AsString :=
       cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_DISTR').AsString ;

  end;

end;

procedure TBOKForm.cdsOKRezervDetailAfterOpen(DataSet: TDataSet);
begin
  If dsOKRezerv.DataSet.Active Then
  Begin
// поставить маску полям типа дата
//    cdsOKRelation.FieldByName('relation_birthday').EditMask  := '!09/09/0099;1;_';
    cdsOKRezervDetail.MasterSource    := dsOKRezerv;
    cdsOKRezervDetail.IndexFieldNames := 'branch;master_id';
    cdsOKRezervDetail.MasterFields    := 'branch;master_id';
  End;

end;

procedure TBOKForm.cdsOKRezervBeforePost(DataSet: TDataSet);
begin

  DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
  DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
  DataSet.Fields.FieldByName('branch').AsString := Branch;

end;

procedure TBOKForm.bbSaveOptionsClick(Sender: TObject);
begin

  With Registry do
    Try
      OpenKey(INIT_KEY + Self.ClassName, True);
      WriteString('edOfficeAddress', edOfficeAddress.Text);
      WriteString('edFilial', edFilial.Text);
      Writebool('chbTabVisible', chbTabVisible.checked);
      Writebool('chbGluk', chbGluk.checked);
//      WriteInteger('clbNoLead',        clbNoLead.Selected);
    Finally
      CloseKey;
    End;

end;

procedure TBOKForm.edSpecialChange(Sender: TObject);
var i : integer;
    is_found : boolean;
begin

  if (not (cdsOKStat.State in dsEditModes))
  and (edSpecial.text <>'')
  and (cdsOKStat.FieldByName('department_code').AsString='')
  then begin
    showmessage('Не указан отдел'+#13+' или'+#13+'вы не включили кнопку "Новый"!');
    edSpecial.OnChange := nil;
    edSpecial.text :='';
    edSpecial.OnChange := edSpecialChange;
    exit;
  end;

  is_found := false;

  for i:=1 to cbSpecial.Items.Count
  do begin
//showmessage(edDep.text +' == '+ TData(DBLCBpost.Items.Objects[ i-1 ]).Id);
    if edSpecial.text = TData(cbSpecial.Items.Objects[ i-1 ]).Id
    then begin
      is_found := true;
      cbSpecial.ItemIndex := i-1;

      if (not (cdsOKStat.State in dsEditModes))
      then cdsOKStat.Edit;

      cdsOKStat.FieldByName('special_code').AsString :=
        TData(cbSpecial.Items.Objects[cbSpecial.ItemIndex]).Id;
    end;

  end;

  if not is_found
  then begin
    cbSpecial.ItemIndex := -1;
  end;

end;

procedure TBOKForm.cbSpecialChange(Sender: TObject);
begin
  if cbSpecial.itemIndex = -1
  then begin
    exit;
  end else begin

    if not (cdsOKStat.State in dsEditModes)
    and (cdsOKStat.FieldByName('department_code').AsString='')
    then begin
      showmessage('Чтобы начать ввод штатного расписания, нажмите кнопку "Новый"!');
      cbSpecial.itemIndex := -1;
      exit;
    end;

    if (not (cdsOKStat.State in dsEditModes))
    then cdsOKStat.Edit;

    cdsOKStat.FieldByName('special_code').AsString :=
      TData(cbSpecial.Items.Objects[cbSpecial.ItemIndex]).Id;
    edSpecial.OnChange := nil;
    edSpecial.text  := TData( cbSpecial.Items.Objects[ cbSpecial.ItemIndex]).Id;
    edSpecial.OnChange := edSpecialChange  ;
  end;

end;

procedure TBOKForm.actReAcceptExecute(Sender: TObject);
var s : string;
begin

  if ((cdsOKPersonal.FieldByName('status_code').AsString='3') or
      (cdsOKPersonal.FieldByName('status_code').AsString='4') )
  then begin
// FAMILY FIRST_NAME PATRONYMIC
  //  ok_personal.status_code=1
    s:='Перевести сотрудника '+
      cdsOKPersonal.FieldByName('family').AsString+' '+
      cdsOKPersonal.FieldByName('first_name').AsString+' '+
      cdsOKPersonal.FieldByName('patronymic').AsString+' '+
      ' в состояние "Введен"?';

    If Application.MessageBox(PChar(s), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
    then begin
      cdsOKPersonal.readonly:=false;
      cdsOKPersonal.edit;
      cdsOKPersonal.FieldByName('status_code').AsString:='1';
      cdsOKPersonal.FieldByName('PRICH_ID').AsString:='';
      cdsOKPersonal.FieldByName('NAME_PR').AsString:='';
      cdsOKPersonal.FieldByName('MOTIVE_OUT').AsString:='';
      cdsOKPersonal.post;
      cdsOKPersonal.readonly:=true;
    end;
  end else begin
    showmessage('Данное действие доступно только для сотрудников со статусом "Уволен" или "Не принят".');
    exit;
  end;
{
  LastPanel := 'OpenPanel';
  pcmainok.ActivePage := OpenPanel_;

  actNew.Checked     := False;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := True ;

  actNew.Enabled     := False;
  actTable.Enabled   := False;
  actForm.Enabled    := False;
  actRef.Enabled     := False;
  actDetails.Enabled := False;
  actReAccept.Enabled   := False;
  actFilter.Enabled  := False;

  actUndoChanges.Enabled := True;
}

end;

procedure TBOKForm.actFindDepExecute(Sender: TObject);
var
  d_is_found: boolean;
  i : integer;
begin
//
  TreeV.FullCollapse;
  cdsDerevo.first;
  if TreeV.Items.Count>0
  then begin
    TreeV.Items.Item[1].Selected := true;
  end;

  d_is_found:= false;
  For i := 0 to TreeV.Items.Count - 1
  do begin
    if (not d_is_found)
    then begin
//showmessage(inttostr(i));
      if i<>0
      then begin
        TreeV.Items.Item[i].Selected := true;
      end;
      TreeV.Selected.Expand(False);
      cdsDerevo.Locate('id', Integer(TreeV.Selected.data), []);

      if (edDepartmentcodeNew.Text =cdsDerevo.FieldByname('department_code').AsString)
      or (edDepartmentNameNew.Text =cdsDerevo.FieldByname('department_name').AsString)
      or (edDEPARTMENTNUMnew.TEXT =cdsDerevo.FieldByname('department_num').AsString)
      then begin
        TreeVclick(nil);
        d_is_found:=true;
      end else begin
//        TreeV.Items.Item[i].Selected := false;
      end;
    end;
  end;

   if (not d_is_found)
   then begin
    showmessage('Не найдено отдела, для которого'+#13+
      'код отдела '+edDepartmentcodeNew.Text+#13+
      'или наименование отдела '+edDepartmentNameNew.Text+#13+
      'или номер отдела '+edDEPARTMENTNUMnew.TEXT +#13 );

   end else begin
    if BOKForm.chbsavefiltr.checked
    then begin
    With BOKForm.Registry do
    Try
      OpenKey(INIT_KEY + 'TBOKForm\TfmFilterPersonal', False);
//      OpenKey(INIT_KEY + TComponent(Self.Owner).ClassName + '\' + Self.ClassName, False);
      WriteString('edDepartment', edDepartmentcodeNew.Text);
    Finally
      CloseKey;
    End;

   end;

  end;

end;

procedure TBOKForm.edDepFindKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  Case Key of
    VK_RETURN:
    begin
      if sender = edDepartmentNameNew
      then begin
        edDEPARTMENTNUMnew.text:='';
        edDepartmentcodeNew.Text:='';
//        edDepartmentNameNew.Text:='';
      end;
      if sender = edDEPARTMENTNUMnew
      then begin
//        edDEPARTMENTNUMnew.text:='';
        edDepartmentcodeNew.Text:='';
        edDepartmentNameNew.Text:='';
      end;
      if sender = edDepartmentcodeNew
      then begin
        edDEPARTMENTNUMnew.text:='';
//        edDepartmentcodeNew.Text:='';
        edDepartmentNameNew.Text:='';
      end;
      actFindDep.execute;
    end;
  end;  

end;

procedure TBOKForm.actIIASExecute(Sender: TObject);
begin
  LastPanel := 'IIASPanel';
  pcmainok.ActivePage := IIASPanel_;

  actiias.Checked := true;

  actCopyPers.Checked     := False ;
  actTable.Checked := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly := false;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);

  if not(cdsdistr.Active)
  then begin
    loaddata(cdsdistr,SQL_S_DISTR);
  end;

  if not(cds_yesno.Active)
  then begin
    loaddata(cds_yesno,SQL_yesno);
  end;

  if not(cdsS_STR.Active)
  then begin
    loaddata(cdsS_STR,SQL_str);
  end;


end;

procedure TBOKForm.dblcbS_STRCloseUp(Sender: TObject);
begin

       if (cdsOKVoyage.State in [dsEdit, dsInsert])
       then begin
         cdsOKVoyage.FieldByName('VOYAGE_LAND').AsString:=
           cdsOKVoyage.FieldByName('voyage_str_show').AsString;
       end;

end;

procedure TBOKForm.actShowPhotoExecute(Sender: TObject);
var sql_ : string;
begin
  if cdsOKPhoto.Active then
  Begin
    cdsOKPhoto.close;
  End;

  sql_:=  SQL_OKPhoto+' where e.branch=:p_1'+ //'''+cdsOKPersonal.fieldbyname('branch').asstring+''''+
    ' and e.personal_code=:p_2'+ //+cdsOKPersonal.fieldbyname('personal_code').asstring ;
        ' and (priznak is null or priznak=:p_3)';

  try
      cdsOKPhoto.close;
      with cdsOKPhoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
    LoadData(cdsOKPhoto, sql_);
  Except
   on E: Exception do
     begin
       ShowMessage(SQL_+#13+' Ошибка '+#13+E.Message);
     end;
  End;

  if ( cdsOKPhoto.recordcount<1 ) and (sender=actShowPhoto)
  then showmessage('Фото отсутствует.');

end;

procedure TBOKForm.BitBtn116Click(Sender: TObject);
var bmp:  TBitmap;
begin
  memobmp.clear;
      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := 2;
          CreateParam(ftInteger,'p_3' ,ptInput);
          ParamByName('p_3').Value := 5;
      end;
  loaddata(cdsTemp,'select * from ok_personal '+
   ' where branch=:p_1'+ //''''+curBranch +''''+
//   ' and status_code in (2,5) order by branch,nn');
   ' and status_code in (:p_2,:p_3) order by branch,nn');
  cdsTemp.First;
  while not  cdsTemp.Eof
  do begin
      cdsokphotobmp.close;
      with cdsokphotobmp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsTemp.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTemp.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
  loaddata(cdsokphotobmp,'SELECT /*+ INDEX (e OK_PHOTO_PK)*/ a.*,  e.PHOTO, '+
    ' lpad(to_char(nvl(a.nn,99)),2,''0'') pers '+
    ' FROM ok_personal a,ok_photo e '+
    ' where a.branch=e.branch and a.personal_code=e.personal_code '+
    ' and a.branch=:p_1'+ //cdsTemp.fieldbyname('branch').asstring+
    ' and a.personal_code=:p_2'+
    ' and (priznak is null or priznak=:p_3)'
    ); //+cdsTemp.fieldbyname('personal_code').asstring);

    with imgSignature.Picture, cdsokphotobmp do
    begin
      Graphic := nil;
      if FieldByName('photo').Value <> '' then
      begin
        Graphic := TJPEGImage.Create;
        Graphic.Assign(FieldByName('photo'));
        bmp := TBitmap.Create;
        try
          bmp.Assign(Graphic);
          memobmp.lines.add(ROOT_DIR+'OK\OK_'+ cdsokphotobmp.fieldbyname('branch').asstring+'_'+
            cdsokphotobmp.fieldbyname('pers').asstring+'_'+
            cdsokphotobmp.fieldbyname('family').asstring+'_'+
            cdsokphotobmp.fieldbyname('FIRST_NAME').asstring+'_'+
            cdsokphotobmp.fieldbyname('PATRONYMIC').asstring+'_'+
            cdsokphotobmp.fieldbyname('personal_code').asstring+'_'+
                        '.bmp');
          bmp.SaveTofile( ROOT_DIR+'OK\OK_'+ cdsokphotobmp.fieldbyname('branch').asstring+'_'+
            cdsokphotobmp.fieldbyname('pers').asstring+'_'+
            cdsokphotobmp.fieldbyname('family').asstring+'_'+
            cdsokphotobmp.fieldbyname('FIRST_NAME').asstring+'_'+
            cdsokphotobmp.fieldbyname('PATRONYMIC').asstring+'_'+
            cdsokphotobmp.fieldbyname('personal_code').asstring+'_'+
                        '.bmp');
        finally
          bmp.Free;
        end;
        if actPhotoActualSize.Checked then
        begin
          ScrollBox.HorzScrollBar.Position := 0;
          ScrollBox.VertScrollBar.Position := 0;
        end;
      end
      else begin
                memobmp.lines.add('нет фото '+ cdstemp.fieldbyname('branch').asstring+'_'+
            cdsTemp.fieldbyname('family').asstring+'_'+
            cdsTemp.fieldbyname('FIRST_NAME').asstring+'_'+
            cdsTemp.fieldbyname('PATRONYMIC').asstring+'_'+
            cdsTemp.fieldbyname('personal_code').asstring);

        if actPhotoActualSize.Checked then
        begin
          imgSignature.Width := 0;
          imgSignature.Height := 0;
        end;
      end;
    end;
    cdstemp.Next;
  end;

end;

procedure TBOKForm.cdsokhospitalAfterOpen(DataSet: TDataSet);
begin

  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsokhospital.MasterSource    := dsOKPersonal;
    cdsokhospital.IndexFieldNames := 'branch;personal_code';
    cdsokhospital.MasterFields    := 'branch;personal_code';
  End;
  Dataset.FieldByName('date_open').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('date_close').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('date_hospital').EditMask  := '!09/09/0099;1;_';

end;

procedure TBOKForm.TabSheet_21Show(Sender: TObject);
begin
  if cdsokhospital.Active then
  Begin
    Exit;
  End;

      cdsokhospital.close;
      with cdsokhospital.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
  LoadData(cdsokhospital, SQL_okhospital+' where branch=:p_1'); //+''''+curBranch +'''');

// 1. lookup поля - если есть :)
  cdsokhospital.Close;
  cdsokhospital.DisableControls;

// 2. проверка датасетов-списков
  if not cdsSSokhospital_Set.Active
  then LoadData(cdsSSokhospital_Set, SQL_SSokhospital_Set);

// 3. Добавление lookup полей
  addLookUpField(cdsokhospital, cdsSSokhospital_Set, 'hospital_code_show', 'hospital_code', 'hospital_code', 'hospital_name', True);
  addLookUpField(cdsokhospital, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsokhospital.Open;
  cdsokhospital.EnableControls;

end;

procedure TBOKForm.cdsOkvoyageAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsOkvoyage.MasterSource    := dsOKPersonal;
    cdsOkvoyage.IndexFieldNames := 'branch;personal_code';
    cdsOkvoyage.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.EnterKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  Case Key of
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
      end;
  end;

end;

procedure TBOKForm.dbedHospitalDateOpenKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var sql_:string;
begin
  Case Key of
    VK_RETURN:
      begin
// подсчитать стаж
        SelectNext(ActiveControl, True, True);
{        sql_:='select ok_service.get_work_period('''+branch+''','+
            cdsokpersonal.fieldbyname('personal_code').asstring+','+
            'to_date('''+cdsokhospital.fieldbyname('date_open').asstring+''',''dd.mm.yyyy'') ) from dual';
}        sql_:='select ok_service.get_work_period(:p_1,:p_2,'+
            'to_date(:p_3,''dd.mm.yyyy'') ) from dual';
        if not (cdsokhospital.state in [dsEdit])
        then cdsokhospital.edit;
        try
          cdsokhospital.fieldbyname('work_period').asstring:=
            getsqlresultpar(sql_, curbranch, cdsokpersonal.fieldbyname('personal_code').asstring,
             cdsokhospital.fieldbyname('date_open').asstring
            );
        except on e:exception
          do begin
            showmessage(sql_+#13+e.message);
            SelectNext(ActiveControl, FALSe, True);

          end;
        end;
      end;
  end;

end;

procedure TBOKForm.dbedHospitalDateCloseKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  sql_:string;
  number_day_:extended;
  day_date_ : tdatetime;
begin
  Case Key of
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
        if not (cdsokhospital.state in [dsEdit])
        then cdsokhospital.edit;

// подсчитать поле 5   . "Фактическое кол-во дней"  - рассчитать от даты открытия до даты закрытия в днях
        if cdsokhospital.fieldbyname('date_open').asdatetime>
           strtodate(dbedHospitalDateClose.text)
        then begin
          showmessage('дата закрытия '+dbedHospitalDateClose.text +
             'должна быть больше даты открытия'+ cdsokhospital.fieldbyname('date_open').asstring);
          exit;
        end;

//        number_day_:= cdsokhospital.fieldbyname('date_close').Asdatetime-
//          cdsokhospital.fieldbyname('date_open').asdatetime ;
        number_day_:=0;
        day_date_:=cdsokhospital.fieldbyname('date_open').asdatetime ;
        while (day_date_<> (strtodate(dbedHospitalDateClose.text) +1))
        do begin
          if (dayofweek(day_date_) <> 7) and (dayofweek(day_date_) <> 1)
          then  number_day_:=number_day_+1;
          day_date_:=day_date_+1;
//showmessage(floattostr(number_day_));
        end;

        try
{          sql_:='select count(*) from Z_DN where pr=0 '+
            ' and dn>= to_date('''+cdsokhospital.fieldbyname('date_open').asstring+''',''dd.mm.yyyy'')'+
            ' and dn<= to_date('''+dbedHospitalDateClose.text+''',''dd.mm.yyyy'')'+
            ' and to_char(dn,''D'') not in (7,1)';
}          sql_:='select count(*) from Z_DN where pr=:p_1 '+
            ' and dn>= to_date(:p_2,''dd.mm.yyyy'')'+
            ' and dn<= to_date(:p_3,''dd.mm.yyyy'')'+
            ' and to_char(dn,:p_4) not in (:p_5,:p_6)';
          number_day_:=number_day_- (
            getsqlresultPAR( sql_,'0', cdsokhospital.fieldbyname('date_open').asstring,
              dbedHospitalDateClose.text,'D','7','1'
              )
            );
        except on e:exception
          do begin
            showmessage(e.Message+#13+sql_);
          end
        end;
//showmessage(floattostr(number_day_));
        cdsokhospital.fieldbyname('number_day').asstring :=floattostr(number_day_);

// подсчитать поле 7 из справочника в зависимости от стажа или от больничного
        if cdsokhospital.fieldbyname('work_period').asstring=''
        then begin
// подсчитать стаж
          sql_:='select ok_service.get_work_period(:p_1,:p_2,'+
              'to_date(:p_3,''dd.mm.yyyy'') ) from dual';
          if not (cdsokhospital.state in [dsEdit])
          then cdsokhospital.edit;
          try
            cdsokhospital.fieldbyname('work_period').asstring:=
              getsqlresultPAR(sql_, curbranch, cdsokpersonal.fieldbyname('personal_code').asstring,
                  cdsokhospital.fieldbyname('date_open').asstring
              );
          except on e:exception
            do begin
              showmessage(sql_+#13+e.message);
            end;
          end;
        end;
{        sql_:='select percentage from ss_ok_hospital '+
          ' where hospital_code='+cdsokhospital.fieldbyname('hospital_code').asstring+
          ' and work_period_from<= '+copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2)+
          ' and work_period_to> '+copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2);
}        sql_:='select percentage from ss_ok_hospital '+
          ' where hospital_code=:p_1'+
          ' and work_period_from<=:p_2 '+ //copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2)+
          ' and work_period_to>:p_3 '; //+copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2);
        try

          if (cdsokhospital.State in [dsEdit, dsInsert])
          then begin
            cdsokhospital.fieldbyname('percentage').asstring:=
              getsqlresultPar(sql_, cdsokhospital.fieldbyname('hospital_code').asstring,
                 copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2),
                 copy( cdsokhospital.fieldbyname('work_period').asstring ,1,2)
            );
          end;
        except on e:exception
          do begin
            showmessage(sql_+#13+e.message);
            SelectNext(ActiveControl, FALSe, True);
          end;
        end;
      end;
  end;

end;

procedure TBOKForm.cdsokprivilegeAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsokprivilege.MasterSource    := dsOKPersonal;
    cdsokprivilege.IndexFieldNames := 'branch;personal_code';
    cdsokprivilege.MasterFields    := 'branch;personal_code';
  End;
  Dataset.FieldByName('date_open').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('date_close').EditMask  := '!09/09/0099;1;_';

end;

procedure TBOKForm.TabSheet_22Show(Sender: TObject);
begin
  if cdsokprivilege.Active then
  Begin
    Exit;
  End;

      cdsokprivilege.close;
      with cdsokprivilege.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
  LoadData(cdsokprivilege, SQL_okprivilege+' where branch=:p_1'); //+''''+curBranch +'''');
  LoadData(cdsSSokprivilege_SET, SQL_SSokprivilege_SET);

// 1. lookup поля - если есть :)
  cdsokprivilege.Close;
  cdsokprivilege.DisableControls;

// 2. проверка датасетов-списков

// 3. Добавление lookup полей
  addLookUpField(cdsokprivilege, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);
  addLookUpField(cdsokprivilege, cdsSSokprivilege_SET, 'privilege_view', 'privilege_code', 'privilege_code', 'privilege_name', False);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsokprivilege.Open;
  cdsokprivilege.EnableControls;

end;

procedure TBOKForm.TabSheet_23Show(Sender: TObject);
begin
  if cdsokincrease.Active then
  Begin
    Exit;
  End;

  LoadData(cdsssokincrease_set, SQL_ssokincrease_SET);
      cdsokincrease.close;
      with cdsokincrease.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
  LoadData(cdsokincrease, SQL_okincrease+' where branch=:p_1'); // '+''''+curBranch +'''');

// 1. lookup поля - если есть :)
  cdsokincrease.Close;
  cdsokincrease.DisableControls;

// 2. проверка датасетов-списков

// 3. Добавление lookup полей
  addLookUpField(cdsokincrease, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);
  addLookUpField(cdsokincrease, cdsSSokincrease_Set, 'increase_code_show', 'increase_code', 'increase_code', 'increase_name', false);

//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsokincrease.Open;
  cdsokincrease.EnableControls;

//  SQL_ssokincrease_SET

end;

procedure TBOKForm.cdsokincreaseAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsokincrease.MasterSource    := dsOKPersonal;
    cdsokincrease.IndexFieldNames := 'branch;personal_code';
    cdsokincrease.MasterFields    := 'branch;personal_code';
  End;
  Dataset.FieldByName('date_open').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('date_close').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('order_date').EditMask  := '!09/09/0099;1;_';
  
end;

procedure TBOKForm.actTabelExecute(Sender: TObject);
begin
  LastPanel := 'RefPanel';
  pcmainok.ActivePage := RefPanel_;

  actCopyPers.Checked     := False ;
  actRef2.Checked     := False ;
  actRef.Checked    := False ;
  actTabel.Checked     := True ;
  actKurs.Checked     := False ;
  actKurs.Checked     := False ;

  actNew.Checked     := False;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  actiias.Checked := false;

  if bosslevel<>'0' then actNew.Enabled         := True ;
  actUndoChanges.Enabled := False;

  OptionsPanel.Visible := False;

  pc.ActivePage:=TabTabel;
  ActDetailUndoExecute(nil);

      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(medbankdate.text,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(medbankdate.text,7,4);
      end;
//  loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(medbankdate.text,4,2)+' and tabel_year='+copy(medbankdate.text,7,4)+' order by department_code,nn' );


  loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 '+
    ' and tabel_month=:p_2'+
    ' and tabel_year=:p_3 '+order_by_tabel );

end;

procedure TBOKForm.addLookUpField_OkPersonal;
begin
// добавление смотрящих-выше-полей
  addLookUpField(cdsOKPersonal, cdsSSOKDepartment_RO,
                'department_show', 'department_code',
                'department_code', 'department_name', TRUE);
//try
  addLookUpField(cdsOKPersonal, cdsSS_OK_GOSUBMIT,
                'gosubmit_show', 'gosubmit_code',
                'gosubmit_code', 'gosubmit_name', false);

  addLookUpField(cdsOKPersonal, cdsSSOKPost_SET,
                'post_show', 'post_code',
                'post_code', 'post_name', False);
//except
//showmessage('*');
//end;

  addLookUpField(cdsOKPersonal, cdsSSOKspecial_SET,
                'special_show', 'special_code',
                'special_code', 'special_name', False);

//  addLookUpField(cdsOKPersonal, cdsSSOKmotive_SET,
//                'motive_show', 'motive_dismissial_code',
//                'motive_dismissial_code', 'motive_dismissial_name', False);

//  GENDER_CODE 	NUMBER (1) not null,	-- 'Пол сотрудника	Выбирается  из системного справочника SS_OK_GENDER, поле GENDER_CODE В отчетную форму выводится наименование пола, видимое поле, обязательное для заполнения'
  addLookUpField(cdsOKPersonal, cdsSSokgender_Set, 'GENDER_SHOW', 'GENDER_CODE', 'GENDER_CODE', 'GENDER_NAME', False);
  addLookUpField(cdsOKPersonal, cdsSSOKEducationTitle_SET, 'EDUCATION_TITLE_SHOW', 'EDUCATION_TITLE_CODE', 'EDUCATION_TITLE_CODE', 'EDUCATION_TITLE_NAME', False);

// здесь distr
//  ShowMessage(cdsSDistrRO2.Fields[0].Value+' '+cdsSDistrRO2.Fields[1].Value+' '+IntToStr(cdsSDistrRO2.RecordCount));
  addLookUpField(cdsOKPersonal, cdsSDistrRO2, 'DISTR_SHOW', 'DISTR', 'DISTR', 'DISTR_NAME', False);
  addLookUpField(cdsOKPersonal, cdsSRegionRO2, 'REGION_SHOW', 'REGION_ID', 'REGION_ID', 'REGION_NAM', False);

  if not cds_Region.Active then LoadData(cds_Region, SQL_Sregion);
  if not cds_distr.Active then LoadData(cds_distr, SQL_Sdistr);
  addLookUpField(cdsOKPersonal, cds_Region, 'HOME_ADDRESSFACT_REGION_ID_SHOW', 'HOME_ADDRESSFACT_REGION_ID', 'REGION_ID', 'REGION_NAM', False);
  addLookUpField(cdsOKPersonal, cds_Region, 'HOME_ADDRESS_REGION_ID_SHOW', 'HOME_ADDRESS_REGION_ID', 'REGION_ID', 'REGION_NAM', False);

  addLookUpField(cdsOKPersonal, cds_distr, 'HOME_ADDRESS_DISTR_SHOW', 'HOME_ADDRESS_DISTR', 'DISTR', 'DISTR_NAME', False);
  addLookUpField(cdsOKPersonal, cds_distr, 'HOME_ADDRESSFACT_DISTR_SHOW', 'HOME_ADDRESSFACT_DISTR', 'DISTR', 'DISTR_NAME', False);

//NATIONALITY_CODE	NUMBER(3) not null, 	-- 'Код национальности 	Выбирается из справочника SS_OK_NATIONALITY  поле NATIONALITY_CODE, видимое поле, обязательное для заполнения'
  addLookUpField(cdsOKPersonal, cdsSSOkNationality_Set, 'NATIONALITY_SHOW', 'NATIONALITY_CODE', 'NATIONALITY_CODE', 'NATIONALITY_NAME', False);

//FAMILIY_STATUS_CODE	NUMBER(1) not null, -- 'Код семейного положения	Выбирается из справочникаSS_OK_FAMILY_STATUSполе FAMILY_STATUS_CODE, видимое поле, обязательное для заполнения'
  addLookUpField(cdsOKPersonal, cdsSSOkFamilyStatus_Set, 'FAMILY_STATUS_SHOW', 'FAMILY_STATUS_CODE', 'FAMILY_STATUS_CODE', 'FAMILY_STATUS_NAME', False);

//REG_TYPE_CODE	NUMBER(1) not null,	-- 'Код типа прописки	Выбирается из справочника SS_OK_REGISTRATION_TYPE, видимое поле, обязательное для заполнения'
  addLookUpField(cdsOKPersonal, cdsSSOkRegType_Set, 'REG_TYPE_SHOW', 'REG_TYPE_CODE', 'REG_TYPE_CODE', 'REG_TYPE_NAME', False);

// статус сотрудника SS_OK_STATUS
  addLookUpField(cdsOKPersonal, cdsSSOkSTATUS_Set, 'STATUS_SHOW', 'STATUS_CODE', 'STATUS_CODE', 'STATUS_NAME', False);

// профсоюз
  addLookUpField(cdsOKPersonal, cdsSSOkProfmember_Set, 'Profmember_SHOW', 'Profmember', 'Profmember', 'Profmember_NAME', False);
//  addLookUpField(cdsOKPersonal, cdsSSOkLeave_Set, 'Leave_SHOW', 'leave_code', 'leave_code', 'leave_NAME', False);

  addLookUpField(cdsOKPersonal, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);


  // END добавление смотрящих-выше-полей
end;

procedure TBOKForm.Button19Click(Sender: TObject);
var App:      OLEVariant;
  Text_i, Text_iB: string;
//  Text1a,Text2a,Text3a,Text4a,Text5a,Text6a,Text7a,Text8a,Text9a,Text10a: string;
//  Text11a, Text12a, Text13a: string;
  ErMes, Text1,Text2, Text22: string;
//  texth3, ,where_pers, where_pers_a
  sql_: string;
//  TextDD,TextMM,TextYYYY :string;
  DaysInAMonth_,i,k:integer;
    Save_Cursor:TCursor;
  text1_1,text2_1,text1_3,text2_3, S_,old_department_name, tabelDate :string;
begin
// в ворд
    tabelDate:=medbankdate.Text;
    DaysInAMonth_:=DaysInAMonth(strtoint(copy(tabelDate,7,4)),strtoint(copy(tabelDate,4,2)));
  sql_:='select tabel_name,department_name, rpad(fio,22,'' '') fio, lpad(tabno,5,'' '') tabno,'+
    ' lpad( trim(to_char(salary,''999.99'')),9,'' '') salary, rpad(post_name,20,'' '') post_name,'+
    'day01,day02,day03,day04,day05,day06,day07,day08,day09,day10,'+
    'day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,'+
    'day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,'+
    'lpad( work_days||''  '',7,'' '') work_days,'+
    'lpad( trim(to_char(work_hours,''999.99''))||''  '',7,'' '') work_hours,'+
    'lpad(work_holidays||''  '',7,'' '') work_holidays, lpad(dekret_days,7,'' '') dekret_days,'+
    'lpad(business_tour_days||''  '',7,'' '') business_tour_days,'+
    'lpad( ill_days||''  '',7,'' '') ill_days, lpad(vacation_days||''  '',7,'' '') vacation_days,'+
    ' lpad(educational_vacation_days||''  '',7,'' '') educational_vacation_days,'+
    ' lpad(nosalary_vacation_days||''  '',7,'' '') nosalary_vacation_days '+
    ' from ok_tabel '+
    ' where branch=:p_1'+ //'''+curbranch+''' '+
    ' and tabel_month=:p_2'+ // copy(tabelDate,4,2)+
    ' and tabel_year=:p_3'+  // copy(tabelDate,7,4)+
      order_by_tabel;

      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;
  try
    loaddata(cdsTabel,sql_ );
  except on e:exception
    do begin
      showmessage(sql_);
//      memo3.lines.add(sql_);
    end;
  end;


    text1_1:= '  No  Фамилия И.О.            Таб.  Оклад        Должность        ';
    text2_1:= ' п.п.                          No                                 ';
//             12345_1234567890123456789012_12345_123456789_12345678901234567890_
    text1_3:= 'Отр.    Отр.    Отр.    Дни в   Дни в   Дни по  Дни в   Дни в   Дни без';
    text2_3:= 'дней    часов   вых.дн  декр.   команд   Б/Л     отп.   уч отп  сохр.оо';
//             1234567_1234567_1234567_1234567_1234567_1234567_1234567_1234567_1234567

    case DaysInAMonth_ of
    28:begin
         text1 := text1_1+'                         Т а б е л ь                    '+text1_3;
         text2 := text2_1+'1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 '+text2_3;
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
       end;
    29:begin
         text1:=text1_1+'                         Т а б е л ь                      '+text1_3;
         text2:=text2_1+'1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 '+text2_3;
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
       end;
    30:begin
         text1:=text1_1+'                         Т а б е л ь                        '+text1_3;
         text2:=text2_1+'1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 '+text2_3;
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
       end;
    31:begin
         text1:=text1_1+'                       Т а б е л ь                            '+text1_3;
         text2:=text2_1+'1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 '+text2_3;
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
       end;
    end;

  ErMes := '';

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }

  if (not fileexists('C:\NCI Bank\Ok\Templates\pril05.doc'))
  and  (not fileexists(GetCurrentDir_templates+'\pril05.doc'))
  then showmessage('не найден файл C:\NCI Bank\Ok\Templates\pril05.doc'+#10#13+
               ' и не найден файл '+GetCurrentDir_templates+'\pril05.doc' )
  else
  TRY
    { Do some lengthy operation }

    App := PrepareOle( 'pril05.doc' ,'Word.Application');
//   App.visible:=true;


    If VarIsNull(App) Then
    begin
      showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\pril05.doc .' +#10#13+
           ' и не найден файл '+GetCurrentDir_templates+'\pril05.doc' +#10#13+
      'Пожалуйста проверьте наличие этого файла.' );
      Exit;
    end;
//App.Visible:=true;
    try

      App.Selection.Find.Execute('<TEXTH1>', false, false, false, false, false,
             true, 1, false, cdstabel.fieldbyname('TABEL_NAME').asstring, 2);

      text_i := '';
      text_iB := '';
      ErMes:='Табель';

    //  row:=1;
      sql_ := 'App.Selection.GoTo(2, 1, 4, '''');';
    //  App.Selection.GoTo(2, 1, 4, '');
    //showmessage('1') ;
      App.Selection.GoTo(2, 1, 4, '');

      sql_:='App.Selection.SelectRow;';
    //showmessage('2') ;
      App.Selection.SelectRow;

      sql_:='App.Selection.Copy;';
    //showmessage('3') ;
      App.Selection.Copy;

      k:=cdstabel.RecordCount;
      cdsTabel.DisableControls;
      cdstabel.Last;
    //  While not cdstabel.eOF do
    //    begin
    //      cdstabel.Next;
    //    end;
      S_ :=uppercase('*fio*'+'*tabno*'+'*salary*'+'*post_name*'
            +'*day01*'+'*day02*'+'*day03*'+'*day04*'+'*day05*'+'*day06*'+'*day07*'+'*day08*'+'*day09*'+'*day10*'
            +'*day11*'+'*day12*'+'*day13*'+'*day14*'+'*day15*'+'*day16*'+'*day17*'+'*day18*'+'*day19*'+'*day20*'
            +'*day21*'+'*day22*'+'*day23*'+'*day24*'+'*day25*'+'*day26*'+'*day27*'+'*day28*'+'*day29*'+'*day30*'+'*day31*'
            +'*work_days*'+'*work_hours*'+'*work_holidays*'+'*dekret_days*'+'*business_tour_days*'
            +'*ill_days*'+'*vacation_days*'+'*educational_vacation_days*'+'*nosalary_vacation_days*');

      While not cdstabel.bOF
      do begin
          text22:= rightstr('   '+inttostr(k)+'.',5);
          k:=k-1;
          for i:=0 to cdbgtabel.Columns.Count-1
          do begin
//              text22 := text22+' '+cdbgtabel.Columns[i].FieldName;
            if cdbgtabel.Columns[i].visible
            then begin
              if Pos( uppercase('*'+cdbgtabel.Columns[i].FieldName+'*')  ,S_)>0
              then
              text22 := text22+' '+cdbgtabel.fields[i].AsString;
//              text22 := text22+' '+uppercase('*'+cdbgtabel.Columns[i].FieldName+'*')+cdbgtabel.fields[i].AsString;
            end;
          end;
          if length(text22)>250 then text22:=copy(text22,1,255);
  //        showmessage(text22) ;
          sql_ :=inttostr(length(text22));
          App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                           true, 1, false, text22, 1);
  //        sql_ := 'App.Selection.InsertRows(1);';
  //        App.Selection.InsertRows(1);
          sql_ := 'App.Selection.paste;';
          App.Selection.Paste;

          old_department_name:= cdstabel.FieldByName('department_name').asstring;
          cdstabel.prior;
          if  old_department_name<> cdstabel.FieldByName('department_name').asstring
          then begin
            App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                             true, 1, false, old_department_name, 1);
            sql_ := 'App.Selection.paste;';
            App.Selection.Paste;

          end;

      end;
          old_department_name:= '                                                                      '+
                     cdstabel.FieldByName('department_name').asstring;
          App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                           true, 1, false, old_department_name, 1);
  //        sql_ := 'App.Selection.InsertRows(1);';
  //        App.Selection.InsertRows(1);
          sql_ := 'App.Selection.paste;';
          App.Selection.Paste;

// 2 Строка таблицы
      App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                         true, 1, false, text2, 1);
        sql_ := 'App.Selection.paste;';
        App.Selection.Paste;
// 1 Строка таблицы
      App.Selection.Find.Execute('<TEXT22>', false, false, false, false, false,
                                         true, 1, false, text1, 1);

// до этой команды приложение word работает в фоновом режиме
      App.visible:=true;
      App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\temp.doc"');

    except on e:exception
    do
      begin
//  App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\temp.doc"');
        App.Application.Quit(false); // выход из ворда совсем без сохранения
        showmessage(e.Message+#13+ermes+#13+sql_);
//  App.Application.Quit(true); // выход из ворда с сохранением
//  V.Quit(false); // выход из ексцеля совсем без сохранения

        raise;
      end;
    end;

    App := unassigned;
//  V := unassigned;
//        App.Selection.EndKey(6);
//    App.ActiveDocument.Range.InsertAfter('one' +#9+ 'two' +#9+ 'three'+#10);
//    App.ActiveDocument.Range.ConvertToTable(Separator:=Chr(9), NumRows:=1, NumColumns:=3);

  FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
    cdsTabel.ENableControls;
  END;

end;

procedure TBOKForm.Button17Click(Sender: TObject);
var curr_m, next_m, curr_y, next_y, sql_ ,otpusk_char: string;
  I, Day, Time, Bd, Ed,DaysInAMonth_ : Word;
  DatTmp : TdateTime;
  //HolDay,
  D, SqlT, T, Tmp, Clock : String;
  TabelDate : string;
  pk : integer;
  sqlparams:tparams;
begin
  sqlparams:=tparams.create;
//showmessage(inttostr(Dayofweek(now)));
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;

    if not(cdsTabel.Active)
    then begin
      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;
//       loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)+' order by department_code,nn' );
       loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );
    end;
    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;
    if curr_m='12'
    then begin
      next_m:='01';
      next_y:= inttostr(strtoint(curr_y)+1);
    end else begin
      next_m:= inttostr(strtoint(curr_m)+1);
      next_y:=  curr_y;
    end;

//    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));
    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));
{
    case DaysInAMonth_ of
      28: begin
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      29: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      30: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
          end;
      31: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
          end;
    end;
}
// СТАВКА рабочего времени, менять всем где не цифра 8
//    sql_:='select * from ok_zp_rate where branch=:p_1'+ //'''+curbranch+''''+
//      ' and ZP_RATE_CODE <>:p_2'+ //8'+
//      ' AND ( (ZP_RATE_DATE <=TO_DATE(''01.'+COPY(TABELDATE,4,7)+''',''DD.MM.YYYY'')'+
//             ' and (ZP_RATE_DATE_END is null or ZP_RATE_DATE_END >= TO_DATE(''01.'+COPY(TABELDATE,4,7)+''',''DD.MM.YYYY'') ) )'+
//         ' or (ZP_RATE_DATE >TO_DATE(''01.'+COPY(TABELDATE,4,7)+''',''DD.MM.YYYY'')'+
//             ' and (ZP_RATE_DATE_END is null or ZP_RATE_DATE_END >= TO_DATE(''01.'+COPY(TABELDATE,4,7)+''',''DD.MM.YYYY'') ) )'+
//           ')';
    sql_:='select * from ok_zp_rate where branch=:p_1'+ //'''+curbranch+''''+
      ' and ZP_RATE_CODE <>:p_2'+ //8'+
      ' AND ( (ZP_RATE_DATE <=TO_DATE(:p_3,:p_4)'+
             ' and (ZP_RATE_DATE_END is null or ZP_RATE_DATE_END >= TO_DATE(:p_5,:p_6) ) )'+
         ' or (ZP_RATE_DATE >TO_DATE(:p_7,:p_8)'+
             ' and (ZP_RATE_DATE_END is null or ZP_RATE_DATE_END >= TO_DATE(:p_9,:p_10) ) )'+
           ')';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := 8;


          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_5' ,ptInput);
          ParamByName('p_5').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_7' ,ptInput);
          ParamByName('p_7').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_8' ,ptInput);
          ParamByName('p_8').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_9' ,ptInput);
          ParamByName('p_9').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_10' ,ptInput);
          ParamByName('p_10').Value := 'dd.mm.yyyy';
      end;

    try
      loaddata(cdsTabelLeave,sql_); // binded 22.11.2011
    Except on e:exception
      do begin
        execsql('rollback');
        ShowMessage(sql_+#13+e.message);
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;
    while not cdsTabelLeave.eof
    do begin
//memo3.lines.add('personal_code='+cdsTabelLeave.fieldbyname('personal_code').asstring) ;
      otpusk_char:=cdsTabelLeave.fieldbyname('zp_rate_code').asstring;

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
//        D := Copy('01.'+copy(TabelDate,4,7),4,2);
        D := '01.'+copy(TabelDate,4,7) ;
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE').AsString,4,7) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE').AsString,1,2)) - 1;
        If Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE_END').AsString,4,7) = D Then
          Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE_END').AsString,1,2)) - 1;

        For I := Bd to Ed do
        Begin
//          If Copy(DateToStr(DatTmp + I),4,7) = D Then
            If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
            Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''*''';   // выходной
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   // выходной
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:='*';
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end Else begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''';  // отпуск
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end;
//          Else
//              Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''?''';
        End;


{        sql_:=SqlT + ' Where branch='''+curbranch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+
        ' and TABEL_YEAR='+curr_y ;
}
        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


memo3.lines.add(sql_);
        try
          if SqlT <> 'Update ok_Tabel Set '
          then execsql(sql_, sqlparams); //
        Except on e:exception
          do begin
            execsql('rollback');
            ShowMessage('ставка рабочего времени'+#13+sql_+#13+e.message);
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;

// end СТАВКА рабочего времени, менять всем где не цифра 8

// ОТПУСК
//    sql_:='select * from ok_leave where branch='''+curbranch+''''+
//      ' and LEAVE_CODE <>4'+
//      ' and LEAVE_CODE <>7'+
//      ' and ((DATE_IN_LEAVE>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
//          ' and DATE_IN_LEAVE<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
//      ' or (DATE_OUT_LEAVE>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
//          ' and (DATE_OUT_LEAVE is null or DATE_OUT_LEAVE<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'')) )'+
//      ' or (DATE_IN_LEAVE<to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
//          ' and (DATE_OUT_LEAVE is null or DATE_OUT_LEAVE>=to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'')) ) )'+
//          ' order by personal_code,DATE_IN_LEAVE';
    sql_:='select * from ok_leave where branch=:p_1'+
      ' and LEAVE_CODE <>:p_2'+
      ' and LEAVE_CODE <>:p_p3'+
      ' and ((DATE_IN_LEAVE>=to_date(:p_3,:p_4)'+
          ' and DATE_IN_LEAVE<to_date(:p_5,:p_6) )'+
      ' or (DATE_OUT_LEAVE>=to_date(:p_7,:p_8) '+
          ' and (DATE_OUT_LEAVE is null or DATE_OUT_LEAVE<to_date(:p_9,:p_10)) )'+
      ' or (DATE_IN_LEAVE<to_date(:p_11,:p_12) '+
          ' and (DATE_OUT_LEAVE is null or DATE_OUT_LEAVE>=to_date(:p_13,:p_14)) ) )'+
          ' order by personal_code,DATE_IN_LEAVE';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := 4;
          CreateParam(ftInteger,'p_p3' ,ptInput);
          ParamByName('p_p3').Value := 7;

          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_5' ,ptInput);
          ParamByName('p_5').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_7' ,ptInput);
          ParamByName('p_7').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_8' ,ptInput);
          ParamByName('p_8').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_9' ,ptInput);
          ParamByName('p_9').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_10' ,ptInput);
          ParamByName('p_10').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_11' ,ptInput);
          ParamByName('p_11').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_12' ,ptInput);
          ParamByName('p_12').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_13' ,ptInput);
          ParamByName('p_13').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_14' ,ptInput);
          ParamByName('p_14').Value := 'dd.mm.yyyy';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
//memo3.lines.add(sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage('отпуск'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;
    while not cdsTabelLeave.eof
    do begin
//memo3.lines.add('personal_code='+cdsTabelLeave.fieldbyname('personal_code').asstring) ;

//--1	Мехнат таътили рабочий
//--2	Ўкув таътили учебный
//--3	Иш хаки сакланмаган неоплач
//--4	Ижтимоий таътил ?
//--5	Декрет декретный
      otpusk_char:='?';
        case cdsTabelLeave.fieldbyname('leave_code').asinteger of
         1:otpusk_char:='О';
         2:otpusk_char:='У';
         3:otpusk_char:='#';
         4:otpusk_char:='#';
         5:otpusk_char:='Д';
         6:otpusk_char:='#';
         8:otpusk_char:='#';
        end;

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
//        D := Copy('01.'+copy(TabelDate,4,7),4,2);
        D := copy(TabelDate,4,7); // месяц.год
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('DATE_IN_LEAVE').AsString,4,7) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('DATE_IN_LEAVE').AsString,1,2)) - 1;
        If Copy(cdsTabelLeave.FieldByName('DATE_OUT_LEAVE').AsString,4,7) = D Then
          Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('DATE_OUT_LEAVE').AsString,1,2)) - 1;
// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Bd='+inttostr(Bd)+'   ed='+inttostr(ed));

        For I := Bd to Ed do
        Begin
//memo3.lines.add('bd='+inttostr(bd)+'   '+'ed='+inttostr(ed)+'   '+'i='+inttostr(i)) ;
//memo3.lines.add('Copy(DateToStr(DatTmp + I),4,2)='+Copy(DateToStr(DatTmp + I),4,2) +'   '+' D='+ D) ;

// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Copy(DateToStr(DatTmp + I),4,2)='+Copy(DateToStr(DatTmp + I),4,2));
          If Copy(DateToStr(DatTmp + I),4,7) = D Then
//            If  (DayOfWeek(DatTmp + I) = 7) Then
            If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
            Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''*''';   // выходной
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   // выходной
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:='*';
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end Else begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''' ; // отпуск
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end;
//          Else
//              Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''8''';
        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try


          if SqlT <> 'Update ok_Tabel Set '
          then execsql(sql_, sqlparams); //
        Except on e:exception
          do begin

            execsql('rollback');

            cdsTemp.Close;
            with cdsTemp.Params
            do begin
                clear;
                CreateParam(ftString,'p_1' ,ptInput);
                ParamByName('p_1').Value := curBranch;
                CreateParam(ftString,'p_2' ,ptInput);
                ParamByName('p_2').Value := cdsTabelLeave.FieldByName('personal_CODE').AsString;
            end;
//            loaddata(cdsTemp,'select * from ok_personal Where branch='''+branch+''' '+
//              ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString);
            loaddata(cdsTemp,'select * from ok_personal Where branch=:p_1'+
              ' and personal_Code=:p_2');

           ShowMessage('сотрудник '+
           cdsTemp.fieldbyname('FAMILY').asstring+' '+
           cdsTemp.fieldbyname('FIRST_NAME').asstring+' '+
           cdsTemp.fieldbyname('PATRONYMIC').asstring+#13+
                otpusk_char+'=буква отпуска  '+
                ' в отпуск '+cdsTabelLeave.FieldByName('DATE_IN_LEAVE').AsString+
                ' из отпуска '+cdsTabelLeave.FieldByName('DATE_OUT_LEAVE').AsString+
                ' в текущем периоде (месяц.год)=('+D+') с '+inttostr(bd)+' по '+inttostr(ed)+#13+
                sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;
// end ОТПУСК

/////////////// отзыв
{    sql_:='select * from ok_leave where branch='''+curbranch+''''+
      ' and (date_recall_begin>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
          ' and date_recall_begin<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_recall_end>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_recall_end<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_recall_begin<to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_recall_end>=to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )';
}
    sql_:='select * from ok_leave where branch=:p_1'+
      ' and (date_recall_begin>=to_date(:p_d1,:p_d2)'+
          ' and date_recall_begin<to_date(:p_d3,:p_d4) )'+
      ' or (date_recall_end>=to_date(:p_d5,:p_d6) '+
          ' and date_recall_end<to_date(:p_d7,:p_d8) )'+
      ' or (date_recall_begin<to_date(:p_d9,:p_d10) '+
          ' and date_recall_end>=to_date(:p_d11,:p_d12) )';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d3' ,ptInput);
          ParamByName('p_d3').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_d4' ,ptInput);
          ParamByName('p_d4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d5' ,ptInput);
          ParamByName('p_d5').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d6' ,ptInput);
          ParamByName('p_d6').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d7' ,ptInput);
          ParamByName('p_d7').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d8' ,ptInput);
          ParamByName('p_d8').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d9' ,ptInput);
          ParamByName('p_d9').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d10' ,ptInput);
          ParamByName('p_d10').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d11' ,ptInput);
          ParamByName('p_d11').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d12' ,ptInput);
          ParamByName('p_d12').Value := 'dd.mm.yyyy';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage('отзыв'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;

    while not cdsTabelLeave.eof
    do begin
//--1	Мехнат таътили рабочий
//--2	Ўкув таътили учебный
//--3	Иш хаки сакланмаган неоплач
//--4	Ижтимоий таътил ?
//--5	Декрет декретный
      otpusk_char:='8';

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
        D := Copy('01.'+copy(TabelDate,4,7),4,2);
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('date_recall_begin').AsString,4,2) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('date_recall_begin').AsString,1,2)) - 1;
        If Copy(cdsTabelLeave.FieldByName('date_recall_end').AsString,4,2) = D Then
          Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('date_recall_end').AsString,1,2)) - 1;

        For I := Bd to Ed do
        Begin
          If Copy(DateToStr(DatTmp + I),4,2) = D Then
            If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
            Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''*''' ;  // выходной
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   // выходной
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:='*';
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end Else begin
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '= OLDDay' + LPad(IntToStr(I+1),2,'0'); // отпуск
                // из бекапного поля берется исходный символ
                SqlT := SqlT + T + Tmp;
                T := ',';
            end;
//          Else
//              Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = OLDDay' + LPad(IntToStr(I+1),2,'0');
        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try
          if SqlT <> 'Update ok_Tabel Set '
          then          execsql(sql_, sqlparams);   //
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('(2)отзыв'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;

/////////////// END отзыв

// БОЛЬНИЧНЫЕ
{    sql_:='select * from ok_hospital where branch='''+curbranch+''''+
      ' and (date_open>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
          ' and date_open<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_close>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_close<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_open<to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_close>=to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )';
}
    sql_:='select * from ok_hospital where branch=:p_1'+
      ' and (date_open>=to_date(:p_d1,:p_d2)'+
          ' and date_open<to_date(:p_d3,:p_d4) )'+
      ' or (date_close>=to_date(:p_d5,:p_d6) '+
          ' and date_close<to_date(:p_d7,:p_d8) )'+
      ' or (date_open<to_date(:p_d9,:p_d10) '+
          ' and date_close>=to_date(:p_d11,:p_d12) )';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d3' ,ptInput);
          ParamByName('p_d3').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_d4' ,ptInput);
          ParamByName('p_d4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d5' ,ptInput);
          ParamByName('p_d5').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d6' ,ptInput);
          ParamByName('p_d6').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d7' ,ptInput);
          ParamByName('p_d7').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d8' ,ptInput);
          ParamByName('p_d8').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d9' ,ptInput);
          ParamByName('p_d9').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d10' ,ptInput);
          ParamByName('p_d10').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d11' ,ptInput);
          ParamByName('p_d11').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d12' ,ptInput);
          ParamByName('p_d12').Value := 'dd.mm.yyyy';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage('больничные'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;

    while not cdsTabelLeave.eof
    do begin
      otpusk_char:='?';
        case cdsTabelLeave.fieldbyname('hospital_code').asinteger of
         1001:otpusk_char:='Б';
         1002:otpusk_char:='Д';
        end;

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
        D := Copy('01.'+copy(TabelDate,4,7),4,2);
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('date_open').AsString,4,2) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('date_open').AsString,1,2)) - 1;
        If Copy(cdsTabelLeave.FieldByName('date_close').AsString,4,2) = D Then
          Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('date_close').AsString,1,2)) - 1;
// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Bd='+inttostr(Bd)+'   ed='+inttostr(ed));

        For I := Bd to Ed do
        Begin
// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Copy(DateToStr(DatTmp + I),4,2)='+Copy(DateToStr(DatTmp + I),4,2));
          If Copy(DateToStr(DatTmp + I),4,2) = D Then
            If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
            Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''*''' ;  // выходной
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   // выходной
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:='*';
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end Else begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+''''; // отпуск
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end;
//          Else
//              Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''8''';
        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try
          if SqlT <> 'Update ok_Tabel Set '
          then          execsql(sql_, sqlparams); //
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('(2)больничные'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;
// end БОЛЬНИЧНЫЕ

// КОМАНДИРОВКИ
{    sql_:='select * from ok_business_voyage where branch='''+curbranch+''''+
      ' and (date_open>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
          ' and date_open<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_close>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_close<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )'+
      ' or (date_open<to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'') '+
          ' and date_close>=to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )';
}
    sql_:='select * from ok_business_voyage where branch=:p_1'+
      ' and (date_open>=to_date(:p_d1,:p_d2)'+
          ' and date_open<to_date(:p_d3,:p_d4) )'+
      ' or (date_close>=to_date(:p_d5,:p_d6) '+
          ' and date_close<to_date(:p_d7,:p_d8) )'+
      ' or (date_open<to_date(:p_d9,:p_d10) '+
          ' and date_close>=to_date(:p_d11,:p_d12) )';
      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d3' ,ptInput);
          ParamByName('p_d3').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_d4' ,ptInput);
          ParamByName('p_d4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d5' ,ptInput);
          ParamByName('p_d5').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d6' ,ptInput);
          ParamByName('p_d6').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d7' ,ptInput);
          ParamByName('p_d7').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d8' ,ptInput);
          ParamByName('p_d8').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d9' ,ptInput);
          ParamByName('p_d9').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d10' ,ptInput);
          ParamByName('p_d10').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_d11' ,ptInput);
          ParamByName('p_d11').Value := '01.'+next_m+'.'+next_y ;
          CreateParam(ftString,'p_d12' ,ptInput);
          ParamByName('p_d12').Value := 'dd.mm.yyyy';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage('командировки'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;

    while not cdsTabelLeave.eof
    do begin
      otpusk_char:='К';

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
        D := Copy('01.'+copy(TabelDate,4,7),4,2);
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('date_open').AsString,4,2) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('date_open').AsString,1,2)) - 1;
        If Copy(cdsTabelLeave.FieldByName('date_close').AsString,4,2) = D Then
          Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('date_close').AsString,1,2)) - 1;
// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Bd='+inttostr(Bd)+'   ed='+inttostr(ed));

        For I := Bd to Ed do
        Begin
// if cdsTabelLeave.FieldByName('personal_CODE').AsString='356'
// then memotest.lines.add('Copy(DateToStr(DatTmp + I),4,2)='+Copy(DateToStr(DatTmp + I),4,2));
          If Copy(DateToStr(DatTmp + I),4,2) = D Then
//            If  (DayOfWeek(DatTmp + I) = 7) Then
            If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
            Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''*''' ;  // выходной
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   // выходной
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:='*';
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end Else begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''';  // отпуск
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
                SqlT := SqlT + T + Tmp;
                T := ',';
            end;
//          Else
//              Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = ''8''';
        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try
          if SqlT <> 'Update ok_Tabel Set '
          then          execsql(sql_, sqlparams);  //
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('(2)командировки'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;

// end КОМАНДИРОВКИ
// РАБОЧИЕ-ВЫХОДНЫЕ-ПРАЗДНИЧНЫЕ
// day_status 0-РАБОЧИЕ--1-ВЫХОДНЫЕ--2-ПРАЗДНИЧНЫЕ

{          sql_:='select * from OFF_DAYS '+
          ' where (off_day>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
          ' and off_day<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') )';
}
          sql_:='select * from OFF_DAYS '+
            ' where (off_day>=to_date(:p_d1,:p_d2)'+
            ' and off_day<to_date(:p_d3,:p_d4) )';
      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage(sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;
    SqlT := 'Update ok_Tabel Set ';
    T:='';
    I:=0;
    while not cdsTabelLeave.eof
    do begin
// day_status 1-РАБОЧИЕ--0-ВЫХОДНЫЕ--2-ПРАЗДНИЧНЫЕ
      otpusk_char:='?';
      If (DayOfWeek(cdsTabelLeave.fieldbyname('OFF_DAY').asdatetime) = 7)
      or (DayOfWeek(cdsTabelLeave.fieldbyname('OFF_DAY').asdatetime) = 1)
      Then begin
        otpusk_char:='*';
//        Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''';  // проставить day_status 0-РАБОЧИЕ--1-ВЫХОДНЫЕ--2-ПРАЗДНИЧНЫЕ
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
        SqlT := SqlT + T + Tmp;
        T := ',';
      end;
      I:=I+1;
      cdsTabelLeave.next;
    end;

{        sql_:=SqlT+ ' Where branch='''+branch+''' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
        //*  inc(pk);

        try
          if SqlT <> 'Update ok_Tabel Set '
          then           execsql(sql_, sqlparams); //
          execsql('commit');
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('дни'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

// end РАБОЧИЕ-ВЫХОДНЫЕ-ПРАЗДНИЧНЫЕ

// УВОЛЕННЫЕ
// дата увольнения рабочий день
{        sql_:= 'select * from ok_period where branch='''+curbranch+''' '+
          ' and OUT_OFFICE_DATE>to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
          ' and OUT_OFFICE_DATE<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
          ' and (branch,personal_code) in ( select branch,personal_code from '+
          ' ok_personal Where branch='''+branch+''' and status_code=4)';
}
        sql_:= 'select * from ok_period where branch=:p_1'+
          ' and OUT_OFFICE_DATE>to_date(:p_d1,:p_d2)'+
          ' and OUT_OFFICE_DATE<to_date(:p_d3,:p_d4) '+
          ' and (branch,personal_code) in ( select branch,personal_code from '+
          ' ok_personal Where branch=:p_2 and status_code=:p_3)';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_d3' ,ptInput);
          ParamByName('p_d3').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_d4' ,ptInput);
          ParamByName('p_d4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := curBranch;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '4';
      end;
    try
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin

        execsql('rollback');
        ShowMessage('уволенные'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;

    while not cdsTabelLeave.eof
    do begin
      otpusk_char:='·';

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
        D := Copy('01.'+copy(TabelDate,4,7),4,2);
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
        Ed := DaysInAMonth_-1;
        If Copy(cdsTabelLeave.FieldByName('OUT_OFFICE_DATE').AsString,4,2) = D Then
          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('OUT_OFFICE_DATE').AsString,1,2)) ;
          // дату увольнения считать последним рабочим днем а было -1

        For I := Bd to Ed do
        Begin
          If Copy(DateToStr(DatTmp + I),4,2) = D
          Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''';
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);

            SqlT := SqlT + T + Tmp;
            T := ',';
          end;

        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try
//memotest.lines.add(sql_);
          if SqlT <> 'Update ok_Tabel Set '
          then          execsql(sql_, sqlparams);  //
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('(2)уволенные'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;

// end Уволенные

// принятые в этом месяце
// дата принятия рабочий день
{        sql_:= 'select * from ok_period where branch='''+curbranch+''' '+
//        ' and IN_OFFICE_DATE>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
        ' and IN_OFFICE_DATE>to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
        ' and IN_OFFICE_DATE<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
        ' and (branch,personal_code) in ( select branch,personal_code from '+
        ' ok_personal Where branch='''+branch+''' and status_code=2)';
}        sql_:= 'select * from ok_period where branch=:p_1'+
//        ' and IN_OFFICE_DATE>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+ закоментировано правильно-так и надо.
        ' and IN_OFFICE_DATE>to_date(:p_d1,:p_d2) '+
        ' and IN_OFFICE_DATE<to_date(:p_d3,:p_d4) '+
        ' and (branch,personal_code) in ( select branch,personal_code from '+
        ' ok_personal Where branch=:p_2 and status_code=:p_3)';

      cdsTabelLeave.close;
      with cdsTabelLeave.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;

          CreateParam(ftString,'p_d1' ,ptInput);
          ParamByName('p_d1').Value := '01.'+COPY(TABELDATE,4,7);
          CreateParam(ftString,'p_d2' ,ptInput);
          ParamByName('p_d2').Value := 'dd.mm.yyyy';
          CreateParam(ftString,'p_d3' ,ptInput);
          ParamByName('p_d3').Value := '01.'+next_m+'.'+next_y;
          CreateParam(ftString,'p_d4' ,ptInput);
          ParamByName('p_d4').Value := 'dd.mm.yyyy';

          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := curBranch;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '2';
      end;
    try
//memotest.lines.add(sql_);
      loaddata(cdsTabelLeave,sql_);
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage('уволенные'+#13+sql_+#13+e.message);
//exit;
      end;
    End;

    cdsTabelLeave.first;
    pk:=1; sqlparams.clear;

    while not cdsTabelLeave.eof
    do begin
      otpusk_char:='·';

        DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
        D := Copy('01.'+copy(TabelDate,4,7),4,2);
// ?        HolDay := SelOneCol('Select Prim From Pers_Setup Where Id Like ''600%''');
//        Day := 0;
//        Time := 0;
        SqlT := 'Update ok_Tabel Set ';
        T := '';
        Bd := 0;
//        Ed := DaysInAMonth_-1;
        Ed := StrToInt(Copy(cdsTabelLeave.FieldByName('IN_OFFICE_DATE').AsString,1,2))-1-1;
//        If Copy(cdsTabelLeave.FieldByName('IN_OFFICE_DATE').AsString,4,2) = D Then
//          Bd := StrToInt(Copy(cdsTabelLeave.FieldByName('IN_OFFICE_DATE').AsString,1,2)) ;
          // дату увольнения считать последним рабочим днем а было -1

        For I := Bd to Ed do
        Begin
          If Copy(DateToStr(DatTmp + I),4,2) = D
          Then begin
//                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + ' = '''+otpusk_char+'''';
                Tmp := 'Day' + LPad(IntToStr(I+1),2,'0') + '=:p_'+inttostr(pk);   //
                  sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
                  sqlparams.ParamByName('p_'+inttostr(pk)).Value:=otpusk_char;
                  inc(pk);
            SqlT := SqlT + T + Tmp;
            T := ',';
          end;
        End;


{        sql_:=SqlT + ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabelLeave.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}        sql_:=SqlT +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and personal_Code=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=cdsTabelLeave.FieldByName('personal_CODE').AsString;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_m;
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curr_y;
          inc(pk);


        try
memo3.lines.add(sql_);
          if SqlT <> 'Update ok_Tabel Set '
          then          execsql(sql_, sqlparams);  //
        Except on e:exception
          do begin
//memotest.lines.add(sql_);
            execsql('rollback');
            ShowMessage('(2)уволенные'+#13+sql_+#13+e.message);
//exit;
          end;
        End;

      cdsTabelLeave.next;
    end;

    try
//      execSql(sql_);
      execSql('commit');
    except on e:exception
      do begin
        execSql('rollback');
        showmessage(e.message);
      end;
    end;

// end принятые в этом месяце



//    if not(cdsTabel.Active)
//    then loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)+' order by department_code,nn' )
//    else cdsTabel.Refresh;

end;

procedure TBOKForm.Button18Click(Sender: TObject);
var
  I, J  : Word;
  Flag : Boolean;
  sql_,SqlT : String;
  WORK_DAYS, WORK_HOURS, WORK_HOLIDAYS, DEKRET_DAYS, BUSINESS_TOUR_DAYS: Word;
  ILL_DAYS, VACATION_DAYS, EDUCATIONAL_VACATION_DAYS, NOSALARY_VACATION_DAYS: Word;
  WORK_DAYS15, WORK_HOURS15, WORK_HOLIDAYS15, DEKRET_DAYS15, BUSINESS_TOUR_DAYS15: Word;
  ILL_DAYS15, VACATION_DAYS15, EDUCATIONAL_VACATION_DAYS15, NOSALARY_VACATION_DAYS15: Word;
  curr_m, curr_y      : String;
  DaysInAMonth_ :word;
  TabelDate : string;
  sqlparams:tparams;
begin

  sqlparams:=tparams.create;

  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;
// WORK_DAYS                 NUMBER(3)     Y                отр.дней
// WORK_HOURS                NUMBER(5,2)   Y                отр.часов
// WORK_HOLIDAYS             NUMBER(3)     Y                отр.вых.дн
// DEKRET_DAYS               NUMBER(3)     Y                Дни в декр.
// BUSINESS_TOUR_DAYS        NUMBER(3)     Y                Дни в команд
// ILL_DAYS                  NUMBER(3)     Y                Дни по Б/Л
// VACATION_DAYS             NUMBER(3)     Y                Дни в отп.
// EDUCATIONAL_VACATION_DAYS NUMBER(3)     Y                Дни в уч отп
// NOSALARY_VACATION_DAYS    NUMBER(3)     Y                Дни без сохр.со
    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;
    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));

    if RG_avans.itemindex=0 then
    case DaysInAMonth_ of
      28: begin
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      29: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      30: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
          end;
      31: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
          end;
    end;

   cdsTabel.DisableControls;

  if Application.MessageBox('Перерасчитать итоговые данные?', 'Расчет',MB_OKCANCEL) = IDOK then
  Begin
    if not(cdsTabel.Active)
    then begin
      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;
//       loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)+' order by department_code,nn' );
       loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );
    end;
   cdsTabel.First;
   try
    While Not cdsTabel.Eof Do
    Begin
      WORK_DAYS := 0;  WORK_HOURS := 0;  WORK_HOLIDAYS := 0;  DEKRET_DAYS := 0;  BUSINESS_TOUR_DAYS := 0;
      ILL_DAYS := 0;  VACATION_DAYS := 0;  EDUCATIONAL_VACATION_DAYS := 0;  NOSALARY_VACATION_DAYS := 0;

      WORK_DAYS15 := 0;  WORK_HOURS15 := 0;  WORK_HOLIDAYS15 := 0;  DEKRET_DAYS15 := 0;  BUSINESS_TOUR_DAYS15 := 0;
      ILL_DAYS15 := 0;  VACATION_DAYS15 := 0;  EDUCATIONAL_VACATION_DAYS15 := 0;  NOSALARY_VACATION_DAYS15 := 0;

      For I := 1 to DaysInAMonth_ do
      Begin
        SqlT := Trim(cdsTabel.FieldByName('DAY' + LPad(IntToStr(I),2,'0')).AsString);
        Flag := True;

        If SqlT = '' Then           Flag := False;
        If SqlT = '#' Then          Inc(NOSALARY_VACATION_DAYS);
        If SqlT = 'Д' Then          Inc(DEKRET_DAYS);
        If SqlT = 'Б' Then          Inc(ILL_DAYS);
        If SqlT = 'В' Then          Inc(WORK_HOLIDAYS);
        If SqlT = 'О' Then          Inc(VACATION_DAYS);
        If SqlT = 'У' Then          Inc(EDUCATIONAL_VACATION_DAYS);

        if i < 16
        then begin
          If SqlT = '#' Then          Inc(NOSALARY_VACATION_DAYS15);
          If SqlT = 'Д' Then          Inc(DEKRET_DAYS15);
          If SqlT = 'Б' Then          Inc(ILL_DAYS15);
          If SqlT = 'В' Then          Inc(WORK_HOLIDAYS15);
          If SqlT = 'О' Then          Inc(VACATION_DAYS15);
          If SqlT = 'У' Then          Inc(EDUCATIONAL_VACATION_DAYS15);
        end;

        If SqlT = 'К'
        Then begin
          Inc(BUSINESS_TOUR_DAYS);
          WORK_HOURS := WORK_HOURS + 8; // командировки добавляются в рабочие дни
          Inc(WORK_DAYS);
          if i<16 then begin
            Inc(BUSINESS_TOUR_DAYS15);
            WORK_HOURS := WORK_HOURS15 + 8; // командировки добавляются в рабочие дни
            Inc(WORK_DAYS15);
          end;
        end;
        For J := 1 to Length(SqlT) do
           If not (SqlT[J] In ['0'..'9']) Then Flag := False;
        If Flag Then
        Begin
          WORK_HOURS := WORK_HOURS + StrToInt(SqlT);
          Inc(WORK_DAYS);
          if i<16 then begin
            WORK_HOURS15 := WORK_HOURS15 + StrToInt(SqlT);
            Inc(WORK_DAYS15);
          end;
        End;


      End;

{        sql_:='Update ok_Tabel Set '+
          'WORK_DAYS = ' + IntToStr(WORK_DAYS) + ',' +
          'WORK_HOURS = ' + IntToStr(WORK_HOURS) + ',' +
          'WORK_HOLIDAYS = ' + IntToStr(WORK_HOLIDAYS) + ',' +
          'DEKRET_DAYS = ' + IntToStr(DEKRET_DAYS) + ',' +
          'BUSINESS_TOUR_DAYS = ' + IntToStr(BUSINESS_TOUR_DAYS) + ',' +
          'ILL_DAYS = ' + IntToStr(ILL_DAYS) + ',' +
          'VACATION_DAYS = ' + IntToStr(VACATION_DAYS) + ',' +
          'EDUCATIONAL_VACATION_DAYS = ' + IntToStr(EDUCATIONAL_VACATION_DAYS) + ',' +
          'NOSALARY_VACATION_DAYS = ' + IntToStr(NOSALARY_VACATION_DAYS)  + ',' +
          'WORK_DAYS15 = ' + IntToStr(WORK_DAYS15) + ',' +
          'WORK_HOURS15 = ' + IntToStr(WORK_HOURS15) + ',' +
          'WORK_HOLIDAYS15 = ' + IntToStr(WORK_HOLIDAYS15) + ',' +
          'DEKRET_DAYS15 = ' + IntToStr(DEKRET_DAYS15) + ',' +
          'BUSINESS_TOUR_DAYS15 = ' + IntToStr(BUSINESS_TOUR_DAYS15) + ',' +
          'ILL_DAYS15 = ' + IntToStr(ILL_DAYS15) + ',' +
          'VACATION_DAYS15 = ' + IntToStr(VACATION_DAYS15) + ',' +
          'EDUCATIONAL_VACATION_DAYS15 = ' + IntToStr(EDUCATIONAL_VACATION_DAYS15) + ',' +
          'NOSALARY_VACATION_DAYS15 = ' + IntToStr(NOSALARY_VACATION_DAYS15)  +
        ' Where branch='''+branch+''' '+
        ' and personal_Code = ' + cdsTabel.FieldByName('personal_CODE').AsString+
        ' and TABEL_MONTH='+curr_m+' and TABEL_YEAR='+curr_y ;
}
        sql_:='Update ok_Tabel Set '+
          'WORK_DAYS=:p_1 ,'+
          'WORK_HOURS=:p_2 ,'+
          'WORK_HOLIDAYS=:p_3 ,'+
          'DEKRET_DAYS=:p_4 ,'+
          'BUSINESS_TOUR_DAYS=:p_5 ,'+
          'ILL_DAYS=:p_6 ,'+
          'VACATION_DAYS=:p_7 ,'+
          'EDUCATIONAL_VACATION_DAYS=:p_8 ,'+
          'NOSALARY_VACATION_DAYS=:p_9 ,'+
          'WORK_DAYS15=:p_10 ,'+
          'WORK_HOURS15=:p_11 ,'+
          'WORK_HOLIDAYS15=:p_12 ,'+
          'DEKRET_DAYS15=:p_13 ,'+
          'BUSINESS_TOUR_DAYS15=:p_14 ,'+
          'ILL_DAYS15=:p_15 ,'+
          'VACATION_DAYS15=:p_16 ,'+
          'EDUCATIONAL_VACATION_DAYS15=:p_17 ,'+
          'NOSALARY_VACATION_DAYS15=:p_18 '+
        ' Where branch=:p_19 '+
        ' and personal_Code=:p_20 '+
        ' and TABEL_MONTH=:p_21 '+
        ' and TABEL_YEAR=:p_22 ';


        sqlparams.Clear;
        SQLParams.CreateParam(ftString,'p_1',ptInput);
        SQLParams.CreateParam(ftString,'p_2',ptInput);
        SQLParams.CreateParam(ftString,'p_3',ptInput);
        SQLParams.CreateParam(ftString,'p_4',ptInput);
        SQLParams.CreateParam(ftString,'p_5',ptInput);
        SQLParams.CreateParam(ftString,'p_6',ptInput);
        SQLParams.CreateParam(ftString,'p_7',ptInput);
        SQLParams.CreateParam(ftString,'p_8',ptInput);
        SQLParams.CreateParam(ftString,'p_9',ptInput);
        SQLParams.CreateParam(ftString,'p_10',ptInput);
        SQLParams.CreateParam(ftString,'p_11',ptInput);
        SQLParams.CreateParam(ftString,'p_12',ptInput);
        SQLParams.CreateParam(ftString,'p_13',ptInput);
        SQLParams.CreateParam(ftString,'p_14',ptInput);
        SQLParams.CreateParam(ftString,'p_15',ptInput);
        SQLParams.CreateParam(ftString,'p_16',ptInput);
        SQLParams.CreateParam(ftString,'p_17',ptInput);
        SQLParams.CreateParam(ftString,'p_18',ptInput);
        SQLParams.CreateParam(ftString,'p_19',ptInput);
        SQLParams.CreateParam(ftString,'p_20',ptInput);
        SQLParams.CreateParam(ftString,'p_21',ptInput);
        SQLParams.CreateParam(ftString,'p_22',ptInput);
        SQLParams.ParamByName('p_1').Value:= IntToStr(WORK_DAYS) ;
        SQLParams.ParamByName('p_2').Value:= IntToStr(WORK_HOURS) ;
        SQLParams.ParamByName('p_3').Value:=  IntToStr(WORK_HOLIDAYS) ;
        SQLParams.ParamByName('p_4').Value:= IntToStr(DEKRET_DAYS) ;
        SQLParams.ParamByName('p_5').Value:= IntToStr(BUSINESS_TOUR_DAYS) ;
        SQLParams.ParamByName('p_6').Value:= IntToStr(ILL_DAYS) ;
        SQLParams.ParamByName('p_7').Value:= IntToStr(VACATION_DAYS) ;
        SQLParams.ParamByName('p_8').Value:=  IntToStr(EDUCATIONAL_VACATION_DAYS) ;
        SQLParams.ParamByName('p_9').Value:=  IntToStr(NOSALARY_VACATION_DAYS)  ;
        SQLParams.ParamByName('p_10').Value:= IntToStr(WORK_DAYS15) ;
        SQLParams.ParamByName('p_11').Value:=  IntToStr(WORK_HOURS15) ;
        SQLParams.ParamByName('p_12').Value:=  IntToStr(WORK_HOLIDAYS15) ;
        SQLParams.ParamByName('p_13').Value:= IntToStr(DEKRET_DAYS15) ;
        SQLParams.ParamByName('p_14').Value:=  IntToStr(BUSINESS_TOUR_DAYS15) ;
        SQLParams.ParamByName('p_15').Value:=  IntToStr(ILL_DAYS15) ;
        SQLParams.ParamByName('p_16').Value:= IntToStr(VACATION_DAYS15) ;
        SQLParams.ParamByName('p_17').Value:=  IntToStr(EDUCATIONAL_VACATION_DAYS15) ;
        SQLParams.ParamByName('p_18').Value:=  IntToStr(NOSALARY_VACATION_DAYS15)  ;
        SQLParams.ParamByName('p_19').Value:= branch;
        SQLParams.ParamByName('p_20').Value:= cdsTabel.FieldByName('personal_CODE').AsString;
        SQLParams.ParamByName('p_21').Value:= curr_m;
        SQLParams.ParamByName('p_22').Value:= curr_y ;

        execSql(sql_,sqlparams);


              cdsTabel.Next;
    End;

        execsql('Commit');
    Except on e:exception
      do begin
        execsql('Rollback');
        ShowMessage('Ошибка!'+#13+sql_+#13+e.message);
      end;
    End;

  end;

  cdsTabel.EnableControls;
  cdsTabel.refresh;
  sqlparams.free;

end;

procedure TBOKForm.Button16Click(Sender: TObject);
var curr_m, next_m, curr_y, next_y, sql_ , day_lines, ch_lines: string;
  DaysInAMonth_ : word;
  TabelDate : string;
  TabelExisits : integer;
  sqlparams : tparams;
begin
  sqlparams := tparams.create;
//showmessage(inttostr(Dayofweek(now)));
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;
    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;

  with sqlparams
  do begin
    clear;
    CreateParam(ftString,'P_B',ptInput);
    ParamByName('P_B').Value := branch;
    CreateParam(ftInteger,'P_M',ptInput);
    ParamByName('P_M').Value := strtoint(curr_m);
    CreateParam(ftInteger,'P_Y',ptInput);
    ParamByName('P_Y').Value := strtoint(curr_y);

  end;
  TabelExisits:= GETsqlRESULT('select count(*) From ok_Tabel where branch=:P_B and tabel_month=:P_M and tabel_year=:P_Y',sqlparams);

 if TabelExisits>0
 then begin
    showmessage('Табель за указанный месяц уже существует.');
 end else begin

  if Application.MessageBox(pchar('Сформировать новый табель ('+TabelDate+') ?'), 'Формирование',MB_OKCANCEL) = IDOK
  then Begin
    if curr_m='12'
    then begin
      next_m:='01';
      next_y:= inttostr(strtoint(curr_y)+1);
    end else begin
      next_m:= inttostr(strtoint(curr_m)+1);
      next_y:=  curr_y;
    end;

    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));

    if RG_avans.itemindex=0 then
    case DaysInAMonth_ of
      28: begin
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      29: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      30: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
          end;
      31: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
          end;
    end;

    case DaysInAMonth_ of
      28: begin
            day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28';
            day_lines:= day_lines+','+
            'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
                'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
                'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
                'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28';


            ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8 ' ;
            ch_lines:= ch_lines+','+ch_lines ;
          end;
      29: begin
            day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                'DAY29 ';
            day_lines:= day_lines+','+
            'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
                'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
                'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
                'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
                'OLDDAY29 ';

            ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8 ' ;
            ch_lines:= ch_lines+','+ch_lines ;
          end;
      30: begin
            day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                'DAY29,DAY30 ';
            day_lines:= day_lines+','+
            'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
                'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
                'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
                'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
                'OLDDAY29,OLDDAY30 ';
            ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8 ' ;
            ch_lines:= ch_lines+','+ch_lines ;
          end;
      31: begin
            day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                'DAY29,DAY30,DAY31';
            day_lines:= day_lines+','+
            'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
                'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
                'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
                'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
                'OLDDAY29,OLDDAY30,OLDDAY31 ';
            ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8' ;
            ch_lines:= ch_lines+','+ch_lines ;
          end;
    end;

    Try
// @}->-- ]:->
// брать список из сведения о работе
{      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(okpd.post_code),okpd.branch, '+curr_m+',' +curr_y+',' +
        ' ''За '+curr_m+' месяц '+curr_y+' года'','+
        'okpd.PERSONAL_CODE,okp.nn,okpd.department_code department_nn,okpd.department_code,'+
        'okp.FAMILY||'' ''||substr(okp.FIRST_NAME,1,1)||''.''||substr(okp.PATRONYMIC,1,1)||''.'','+
        'okp.tabno, ok_service.GET_POST_Salary(okpd.post_code) ,okp.post_code, okpd.ESTABLISHED_POST, okpd.ESTABLISHED_DEPARTMENT '+
         ','+ch_lines+ ' From ok_personal okp, ok_period okpd Where okp.branch='''+branch+''' '+
         ' and okp.branch=okpd.branch and okp.personal_code=okpd.personal_code '+
        ' and okpd.IN_OFFICE_DATE < to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
        ' and (okpd.OUT_OFFICE_DATE >= to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
              ' or okpd.OUT_OFFICE_DATE is null )'+
        ' order by department_code,nn';
}
      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(okpd.post_code),okpd.branch, :p_1, :p_2, :p_3,' +
        'okpd.PERSONAL_CODE,okp.nn,okpd.department_code department_nn,okpd.department_code,'+
        'okp.FAMILY||'' ''||substr(okp.FIRST_NAME,1,1)||''.''||substr(okp.PATRONYMIC,1,1)||''.'','+
        'okp.tabno, ok_service.GET_POST_Salary(okpd.post_code) ,okp.post_code, okpd.ESTABLISHED_POST, okpd.DEPARTMENT '+
         ','+ch_lines+ ' From ok_personal okp, ok_period okpd Where okp.branch=:p_4 '+
         ' and okp.branch=okpd.branch and okp.personal_code=okpd.personal_code '+
        ' and okpd.IN_OFFICE_DATE < to_date(:p_5,:p_6) '+
        ' and (okpd.OUT_OFFICE_DATE >= to_date(:p_7,:p_8) '+
              ' or okpd.OUT_OFFICE_DATE is null )'+
        ' order by department_code,nn';


      with sqlparams
      do begin
        clear;
        CreateParam(ftInteger,'p_1',ptInput);
        ParamByName('p_1').Value := strtoint(curr_m);
        CreateParam(ftInteger,'p_2',ptInput);
        ParamByName('p_2').Value := strtoint(curr_y);
        CreateParam(ftString,'p_3',ptInput);
        ParamByName('p_3').Value := 'За '+curr_m+' месяц '+curr_y+' года';
        CreateParam(ftString,'p_4',ptInput);
        ParamByName('p_4').Value := branch;
        CreateParam(ftString,'p_5',ptInput);
        ParamByName('p_5').Value := '01.'+next_m+'.'+next_y;
        CreateParam(ftString,'p_6',ptInput);
        ParamByName('p_6').Value := 'dd.mm.yyyy';
        CreateParam(ftString,'p_7',ptInput);
        ParamByName('p_7').Value := '01.'+next_m+'.'+next_y;
        CreateParam(ftString,'p_8',ptInput);
        ParamByName('p_8').Value := 'dd.mm.yyyy';
      end;
      execsql(sql_,sqlparams);

{      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(okpd.post_code),okpd.branch, '+curr_m+',' +curr_y+',' +
        ' ''За '+curr_m+' месяц '+curr_y+' года'','+
                 'okpd.PERSONAL_CODE,okp.nn,okpd.department_code department_nn,okpd.department_code,'+
        'okp.FAMILY||'' ''||substr(okp.FIRST_NAME,1,1)||''.''||substr(okp.PATRONYMIC,1,1)||''.'','+
        'okp.tabno, ok_service.GET_POST_Salary(okpd.post_code) ,okp.post_code, okpd.ESTABLISHED_POST, okpd.ESTABLISHED_DEPARTMENT '+
         ','+ch_lines+ ' From ok_personal okp, ok_period okpd Where okp.branch='''+branch+''' '+
         ' and okp.branch=okpd.branch and okp.personal_code=okpd.personal_code '+
        ' and okpd.IN_OFFICE_DATE >= to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
        ' and (okpd.OUT_OFFICE_DATE >= to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') '+
              ' or okpd.OUT_OFFICE_DATE is null )'+
        ' order by department_code,nn';
}
      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(okpd.post_code),okpd.branch,:p_1,:p_2,:p_3,' +
                 'okpd.PERSONAL_CODE,okp.nn,okpd.department_code department_nn,okpd.department_code,'+
        'okp.FAMILY||'' ''||substr(okp.FIRST_NAME,1,1)||''.''||substr(okp.PATRONYMIC,1,1)||''.'','+
        'okp.tabno, ok_service.GET_POST_Salary(okpd.post_code) ,okp.post_code, okpd.ESTABLISHED_POST, okpd.DEPARTMENT '+
         ','+ch_lines+ ' From ok_personal okp, ok_period okpd Where okp.branch=:p_4 '+
         ' and okp.branch=okpd.branch and okp.personal_code=okpd.personal_code '+
        ' and okpd.IN_OFFICE_DATE >= to_date(:p_5,:p_6) '+
        ' and (okpd.OUT_OFFICE_DATE >= to_date(:p_7,:p_8) '+
              ' or okpd.OUT_OFFICE_DATE is null )'+
        ' order by department_code,nn';

      with sqlparams
      do begin
        clear;
        CreateParam(ftInteger,'p_1',ptInput);
        ParamByName('p_1').Value := strtoint(curr_m);
        CreateParam(ftInteger,'p_2',ptInput);
        ParamByName('p_2').Value := strtoint(curr_y);
        CreateParam(ftString,'p_3',ptInput);
        ParamByName('p_3').Value := 'За '+curr_m+' месяц '+curr_y+' года';
        CreateParam(ftString,'p_4',ptInput);
        ParamByName('p_4').Value := branch;
        CreateParam(ftString,'p_5',ptInput);
        ParamByName('p_5').Value := '01.'+next_m+'.'+next_y;
        CreateParam(ftString,'p_6',ptInput);
        ParamByName('p_6').Value := 'dd.mm.yyyy';
        CreateParam(ftString,'p_7',ptInput);
        ParamByName('p_7').Value := '01.'+next_m+'.'+next_y;
        CreateParam(ftString,'p_8',ptInput);
        ParamByName('p_8').Value := 'dd.mm.yyyy';
      end;

      execsql(sql_,sqlparams);

// декретницы
{      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(post_code),branch, '+curr_m+',' +curr_y+',' +
        ' ''За '+curr_m+' месяц '+curr_y+' года'','+
        'PERSONAL_CODE,nn+10000,10000,10000,'+
        'FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC,'+
        'tabno, ok_service.GET_POST_Salary(post_code) ,post_code, ok_service.GET_POSTNAME(post_code), ''ДЕКРЕТНИЦЫ'' '+
         ','+ch_lines+ ' From ok_personal Where branch='''+branch+''' and status_code =5'+
        ' order by department_code,nn';
}
      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(post_code),branch, :p_1, :p_2, :p_3,' +
        'PERSONAL_CODE,nn+ :p_4, :p_5, :p_6,'+
        'FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC,'+
        'tabno, ok_service.GET_POST_Salary(post_code) ,post_code, ok_service.GET_POSTNAME(post_code), :p_7 '+
         ','+ch_lines+ ' From ok_personal Where branch=:p_8 and status_code=:p_9'+
        ' order by department_code,nn';

      with sqlparams
      do begin
        clear;
        CreateParam(ftInteger,'p_1',ptInput);
        ParamByName('p_1').Value := strtoint(curr_m);
        CreateParam(ftInteger,'p_2',ptInput);
        ParamByName('p_2').Value := strtoint(curr_y);
        CreateParam(ftString,'p_3',ptInput);
        ParamByName('p_3').Value := 'За '+curr_m+' месяц '+curr_y+' года';
        CreateParam(ftInteger,'p_4',ptInput);
        ParamByName('p_4').Value := 10000;
        CreateParam(ftInteger,'p_5',ptInput);
        ParamByName('p_5').Value := 10000;
        CreateParam(ftInteger,'p_6',ptInput);
        ParamByName('p_6').Value := 10000;
        CreateParam(ftString,'p_7',ptInput);
        ParamByName('p_7').Value := 'ДЕКРЕТНИЦЫ';
        CreateParam(ftString,'p_8',ptInput);
        ParamByName('p_8').Value := branch;
        CreateParam(ftInteger,'p_9',ptInput);
        ParamByName('p_9').Value := 5;

      end;

      execsql(sql_,sqlparams);

// Уволенные
{      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(post_code),branch, '+curr_m+',' +curr_y+',' +
        ' ''За '+curr_m+' месяц '+curr_y+' года'','+
        'PERSONAL_CODE,nn+10000000,10000000,10000000,'+
        'FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC,'+
        'tabno, ok_service.GET_POST_Salary(post_code) ,post_code, ok_service.GET_POSTNAME(post_code), ''УВОЛЕННЫЕ'' '+
         ','+ch_lines+ ' From ok_personal Where branch='''+branch+''' and (  '+
        ' (status_code=4) and ((branch,personal_code) in '+
        '(select distinct branch,personal_code from ok_period where branch='''+branch+''' '+
        ' and OUT_OFFICE_DATE>=to_date(''01.'+copy(TabelDate,4,7)+''',''dd.mm.yyyy'')'+
        ' and OUT_OFFICE_DATE<to_date(''01.'+next_m+'.'+next_y+''',''dd.mm.yyyy'') ) ) )'+
        ' order by department_code,nn';
}
      sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
        ' tabel_name,'+
        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
        ' Select ok_service.get_category_code(post_code),branch,:p_1,:p_2,:p_3,' +
        'PERSONAL_CODE,nn+ :p_4,:p_5,:p_6,'+
        'FAMILY||'' ''||FIRST_NAME||'' ''||PATRONYMIC,'+
        'tabno, ok_service.GET_POST_Salary(post_code) ,post_code, ok_service.GET_POSTNAME(post_code), :p_7 '+
         ','+ch_lines+ ' From ok_personal Where branch=:p_8 and (  '+
        ' (status_code=:p_9) and ((branch,personal_code) in '+
        '(select distinct branch,personal_code from ok_period where branch=:p_10 '+
        ' and OUT_OFFICE_DATE>=to_date(:p_11,:p_12)'+
        ' and OUT_OFFICE_DATE<to_date(:p_13,:p_14) ) ) )'+
        ' order by department_code,nn';

      with sqlparams
      do begin
        clear;
        CreateParam(ftInteger,'p_1',ptInput);
        ParamByName('p_1').Value := strtoint(curr_m);
        CreateParam(ftInteger,'p_2',ptInput);
        ParamByName('p_2').Value := strtoint(curr_y);
        CreateParam(ftString,'p_3',ptInput);
        ParamByName('p_3').Value := 'За '+curr_m+' месяц '+curr_y+' года';
        CreateParam(ftInteger,'p_4',ptInput);
        ParamByName('p_4').Value := 10000000;
        CreateParam(ftInteger,'p_5',ptInput);
        ParamByName('p_5').Value := 10000000;
        CreateParam(ftInteger,'p_6',ptInput);
        ParamByName('p_6').Value := 10000000;
        CreateParam(ftString,'p_7',ptInput);
        ParamByName('p_7').Value := 'УВОЛЕННЫЕ';
        CreateParam(ftString,'p_8',ptInput);
        ParamByName('p_8').Value := branch;
        CreateParam(ftInteger,'p_9',ptInput);
        ParamByName('p_9').Value := 4;
        CreateParam(ftString,'p_10',ptInput);
        ParamByName('p_10').Value := branch;

        CreateParam(ftString,'p_11',ptInput);
        ParamByName('p_11').Value := '01.'+copy(TabelDate,4,7);
        CreateParam(ftString,'p_12',ptInput);
        ParamByName('p_12').Value := 'dd.mm.yyyy';
        CreateParam(ftString,'p_13',ptInput);
        ParamByName('p_13').Value := '01.'+next_m+'.'+next_y ;
        CreateParam(ftString,'p_14',ptInput);
        ParamByName('p_14').Value := 'dd.mm.yyyy';

      end;

      execsql(sql_,sqlparams);

      execsql('commit');
    Except on e:exception
      do begin
//memotest.lines.add(sql_);
        execsql('rollback');
        ShowMessage(sql_+#13+e.message);
      end;
    End;

    Button17Click(nil); // график по умолчанию

  End;

 end;

    if not(cdsTabel.Active)
    then begin

      cdsTabel.close;
      with cdsTabel.params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := strtoint(copy(TabelDate,4,2));
          CreateParam(ftInteger,'p_3' ,ptInput);
          ParamByName('p_3').Value := strtoint(copy(TabelDate,7,4));
      end;

//      loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)+' order by department_code,nn' );
      loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );
    end else begin
      cdstabel.refresh;
    end;


end;

procedure TBOKForm.TabSheet10Show(Sender: TObject);
begin

  if cdsok_business_voyage.Active then
  Begin
    Exit;
  End;

  cdsok_business_voyage.Close;
      with cdsok_business_voyage.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
  LoadData(cdsok_business_voyage, SQL_ok_business_voyage+' where branch=:p_1');

  LoadData(cdsStr_SET, SQL_S_STR);
  LoadData(CDSss_ok_org_business_voyage, SQL_ss_ok_org_business_voyage);
  LoadData(CDSss_ok_theme_business_voyage, SQL_ss_ok_theme_business_voyage);

// 1. lookup поля - если есть :)
  cdsok_business_voyage.Close;
  cdsok_business_voyage.DisableControls;

// 2. проверка датасетов-списков

// 3. Добавление lookup полей
  addLookUpField(cdsok_business_voyage, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', true);

  addLookUpField(cdsok_business_voyage, cdsStr_SET, 'CODE_STR_show', 'CODE_STR', 'CODE_STR', 'name', false);
  addLookUpField(cdsok_business_voyage, CDSss_ok_org_business_voyage, 'org_business_voyage_code_show', 'org_business_voyage_code', 'org_business_voyage_code', 'org_business_voyage_name', false);
  addLookUpField(cdsok_business_voyage, CDSss_ok_theme_business_voyage, 'theme_business_voyage_code_show', 'theme_business_voyage_code', 'theme_business_voyage_code', 'theme_business_voyage_name', false);
  addLookUpField(cdsok_business_voyage, cdsss_ok_city, 'city_code_show', 'city_code', 'city_code', 'city_name', false);


//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', True);
// (cds-главный, cds-справочник, 'имя получаемого поля в cds-главном',
// ' имя ключевого поля в cds-главном ',' имя ключевого поля в cds-справочнике ',
// ' имя поля с показываемыми данными в cds-справочнике ')

//все последующие FALSE addLookUpField(cdsOKEducation, cdsSSOkInstitution_Set, 'institution_code_show', 'institution_code', 'institution_code', 'institution_name', False);
//  addLookUpField(cdsOK, cdsSSok_Set, '_code_show', '_code', '_code', '_name', False);

  cdsok_business_voyage.Open;
  cdsok_business_voyage.EnableControls;

//  SQL_ssokincrease_SET

end;

procedure TBOKForm.cdsok_business_voyageAfterOpen(DataSet: TDataSet);
begin

  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsok_business_voyage.MasterSource    := dsOKPersonal;
    cdsok_business_voyage.IndexFieldNames := 'branch;personal_code';
    cdsok_business_voyage.MasterFields    := 'branch;personal_code';
  End;

  Dataset.FieldByName('date_open').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('date_close').EditMask  := '!09/09/0099;1;_';
  Dataset.FieldByName('order_date').EditMask  := '!09/09/0099;1;_';

end;

procedure TBOKForm.DBEdit137KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
//var
//  sql_:string;
begin
  Case Key of
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
        if not (cdsok_business_voyage.state in [dsEdit])
        then cdsok_business_voyage.edit;

// подсчитать поле 5   . "Фактическое кол-во дней"  - рассчитать от даты открытия до даты закрытия в днях
        if cdsok_business_voyage.fieldbyname('date_open').asdatetime>
           cdsok_business_voyage.fieldbyname('date_close').Asdatetime
        then begin
          showmessage('дата закрытия '+cdsok_business_voyage.fieldbyname('date_close').asstring+
             'должна быть больше даты открытия'+ cdsok_business_voyage.fieldbyname('date_open').asstring);
          exit;
        end;

        if (cdsok_business_voyage.State in [dsEdit, dsInsert])
        then begin
          cdsok_business_voyage.fieldbyname('number_day').asstring:=floattostr(
            1+ cdsok_business_voyage.fieldbyname('date_close').Asdatetime-
               cdsok_business_voyage.fieldbyname('date_open').asdatetime );
        end;

      end;
  end;

end;

procedure TBOKForm.PrintTabel(days: string);
var
  //sell,
   App,WorkBook,Sheet: Variant;
  cur_line, cur_col, DaysInAMonth_, i,k, m:integer; // IntRezult,j,
  footer1, footer2, sql_, tabelDate,  s_, old_department_name:String;// rez, col,sell_address,
begin


    tabelDate:=medbankdate.Text;
  if days='15'
  then begin
    DaysInAMonth_:=15;
    sql_:='select tabel_name,category_code,department_name, fio, tabno,'+
    '  trim(to_char(salary,''9999999.99'')) salary, post_name,'+
    'day01,day02,day03,day04,day05,day06,day07,day08,day09,day10,'+
    'day11,day12,day13,day14,day15,null day16,null day17,null day18,null day19,null day20,'+
    'null day21,null day22,null day23,null day24,null day25,null day26,null day27,null day28,null day29,null day30,null day31,'+
    ' work_days15,'+
    ' trim(to_char(work_hours15,''999.99'')) work_hours15,'+
    ' work_holidays15, dekret_days15,'+
    ' business_tour_days15,'+
    ' ill_days15, vacation_days15,'+
    ' educational_vacation_days15,'+
    ' nosalary_vacation_days15,department_code '+
    ' from ok_tabel '+
    ' where branch=:p_1'+      //'''+curbranch+''' '+
    ' and tabel_month=:p_2'+  //copy(tabelDate,4,2)+
    ' and tabel_year=:p_3'+  //copy(tabelDate,7,4)+
      ' order by dep_nn,department_code,category_code,fio';
      S_ :=uppercase('*fio*'+'*category_code*'+'*post_name*'
            +'*day01*'+'*day02*'+'*day03*'+'*day04*'+'*day05*'+'*day06*'+'*day07*'+'*day08*'+'*day09*'+'*day10*'
            +'*day11*'+'*day12*'+'*day13*'+'*day14*'+'*day15*'+'*day16*'+'*day17*'+'*day18*'+'*day19*'+'*day20*'
            +'*day21*'+'*day22*'+'*day23*'+'*day24*'+'*day25*'+'*day26*'+'*day27*'+'*day28*'+'*day29*'+'*day30*'+'*day31*'
            +'*work_days15*'+'*work_hours15*'+'*work_holidays15*'+'*dekret_days15*'+'*business_tour_days15*'
            +'*ill_days15*'+'*vacation_days15*'+'*educational_vacation_days15*'+'*nosalary_vacation_days15*');
// убрано '*tabno*'+'*salary*'+
  end else begin
    DaysInAMonth_:=DaysInAMonth(strtoint(copy(tabelDate,7,4)),strtoint(copy(tabelDate,4,2)));
    sql_:='select tabel_name,category_code,department_name, fio, tabno,'+
    '  trim(to_char(salary,''9999999.99'')) salary, post_name,'+
    'day01,day02,day03,day04,day05,day06,day07,day08,day09,day10,'+
    'day11,day12,day13,day14,day15,day16,day17,day18,day19,day20,'+
    'day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31,'+
    ' work_days,'+
    ' trim(to_char(work_hours,''999.99'')) work_hours,'+
    ' work_holidays, dekret_days,'+
    ' business_tour_days,'+
    ' ill_days, vacation_days,'+
    ' educational_vacation_days,'+
    ' nosalary_vacation_days,department_code '+
    ' from ok_tabel '+
    ' where branch=:p_1'+      //'''+curbranch+''' '+
    ' and tabel_month=:p_2'+  //copy(tabelDate,4,2)+
    ' and tabel_year=:p_3'+  //copy(tabelDate,7,4)+
      ' order by dep_nn,department_code,category_code,fio';
      S_ :=uppercase('*fio*'+'*category_code*'+'*post_name*'
            +'*day01*'+'*day02*'+'*day03*'+'*day04*'+'*day05*'+'*day06*'+'*day07*'+'*day08*'+'*day09*'+'*day10*'
            +'*day11*'+'*day12*'+'*day13*'+'*day14*'+'*day15*'+'*day16*'+'*day17*'+'*day18*'+'*day19*'+'*day20*'
            +'*day21*'+'*day22*'+'*day23*'+'*day24*'+'*day25*'+'*day26*'+'*day27*'+'*day28*'+'*day29*'+'*day30*'+'*day31*'
            +'*work_days*'+'*work_hours*'+'*work_holidays*'+'*dekret_days*'+'*business_tour_days*'
            +'*ill_days*'+'*vacation_days*'+'*educational_vacation_days*'+'*nosalary_vacation_days*');
// убрано '*tabno*'+'*salary*'+
  end;

  try
      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;
    loaddata(cdsTabel,sql_ );
  except on e:exception
    do begin
      showmessage(sql_);
//      memo3.lines.add(sql_);
    end;
  end;


      cdsTabel.DisableControls;
      cdstabel.first;


 TRY
    App := CreateOLEObject('Excel.Application');
    if fileexists('C:\NCI Bank\Ok\Templates\Tabel.xls')
    then begin
      WorkBook:=App.Workbooks.Open('C:\NCI Bank\Ok\Templates\Tabel.xls');
    end else begin
      if fileexists(GetCurrentDir_templates+'\Tabel.xls')
      then begin
        WorkBook:=App.Workbooks.Open(GetCurrentDir_templates+'\Tabel.xls');
      end else begin
        showmessage('не найден файл C:\NCI Bank\Ok\Templates\Tabel.xls '+#10#13+
           ' также не найден '+   GetCurrentDir_templates+'\Tabel.xls'
        );
        exit;
      end;
    end;
    App.Visible := false;


   for i:=1 to WorkBook.Sheets.Count do
   Begin  //1
     Application.ProcessMessages;
     Sheet:=WorkBook.WorkSheets[i];
     Sheet.Activate;
     // строка столбец
     Sheet.Cells[4,1].value:='                                                                            учета использования рабочего времени работников '+cdsTabel.fieldbyname('TABEL_NAME').asstring ;
     footer1 :=Sheet.Cells[6,1].value;
     Sheet.Cells[6,1].value:='';
     footer2 :=Sheet.Cells[8,1].value;
     Sheet.Cells[8,1].value:='';

    case DaysInAMonth_ of
    15:begin
    // дни месяца с 4 по 35
         Sheet.Cells[11,20].value:='';
         Sheet.Cells[11,21].value:='';
         Sheet.Cells[11,22].value:='';
         Sheet.Cells[11,23].value:=''; // 19
         Sheet.Cells[11,24].value:='';
         Sheet.Cells[11,25].value:='';
         Sheet.Cells[11,26].value:='';
         Sheet.Cells[11,27].value:='';
         Sheet.Cells[11,28].value:=''; // 24
         Sheet.Cells[11,29].value:='';
         Sheet.Cells[11,30].value:='';
         Sheet.Cells[11,31].value:='';
         Sheet.Cells[11,32].value:='';
         Sheet.Cells[11,33].value:='';
         Sheet.Cells[11,34].value:='';
         Sheet.Cells[11,35].value:=''; // 31
       end;
    28:begin
    // дни месяца с 4 по 35
         Sheet.Cells[11,33].value:='';
         Sheet.Cells[11,34].value:='';
         Sheet.Cells[11,35].value:='';
       end;
    29:begin
         Sheet.Cells[11,34].value:='';
         Sheet.Cells[11,35].value:='';
       end;
    30:begin
         Sheet.Cells[11,35].value:='';
       end;
    end;

    old_department_name:='***';
    cur_line:=11;
    k:=1;
      While not cdstabel.EOF
      do begin
//        memo3.lines.add(old_department_name+' >>> '+cdstabel.FieldByName('department_name').asstring);
          if  old_department_name<> cdstabel.FieldByName('department_name').asstring
          then begin
            cur_line:=  cur_line+1;
            Sheet.Cells[cur_line, 2].value:= cdstabel.FieldByName('department_name').asstring;

          end;

          cur_line:=  cur_line+1;
          cur_col:= 1;
          Sheet.Cells[cur_line,cur_col].value:= inttostr(k);
          k:=k+1;
          for m:=0 to cdbgtabel.Columns.Count-1
          do begin
//              text22 := text22+' '+cdbgtabel.Columns[i].FieldName;
              if Pos( uppercase('*'+cdbgtabel.Columns[m].FieldName+'*')  ,S_)>0
              then begin
                cur_col:=  cur_col+1;
                Sheet.Cells[cur_line,cur_col].value:= cdbgtabel.fields[m].AsString;
              end;

          end;

          old_department_name:= cdstabel.FieldByName('department_name').asstring;
          cdstabel.next;

      end;

     Sheet.Cells[cur_line+5,1].value:= footer1 ;
     Sheet.Cells[cur_line+8,1].value:= footer2 ;
   end; //1


  WorkBook.WorkSheets[1].Select;
 FINALLY
  App.Visible:=true;
  App:=unassigned;
 END; 

end;

procedure TBOKForm.BitBtn137Click(Sender: TObject);
begin
  if cdsTabel.State in [dsedit]
  then cdsTabel.post;

end;

procedure TBOKForm.BitBtn135Click(Sender: TObject);
begin
  gbTabelWork.visible:=false;
  if gbTabel.Visible
  then gbTabel.Visible:=false
  else begin
         gbTabel.Visible:=true;
         mcTabel.date:=strtodate(bankdate);
       end;

end;

procedure TBOKForm.MCTabelClick(Sender: TObject);
begin
  memotabel.lines.add(datetostr(mctabel.date));
end;

procedure TBOKForm.bbGotovoGbTabelClick(Sender: TObject);
var i,pk:integer;
 sql_,s, day_char:string;
  TabelDate : string;
  sqlparams_ : tparams;
  sqlparams2_ : tparams;
  sqlparams : tparams;
begin
  sqlparams := tparams.create;

        If Application.MessageBox(PChar( 'Внести изменения?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
        Then Begin
          if memotabel.lines.count=0
          then begin
            showmessage('список пуст! не указана ни одна дата.');
          end else
          try
  sqlparams_ := tparams.Create;
  sqlparams2_ := tparams.Create;
//showmessage(inttostr(Dayofweek(now)));
  TabelDate:=medBankDate.text;
  s:=' ';
{
   : day_char:='(П) - Праздничный день
   : day_char:='(В) - Рабочий Выходной
   : day_char:='(2) - 0.25 ставки
   : day_char:='(4) - полставки
   : day_char:='(6) - 0.75 ставки
   : day_char:='(8) - Рабочий
   : day_char:='(*) - Выходной
   : day_char:='(С) - Субботник
   : day_char:='(V) - Открытый баланс
   : day_char:='(S) - Мед. справка
   : day_char:='(#) - Отпуск без сохранения
   : day_char:='(.) - Не входящий в расчет
   : day_char:='(О)- Трудовой отпуск
   : day_char:='(Б) - Больничный
   : day_char:='(К) - командировка
   : day_char:='(Д) - Декретный отпуск
   : day_char:='(У) - Ученический отпуск
}
  case rgTabel.ItemIndex of
  0 : day_char:='П';
  1 : day_char:='В';
  2 : day_char:='2';
  3 : day_char:='4';
  4 : day_char:='6';
  5 : day_char:='8';
  6 : day_char:='*';
  7 : day_char:='С';
  8 : day_char:='V';
  9 : day_char:='S';
  10 : day_char:='#';
  11 : day_char:='.';
  12 : day_char:='О';
  13 : day_char:='Б';
  14 : day_char:='К';
  15 : day_char:='Д';
  16 : day_char:='У';
  end;

  if edPrimFreeDays1.text ='' then edPrimFreeDays1.text:=' ';

  pk:=1; sqlparams.clear;
  for i:=0 to memotabel.lines.count-1
  do begin
    if memotabel.Lines.Strings[i]<>''
    then begin
      sqlparams_.Clear;
  //    sqlparams_.CreateParam(ftDate,'P_DAY'+copy(memotabel.Lines.Strings[i],1,2),ptInput);
  //    sqlparams_.ParamByName('P_DAY'+copy(memotabel.Lines.Strings[i],1,2)).Value := strtodate(memotabel.Lines.Strings[i]);
      sqlparams_.CreateParam(ftString,'P_DAY',ptInput);
      sqlparams_.ParamByName('P_DAY').Value := memotabel.Lines.Strings[i];
      execSql('delete from ok_freedays where branch=info.getbranch '+
       ' and v_date=:P_DAY',sqlparams_);

      sqlparams2_.Clear;
      sqlparams2_.CreateParam(ftDate,'P_DAY',ptInput);
      sqlparams2_.ParamByName('P_DAY').Value := strtodate(memotabel.Lines.Strings[i]);
      sqlparams2_.CreateParam(ftString,'P_SIMBOL',ptInput);
      sqlparams2_.ParamByName('P_SIMBOL').Value := day_char;
      sqlparams2_.CreateParam(ftString,'P_COMMENTS',ptInput);
      sqlparams2_.ParamByName('P_COMMENTS').Value := edPrimFreeDays1.text;
      sqlparams2_.CreateParam(ftInteger,'P_USERID',ptInput);
      sqlparams2_.ParamByName('P_USERID').Value := userid;
      sqlparams2_.CreateParam(ftString,'P_5',ptInput);
      sqlparams2_.ParamByName('P_5').Value := curBranch;
      sqlparams2_.CreateParam(ftString,'P_6',ptInput);
      sqlparams2_.ParamByName('P_6').Value := copy(TabelDate,4,2);
      sqlparams2_.CreateParam(ftString,'P_7',ptInput);
      sqlparams2_.ParamByName('P_7').Value := copy(TabelDate,7,4);

      execSql('insert into ok_freedays (BRANCH,PERSONAL_CODE,V_DATE,SIMBOL,COMMENTS,EMP_CODE,INS_DATE)'+
        ' select distinct branch,personal_code,:P_DAY,:P_SIMBOL,:P_COMMENTS,:P_USERID,sysdate'+
        ' from ok_tabel'+
//        ' where branch='''+branch+''' and tabel_month='+copy(TabelDate,4,2)+
//        ' and tabel_year='+copy(TabelDate,7,4) ,sqlparams2_);
        ' where branch=:P_5 and tabel_month=:P_6'+
        ' and tabel_year=:P_7' ,sqlparams2_);



      if s=' '
      then begin
//         s := ' day'+copy(memotabel.Lines.Strings[i],1,2)+'='''+day_char+'''';
         s := ' day'+copy(memotabel.Lines.Strings[i],1,2)+'=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=day_char;
          inc(pk);
      end else begin
        if pos(copy(memotabel.lines.Strings[i],1,2),s)=0
        then begin
//          s := s+ ',day'+copy(memotabel.lines.Strings[i],1,2)+'='''+day_char+'''';
          s := s+ ',day'+copy(memotabel.lines.Strings[i],1,2)+'=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=day_char;
          inc(pk);
        end;
      end;
    end;
  end;

//  sql_:='update ok_tabel set '+s+
//    ' where branch='''+branch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)  ;
        sql_:='update ok_tabel set '+s +' Where branch=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=curbranch;
          inc(pk);

        sql_:=Sql_ +' and TABEL_MONTH=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=copy(TabelDate,4,2);
          inc(pk);

        sql_:=Sql_ +' and TABEL_YEAR=:p_'+inttostr(pk);
          sqlparams.CreateParam(ftString,'p_'+inttostr(pk),ptInput);
          sqlparams.ParamByName('p_'+inttostr(pk)).Value:=copy(TabelDate,7,4);
        //*  inc(pk);

            execsql(sql_,sqlparams);  //
            execsql('commit');
//memotabel.Lines.add(sql_);
          Except on e:exception
            do begin
      //memotest.lines.add(sql_);
              execsql('rollback');
              ShowMessage(sql_+#13+e.message);
            end;
          End;
        end;

   cdstabel.refresh;

end;

procedure TBOKForm.bbClearGbTabelClick(Sender: TObject);
begin
  memotabel.clear;
end;

procedure TBOKForm.bbCloseGbTabelClick(Sender: TObject);
begin
  gbtabel.visible:=false;

end;

procedure TBOKForm.ClientDBGrid4CellClick(Column: TColumn);
begin
  memotabelWorklist.lines.add(cdsTabel.fieldbyname('personal_code').asstring+')  '+
    cdsTabel.fieldbyname('fio').asstring +'        '+cdsTabel.fieldbyname('tabno').asstring);
end;

procedure TBOKForm.BitBtn145Click(Sender: TObject);
begin
  MemoTabelworkDate.clear;

end;

procedure TBOKForm.BitBtn146Click(Sender: TObject);
begin
  MemoTabelworklist.clear;
end;

procedure TBOKForm.BitBtn144Click(Sender: TObject);
begin
  gbTabelWork.visible:=false;

end;

procedure TBOKForm.BitBtn140Click(Sender: TObject);
begin
  gbTabel.Visible:=false;
  if gbTabelWork.visible
  then gbTabelWork.visible:=false
  else begin
     gbTabelWork.visible:=true;
     mcTabelwork.date:=strtodate(bankdate);
  end;

end;

procedure TBOKForm.mcTabelworkClick(Sender: TObject);
begin
  memotabelworkdate.lines.add(datetostr(mctabelwork.date));
end;

procedure TBOKForm.bbPrazdnikDayInTabelClick(Sender: TObject);
var i,i_date, pos_pp, pk, pk_date:integer;  // j,
 sql_,s,pp_s, day_char, pers_code:string;
  TabelDate,oneline : string;
//   Day, Time,
//   Bd, Ed,
   DaysInAMonth_ : Word;
//  DatTmp : TdateTime;
  //HolDay,
//  D, SqlT, T, Tmp, Clock : String;
   curr_m, next_m, curr_y, next_y: string; // ,  otpusk_char,er_mes
     sqlparams : tparams;
     sqlparams_ : tparams;
     sqlparams2_ : tparams;
//  pp_s_massiv: array [1..1000] of string;
begin
//showmessage(inttostr(Dayofweek(now)));
  sqlparams :=tparams.Create;
  sqlparams_ :=tparams.Create;
  sqlparams2_ :=tparams.Create;

    if MemoTabelworkDate.lines.count=0
    then begin
      showmessage('Список пуст - ни указан ни одна дата.');
      exit;
    end;

    if MemoTabelworkList.lines.count=0
    then begin
      showmessage('Список пуст - нет сотрудников.');
      exit;
    end;

    If Application.MessageBox(PChar( 'Внести изменения?'), PChar('ВОПРОС'), MB_YESNO or MB_ICONQUESTION) = mrYes
    Then Begin

    TabelDate:=medBankDate.text;

    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;
    if curr_m='12'
    then begin
      next_m:='01';
      next_y:= inttostr(strtoint(curr_y)+1);
    end else begin
      next_m:= inttostr(strtoint(curr_m)+1);
      next_y:=  curr_y;
    end;

//    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));
    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));

    if RG_avans.itemindex=0 then
    case DaysInAMonth_ of
      28: begin
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      29: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      30: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
          end;
      31: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
          end;
    end;

    s:=' ';
    pp_s:=' ';
    case rgTabelwork.ItemIndex of
      0 : day_char:='П';
      1 : day_char:='В';
      2 : day_char:='2';
      3 : day_char:='4';
      4 : day_char:='6';
      5 : day_char:='8';
      6 : day_char:='*';
      7 : day_char:='С';
      8 : day_char:='V';
      9 : day_char:='S';
      10 : day_char:='#';
      11 : day_char:='.';
      12 : day_char:='О';
      13 : day_char:='Б';
      14 : day_char:='К';
      15 : day_char:='Д';
      16 : day_char:='У';
    end;

    pk_date:=1; sqlparams.clear;
    pk:=1; pp_s:=' ';
    for i:=0 to memotabelworklist.lines.count-1
    do begin
        if memotabelworklist.Lines.Strings[i]<>''
        then begin
          oneline:=  memotabelworklist.Lines.Strings[i];
          pos_pp:=pos(')',oneline);
          pers_code:= copy(oneline,1,pos_pp-1);
//          if pp_s=' '
//          then pp_s := pers_code
//          else pp_s := pp_s+ ','+pers_code;
          if pp_s=' '
          then begin
            pp_s := ':pps_'+inttostr(pk)
          end else begin
            pp_s := pp_s+ ',:pps_'+inttostr(pk);
          end;
          inc(pk);
        end;
    end;

      for i_date:=0 to memotabelworkdate.lines.count-1
      do begin
        if memotabelworkdate.Lines.Strings[i_date]<>''
        then begin
          sqlparams_.Clear;
          sqlparams_.CreateParam(ftString,'P_DAY',ptInput);
          sqlparams_.ParamByName('P_DAY').Value := memotabelworkdate.Lines.Strings[i_date];
          pk:=1;
          for i:=0 to memotabelworklist.lines.count-1
          do begin
              if memotabelworklist.Lines.Strings[i]<>''
              then begin
                oneline:=  memotabelworklist.Lines.Strings[i];
                pos_pp:=pos(')',oneline);
                pers_code:= copy(oneline,1,pos_pp-1);
                sqlparams_.CreateParam(ftString,'pps_'+inttostr(pk),ptInput);
                sqlparams_.ParamByName('pps_'+inttostr(pk)).Value :=pers_code;
                inc(pk);
              end;
          end;
          execSql('delete from ok_freedays where branch=info.getbranch '+
           ' and personal_code in ('+pp_s+')'+   //
           ' and v_date=:P_DAY ', sqlparams_);

          sqlparams2_.Clear;
          sqlparams2_.CreateParam(ftString,'P_DAY',ptInput);
          sqlparams2_.ParamByName('P_DAY').Value := memotabelworkdate.Lines.Strings[i_date];
          sqlparams2_.CreateParam(ftString,'P_SIMBOL',ptInput);
          sqlparams2_.ParamByName('P_SIMBOL').Value := day_char;
          sqlparams2_.CreateParam(ftString,'P_COMMENTS',ptInput);
          sqlparams2_.ParamByName('P_COMMENTS').Value := edPrimFreeDays1.text;
          sqlparams2_.CreateParam(ftInteger,'P_USERID',ptInput);
          sqlparams2_.ParamByName('P_USERID').Value := userid;
          sqlparams2_.CreateParam(ftString,'P_1',ptInput);
          sqlparams2_.ParamByName('P_1').Value := curbranch;
          sqlparams2_.CreateParam(ftString,'P_2',ptInput);
          sqlparams2_.ParamByName('P_2').Value := copy(TabelDate,4,2);
          sqlparams2_.CreateParam(ftString,'P_3',ptInput);
          sqlparams2_.ParamByName('P_3').Value := copy(TabelDate,7,4);
          pk:=1;
          for i:=0 to memotabelworklist.lines.count-1
          do begin
              if memotabelworklist.Lines.Strings[i]<>''
              then begin
                oneline:=  memotabelworklist.Lines.Strings[i];
                pos_pp:=pos(')',oneline);
                pers_code:= copy(oneline,1,pos_pp-1);
                sqlparams2_.CreateParam(ftString,'pps_'+inttostr(pk),ptInput);
                sqlparams2_.ParamByName('pps_'+inttostr(pk)).Value :=pers_code;
                inc(pk);
              end;
          end;

          execSql('insert into ok_freedays (BRANCH,PERSONAL_CODE,V_DATE,SIMBOL,COMMENTS,EMP_CODE,INS_DATE)'+
            ' select distinct branch,personal_code,:P_DAY,:P_SIMBOL,:P_COMMENTS,:P_USERID,sysdate'+
            ' from ok_tabel'+
            ' where branch=:P_1 and tabel_month=:P_2 and tabel_year=:P_3'+
            ' and personal_code in ('+pp_s+')',sqlparams2_ );  //

          if s=' '
          then begin
//            s := ' day'+copy(memotabelworkdate.Lines.Strings[i],1,2)+'='''+day_char+''''
            s := ' day'+copy(memotabelworkdate.Lines.Strings[i_date],1,2)+'=:ps_'+inttostr(pk_date);
                sqlparams.CreateParam(ftString,'ps_'+inttostr(pk_date),ptInput);
                sqlparams.ParamByName('ps_'+inttostr(pk_date)).Value :=day_char;
                inc(pk_date);

          end else begin
            if pos(copy(memotabelworkdate.lines.Strings[i_date],1,2),s)=0
            then begin
//               s := s+',day'+copy(memotabelworkdate.lines.Strings[i],1,2)+'='''+day_char+'''';
                 s := s+',day'+copy(memotabelworkdate.Lines.Strings[i_date],1,2)+'=:ps_'+inttostr(pk_date);
                 sqlparams.CreateParam(ftString,'ps_'+inttostr(pk_date),ptInput);
                 sqlparams.ParamByName('ps_'+inttostr(pk_date)).Value :=day_char;
                 inc(pk_date);
            end;
          end;
        end;
      end;

          pk:=1;
          for i:=0 to memotabelworklist.lines.count-1
          do begin
              if memotabelworklist.Lines.Strings[i]<>''
              then begin
                oneline:=  memotabelworklist.Lines.Strings[i];
                pos_pp:=pos(')',oneline);
                pers_code:= copy(oneline,1,pos_pp-1);
                sqlparams.CreateParam(ftString,'pps_'+inttostr(pk),ptInput);
                sqlparams.ParamByName('pps_'+inttostr(pk)).Value :=pers_code;
                inc(pk);
              end;
          end;

{        sql_:='update ok_tabel set '+s+
          ' where personal_code in ('+pp_s+')'+
          ' and branch='+ curbranch+
          ' and tabel_month='+copy(TabelDate,4,2)+
          ' and tabel_year='+copy(TabelDate,7,4)  ;
}        sql_:='update ok_tabel set '+s+
          ' where personal_code in ('+pp_s+')'+
          ' and branch=:p_1'+ //curbranch+
          ' and tabel_month=:p_2'+ //copy(TabelDate,4,2)+
          ' and tabel_year=:p_3'; //+copy(TabelDate,7,4)  ;

        sqlparams.CreateParam(ftString,'p_1',ptInput);
        sqlparams.ParamByName('p_1').Value :=curbranch;
        sqlparams.CreateParam(ftString,'p_2',ptInput);
        sqlparams.ParamByName('p_2').Value :=copy(TabelDate,4,2);
        sqlparams.CreateParam(ftString,'p_3',ptInput);
        sqlparams.ParamByName('p_3').Value :=copy(TabelDate,7,4);

          try

            execsql(sql_, sqlparams); // 

            execsql('commit');

          Except on e:exception
            do begin

              execsql('rollback');
              ShowMessage(sql_+#13+e.message);
            end;
          End;
        end;
   cdstabel.refresh;

end;

procedure TBOKForm.BitBtn141Click(Sender: TObject);
var curr_m,  curr_y  : string;
  DaysInAMonth_ : word;
  TabelDate : string;
begin
//showmessage(inttostr(Dayofweek(now)));
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;

    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;

  medBankDate.text := '01.'+curr_m+'.'+curr_y;
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;
    
    DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));

    case DaysInAMonth_ of
      28: begin
            cdbgtabel.columns[39].Visible:=false;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      29: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=false;
            cdbgtabel.columns[41].Visible:=false;
          end;
      30: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=false;
          end;
      31: begin
            cdbgtabel.columns[39].Visible:=TRUE;
            cdbgtabel.columns[40].Visible:=TRUE;
            cdbgtabel.columns[41].Visible:=TRUE;
          end;
    end;

      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;
//   loaddata(cdsTabel,'select a.* from ok_tabel a where branch='''+curbranch+''' and tabel_month='+copy(TabelDate,4,2)+' and tabel_year='+copy(TabelDate,7,4)+' order by department_code,nn' );
       loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );

end;

procedure TBOKForm.actKursExecute(Sender: TObject);
begin
  LastPanel := 'RefPanel';
  pcmainok.ActivePage := RefPanel_;

  actCopyPers.Checked     := False ;
  actRef2.Checked     := False ;
  actRef.Checked    := False ;
  actTabel.Checked     := false ;
  actKurs.Checked     := True ;

  actNew.Checked     := False;
  actTable.Checked   := False;
  actForm.Checked    := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  actiias.Checked := false;

  if bosslevel<>'0' then actNew.Enabled         := True ;
  actUndoChanges.Enabled := False;

  OptionsPanel.Visible := False;

  pc.ActivePage:=TabKurs;
  ActDetailUndoExecute(nil);

  if (not cdsS_STR.Active) then
  Begin
    LoadData(cdsS_STR, SQL_S_STR);
  End;


  If cdsSSOKkv_kurs_SET.Active
  Then begin
  end else begin

    cdsSSOKkv_kurs_SET.DisableControls;
    LOADDATA(CDSSSOKkv_kurs_SET,      SQL_SSOKkv_kurs_SET);
    CDSSSOKkv_kurs_SET.Close;

    LOADDATA(cdsS_Str, 'select * from S_Str');
    addLookUpField(CDSSSOKkv_kurs_SET, cdsS_Str,
                  'CODE_STR_show', 'CODE_STR',
                  'CODE_STR', 'name', True);

    LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
    addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_theme_business_voyage_SET,
                  'theme_business_voyage_code_show', 'theme_business_voyage_code',
                  'theme_business_voyage_code', 'theme_business_voyage_name', false);

    LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
    addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_org_business_voyage_SET,
                  'org_business_voyage_code_show', 'org_business_voyage_code',
                  'org_business_voyage_code', 'org_business_voyage_name', false);

    LOADDATA(cdsss_ok_city, sql_ss_ok_city);
    addLookUpField(CDSSSOKkv_kurs_SET, cdsss_ok_city,
                  'city_code_show', 'city_code',
                  'city_code', 'city_name', false);


    CDSSSOKkv_kurs_SET.Open;
    cdsSSOKkv_kurs_SET.EnableControls;
  end;

  if bosslevel='1'
  then begin
    loaddata(cdsok_kurs,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code');
  end else begin
    cdsok_kurs.close;
      with cdsok_kurs.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
    loaddata(cdsok_kurs,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where p.branch=:p_1'+  //'''+curbranch+'''+
    ' and a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code');
  end;

  TabSheet11Show(nil);

end;

procedure TBOKForm.BitBtn142Click(Sender: TObject);
var sql_:string;
    k:integer;
    sqlparams:tparams;
begin

    sqlparams:=tparams.create;

  if cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring=''
  then begin
    showmessage('укажите Курс повышения квалификации.');
    exit;
  end;

{  sql_:='select count(*) from ok_kurs '+
      ' where branch='''+ cdsokpersonal.fieldbyname('branch').asstring+''''+
      ' and personal_code='+cdsokpersonal.fieldbyname('personal_code').asstring+
      ' and kv_kurs_code='+cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring;
}  sql_:='select count(*) from ok_kurs '+
      ' where branch=:p_1'+
      ' and personal_code=:p_2'+
      ' and kv_kurs_code=:p_3';
  k:=getsqlresultPAR(sql_,cdsokpersonal.fieldbyname('branch').asstring,
            cdsokpersonal.fieldbyname('personal_code').asstring,
            cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring  );

  if k>0
  then begin
    showmessage('Сотрудник уже в группе.');
    exit;
  end;


  try

    if cdsSSOKkv_kurs_SET.fieldbyname('ORDER_BUSINESS_VOYAGE').asstring ='1'
    then begin
      sqlparams.clear;
      SQLParams.CreateParam(ftString,'p_1',ptInput);
      SQLParams.CreateParam(ftString,'p_2',ptInput);
      SQLParams.CreateParam(ftString,'p_3',ptInput);
      SQLParams.CreateParam(ftString,'p_4',ptInput);
      SQLParams.CreateParam(ftString,'p_5',ptInput);
      SQLParams.CreateParam(ftString,'p_6',ptInput);
      SQLParams.CreateParam(ftString,'p_7',ptInput);
      SQLParams.CreateParam(ftString,'p_8',ptInput);
      SQLParams.CreateParam(ftString,'p_9',ptInput);
      SQLParams.CreateParam(ftString,'p_10',ptInput);
      SQLParams.CreateParam(ftString,'p_11',ptInput);
      SQLParams.CreateParam(ftString,'p_12',ptInput);
      SQLParams.CreateParam(ftString,'p_13',ptInput);
      SQLParams.CreateParam(ftString,'p_14',ptInput);


{      sql_:= 'insert into ok_business_voyage (branch,PERSONAL_CODE, kv_kurs_code,'+
        'EMP_CODE,INS_DATE,'+
        'date_open,date_close,number_day,org_business_voyage_code,'+
        'theme_business_voyage_code,CODE_STR,order_num,order_date,prim,city_code'+
        ') values ('+
        ''''+cdsokpersonal.fieldbyname('branch').asstring+''','+
        cdsokpersonal.fieldbyname('personal_code').asstring+','+
        cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring+','+
        userid+',sysdate,'+
        'to_date('''+cdsSSOKkv_kurs_SET.fieldbyname('date_open').asstring+''',''dd.mm.yyyy''),'+
        'to_date('''+cdsSSOKkv_kurs_SET.fieldbyname('date_close').asstring+''',''dd.mm.yyyy''),'+
        cdsSSOKkv_kurs_SET.fieldbyname('number_day').asstring+','+
        cdsSSOKkv_kurs_SET.fieldbyname('org_business_voyage_code').asstring+','+
        cdsSSOKkv_kurs_SET.fieldbyname('theme_business_voyage_code').asstring+','+
        ''''+cdsSSOKkv_kurs_SET.fieldbyname('CODE_STR').asstring  +''','+
        ''''+cdsSSOKkv_kurs_SET.fieldbyname('order_num').asstring +''','+
        'to_date('''+cdsSSOKkv_kurs_SET.fieldbyname('order_date').asstring+''',''dd.mm.yyyy''),'+
        ''''+cdsSSOKkv_kurs_SET.fieldbyname('prim').asstring+''','+
        cdsSSOKkv_kurs_SET.fieldbyname('city_code').asstring+')';
}      sql_:= 'insert into ok_business_voyage (branch,PERSONAL_CODE, kv_kurs_code,'+
        'EMP_CODE,INS_DATE,'+
        'date_open,date_close,number_day,org_business_voyage_code,'+
        'theme_business_voyage_code,CODE_STR,order_num,order_date,prim,city_code'+
        ') values (:p_1,:p_2,:p_3,:p_4,sysdate,'+
        'to_date(:p_5,''dd.mm.yyyy''),'+
        'to_date(:p_6,''dd.mm.yyyy''),'+
         ':p_7, :p_8, :p_9, :p_10, :p_11,'+
        'to_date(:p_12,''dd.mm.yyyy''),'+
         ':p_13,:p_14)';

      SQLParams.ParamByName('p_1').Value:=cdsokpersonal.fieldbyname('branch').asstring;
      SQLParams.ParamByName('p_2').Value:=cdsokpersonal.fieldbyname('personal_code').asstring;
      SQLParams.ParamByName('p_3').Value:=cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring;
      SQLParams.ParamByName('p_4').Value:=userid;
      SQLParams.ParamByName('p_5').Value:= cdsSSOKkv_kurs_SET.fieldbyname('date_open').asstring;
      SQLParams.ParamByName('p_6').Value:= cdsSSOKkv_kurs_SET.fieldbyname('date_close').asstring;
      SQLParams.ParamByName('p_7').Value:= cdsSSOKkv_kurs_SET.fieldbyname('number_day').asstring;
      SQLParams.ParamByName('p_8').Value:= cdsSSOKkv_kurs_SET.fieldbyname('org_business_voyage_code').asstring;
      SQLParams.ParamByName('p_9').Value:= cdsSSOKkv_kurs_SET.fieldbyname('theme_business_voyage_code').asstring;
      SQLParams.ParamByName('p_10').Value:= cdsSSOKkv_kurs_SET.fieldbyname('CODE_STR').asstring ;
      SQLParams.ParamByName('p_11').Value:= cdsSSOKkv_kurs_SET.fieldbyname('order_num').asstring ;
      SQLParams.ParamByName('p_12').Value:= cdsSSOKkv_kurs_SET.fieldbyname('order_date').asstring;
      SQLParams.ParamByName('p_13').Value:= cdsSSOKkv_kurs_SET.fieldbyname('prim').asstring;
      SQLParams.ParamByName('p_14').Value:= cdsSSOKkv_kurs_SET.fieldbyname('city_code').asstring ;

      execsql( sql_, sqlparams );

    end;


      sqlparams.clear;
      SQLParams.CreateParam(ftString,'p_1',ptInput);
      SQLParams.CreateParam(ftString,'p_2',ptInput);
      SQLParams.CreateParam(ftString,'p_3',ptInput);
      SQLParams.CreateParam(ftString,'p_4',ptInput);
      SQLParams.CreateParam(ftString,'p_5',ptInput);

{      sql_:= 'insert into ok_kurs (branch,PERSONAL_CODE,fio,kv_kurs_code,EMP_CODE,INS_DATE '+
        ') values ('+
        ''''+cdsokpersonal.fieldbyname('branch').asstring+''','+
        cdsokpersonal.fieldbyname('personal_code').asstring+','+
        ''''+cdsokpersonal.fieldbyname('family').asstring+' '+
        cdsokpersonal.fieldbyname('first_name').asstring+' '+
        cdsokpersonal.fieldbyname('patronymic').asstring+''','+
        cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring+','+
        userid+',sysdate)';
}      sql_:= 'insert into ok_kurs (branch,PERSONAL_CODE,fio,kv_kurs_code,EMP_CODE,INS_DATE '+
        ') values (:p_1,:p_2,:p_3,:p_4,:p_5,sysdate)';

        SQLParams.ParamByName('p_1').Value:= cdsokpersonal.fieldbyname('branch').asstring;
        SQLParams.ParamByName('p_2').Value:= cdsokpersonal.fieldbyname('personal_code').asstring;
        SQLParams.ParamByName('p_3').Value:= cdsokpersonal.fieldbyname('family').asstring+' '+
          cdsokpersonal.fieldbyname('first_name').asstring+' '+
          cdsokpersonal.fieldbyname('patronymic').asstring;
        SQLParams.ParamByName('p_4').Value:= cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring;
        SQLParams.ParamByName('p_5').Value:= userid;

            execsql( sql_ , sqlparams);

    execsql( 'commit' );
  except on e:exception
    do begin
      execsql( 'rollback' );

      if pos(e.message,'OK_BUSINESS_VOYAGE_PK')>0
      then begin
        cdsok_business_voyage.refresh;
        showmessage('сотрудник уже отправлен в командировку с датой начала '+
          '"'+cdsSSOKkv_kurs_SET.fieldbyname('date_open').asstring+'"'+#13+
          ' смотрите вкладку "Командировки"'+
          #13+sql_+#13+e.message);
      end else begin
        if pos(e.message,'OK_KURS_PK')>0
        then begin
          cdsOK_Kurs2.refresh;
          showmessage('сотрудник уже отправлен на эти курсы'+
            #13+sql_+#13+e.message);
        end else begin
          showmessage(sql_+#13+e.message);
        end;
      end;

    end;
  end;

  if cdsokkurs.Active
  then cdsokkurs.refresh;

  if cdskursdva.Active
  then cdskursdva.refresh;

  if cdsOK_Kurs.Active
  then cdsOK_Kurs.refresh;

  if cdsOK_Kurs2.Active
  then cdsOK_Kurs2.refresh;

  if cdsOK_Kurs3.Active
  then cdsOK_Kurs3.refresh;

  if cdsok_business_voyage.Active
  then cdsok_business_voyage.refresh;

  if cdsOK_kurs.Active
  then cdsOK_kurs.refresh;

  if cdsSSOKkv_kurs_SET.active
  then cdsSSOKkv_kurs_SET.refresh;



end;

procedure TBOKForm.cdsOKKursAfterOpen(DataSet: TDataSet);
begin
  If dsSSOKkv_kurs_SET.DataSet.Active Then
  Begin
    cdsOKKurs.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOKKurs.IndexFieldNames := 'kv_kurs_code';
    cdsOKKurs.MasterFields    := 'kv_kurs_code';
  end else begin
    loaddata(cdsSSOKkv_kurs_SET,SQL_SSOKkv_kurs_SET);
    cdsOKKurs.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOKKurs.IndexFieldNames := 'kv_kurs_code';
    cdsOKKurs.MasterFields    := 'kv_kurs_code';

  End;

end;

procedure TBOKForm.BitBtn143Click(Sender: TObject);
var sql_:string;
begin

  try
{      sql_:= 'delete from ok_kurs '+
      ' where branch='''+ cdsOK_Kurs2.fieldbyname('branch').asstring+''''+
      ' and personal_code='+cdsOK_Kurs2.fieldbyname('personal_code').asstring+
      ' and kv_kurs_code='+cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring;
}      sql_:= 'delete from ok_kurs '+
      ' where branch=:p_1'+ //'''+ cdsOK_Kurs2.fieldbyname('branch').asstring+''''+
      ' and personal_code=:p_2'+ //cdsOK_Kurs2.fieldbyname('personal_code').asstring+
      ' and kv_kurs_code=:p_3'; //+cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring;
    execsqlPAR( sql_ , cdsOK_Kurs2.fieldbyname('branch').asstring,
       cdsOK_Kurs2.fieldbyname('personal_code').asstring,
       cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring
        );
{      sql_:= 'delete from ok_business_voyage '+
      ' where branch='''+ cdsOK_Kurs2.fieldbyname('branch').asstring+''''+
      ' and personal_code='+cdsOK_Kurs2.fieldbyname('personal_code').asstring+
      ' and kv_kurs_code='+cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring;
}      sql_:= 'delete from ok_business_voyage '+
      ' where branch=:p_1'+ //cdsOK_Kurs2.fieldbyname('branch').asstring+''''+
      ' and personal_code=:p_2'+ //cdsOK_Kurs2.fieldbyname('personal_code').asstring+
      ' and kv_kurs_code=:p_3'; //+cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring;
    execsqlpar( sql_,  cdsOK_Kurs2.fieldbyname('branch').asstring,
       cdsOK_Kurs2.fieldbyname('personal_code').asstring,
       cdsOK_Kurs2.fieldbyname('kv_kurs_code').asstring
        );
    execsql( 'commit' );
  except on e:exception
    do begin
      execsql( 'rollback' );
      showmessage(sql_+#13+e.message);
    end;
  end;

  if cdsokkurs.Active
  then cdsokkurs.refresh;

  if cdskursdva.Active
  then cdskursdva.refresh;

  if cdsOK_Kurs.Active
  then cdsOK_Kurs.refresh;

  if cdsOK_Kurs2.Active
  then cdsOK_Kurs2.refresh;

  if cdsOK_Kurs3.Active
  then cdsOK_Kurs3.refresh;

  if cdsok_business_voyage.Active
  then cdsok_business_voyage.refresh;

  if cdsOK_kurs.Active
  then cdsOK_kurs.refresh;

  if cdsSSOKkv_kurs_SET.active
  then cdsSSOKkv_kurs_SET.refresh;

end;

procedure TBOKForm.ListDetailClick(Sender: TObject);
begin
    PCDetails.ActivePageIndex := StrToInt( TData(ListDetail.Items.Objects[ListDetail.ItemIndex]).Id );

end;

procedure TBOKForm.cdsOK_kursAfterOpen(DataSet: TDataSet);
begin

  If dsSSOKkv_kurs_SET.DataSet.Active Then
  Begin
    cdsOK_Kurs2.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOK_Kurs2.IndexFieldNames := 'kv_kurs_code';
    cdsOK_Kurs2.MasterFields    := 'kv_kurs_code';

    cdsOK_Kurs2.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOK_Kurs2.IndexFieldNames := 'kv_kurs_code';
    cdsOK_Kurs2.MasterFields    := 'kv_kurs_code';
  end else begin
  cdsSSOKkv_kurs_SET.DisableControls;
  LOADDATA(CDSSSOKkv_kurs_SET,SQL_SSOKkv_kurs_SET);

  CDSSSOKkv_kurs_SET.Close;

  LOADDATA(cdsS_Str, 'select * from S_Str');
  addLookUpField(CDSSSOKkv_kurs_SET, cdsS_Str,
                'CODE_STR_show', 'CODE_STR',
                'CODE_STR', 'name', True);

  LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
  addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_theme_business_voyage_SET,
                'theme_business_voyage_code_show', 'theme_business_voyage_code',
                'theme_business_voyage_code', 'theme_business_voyage_name', false);

  LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
  addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_org_business_voyage_SET,
                'org_business_voyage_code_show', 'org_business_voyage_code',
                'org_business_voyage_code', 'org_business_voyage_name', false);

  LOADDATA(cdsss_ok_city, sql_ss_ok_city);
  addLookUpField(CDSSSOKkv_kurs_SET, cdsss_ok_city,
                'city_code_show', 'city_code',
                'city_code', 'city_name', false);

  CDSSSOKkv_kurs_SET.Open;
  cdsSSOKkv_kurs_SET.EnableControls;


    cdsOK_Kurs2.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOK_Kurs2.IndexFieldNames := 'kv_kurs_code';
    cdsOK_Kurs2.MasterFields    := 'kv_kurs_code';

  End;

{  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKEducation.FieldByName('begin_date').EditMask  := '!09/09/0099;1;_';
//    cdsOKEducation.FieldByName('end_date').EditMask    := '!09/09/0099;1;_';
    cdsOK_kurs.MasterSource    := dsOKPersonal;
    cdsOK_kurs.IndexFieldNames := 'branch;personal_code';
    cdsOK_kurs.MasterFields    := 'branch;personal_code';
  End;
}
end;

procedure TBOKForm.TabSheet11Show(Sender: TObject);
begin


  If cdsok_kurs2.Active Then Exit;
  cdsok_kurs2.DisableControls;
  cdsok_kurs3.DisableControls;

  if bosslevel='1'
  then begin loaddata(cdsok_kurs2,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code');
  end else begin
      cdsok_kurs2.close;
      with cdsok_kurs2.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
    loaddata(cdsok_kurs2,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where p.branch=:p_1'+ //'''+curbranch+''
    ' and a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code');
  end;

 loaddata(cdsok_kurs3,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code');

  cdsok_kurs3.Close;
  LOADDATA(cdsS_Str, 'select * from S_Str');
  addLookUpField(cdsok_kurs3, cdsS_Str,
                'CODE_STR_show', 'CODE_STR',
                'CODE_STR', 'name', True);

  LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
  addLookUpField(cdsok_kurs3, cdsssok_theme_business_voyage_SET,
                'theme_business_voyage_code_show', 'theme_business_voyage_code',
                'theme_business_voyage_code', 'theme_business_voyage_name', false);

  LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
  addLookUpField(cdsok_kurs3, cdsssok_org_business_voyage_SET,
                'org_business_voyage_code_show', 'org_business_voyage_code',
                'org_business_voyage_code', 'org_business_voyage_name', false);

  LOADDATA(cdsss_ok_city, sql_ss_ok_city);
  addLookUpField(cdsok_kurs3, cdsss_ok_city,
                'city_code_show', 'city_code',
                'city_code', 'city_name', false);
  cdsok_kurs3.open;
  cdsok_kurs3.enableControls;


  cdsok_kurs2.Close;
  LOADDATA(cdsS_Str, 'select * from S_Str');
  addLookUpField(cdsok_kurs2, cdsS_Str,
                'CODE_STR_show', 'CODE_STR',
                'CODE_STR', 'name', True);

  LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
  addLookUpField(cdsok_kurs2, cdsssok_theme_business_voyage_SET,
                'theme_business_voyage_code_show', 'theme_business_voyage_code',
                'theme_business_voyage_code', 'theme_business_voyage_name', false);

  LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
  addLookUpField(cdsok_kurs2, cdsssok_org_business_voyage_SET,
                'org_business_voyage_code_show', 'org_business_voyage_code',
                'org_business_voyage_code', 'org_business_voyage_name', false);

  LOADDATA(cdsss_ok_city, sql_ss_ok_city);
  addLookUpField(cdsok_kurs2, cdsss_ok_city,
                'city_code_show', 'city_code',
                'city_code', 'city_name', false);
  cdsok_kurs2.open;
  cdsok_kurs2.enableControls;

end;

procedure TBOKForm.cdsOK_Kurs2AfterOpen(DataSet: TDataSet);
begin


//    cdsOK_kurs2.MasterSource    := dsOKPersonal;
//    cdsOK_kurs2.IndexFieldNames := 'branch;personal_code';
//    cdsOK_kurs2.MasterFields    := 'branch;personal_code';

  If dsSSOKkv_kurs_SET.DataSet.Active Then
  Begin
    cdsOK_Kurs2.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOK_Kurs2.IndexFieldNames := 'kv_kurs_code';
    cdsOK_Kurs2.MasterFields    := 'kv_kurs_code';
  end else begin
  cdsSSOKkv_kurs_SET.DisableControls;
  LOADDATA(CDSSSOKkv_kurs_SET,SQL_SSOKkv_kurs_SET);

  CDSSSOKkv_kurs_SET.Close;

    LOADDATA(cdsS_Str, 'select * from S_Str');
  addLookUpField(CDSSSOKkv_kurs_SET, cdsS_Str,
                'CODE_STR_show', 'CODE_STR',
                'CODE_STR', 'name', True);

  LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
  addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_theme_business_voyage_SET,
                'theme_business_voyage_code_show', 'theme_business_voyage_code',
                'theme_business_voyage_code', 'theme_business_voyage_name', false);

  LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
  addLookUpField(CDSSSOKkv_kurs_SET, cdsssok_org_business_voyage_SET,
                'org_business_voyage_code_show', 'org_business_voyage_code',
                'org_business_voyage_code', 'org_business_voyage_name', false);

  LOADDATA(cdsss_ok_city, sql_ss_ok_city);
  addLookUpField(CDSSSOKkv_kurs_SET, cdsss_ok_city,
                'city_code_show', 'city_code',
                'city_code', 'city_name', false);

  CDSSSOKkv_kurs_SET.Open;
  cdsSSOKkv_kurs_SET.EnableControls;


    cdsOK_Kurs2.MasterSource    := dsSSOKkv_kurs_SET;
    cdsOK_Kurs2.IndexFieldNames := 'kv_kurs_code';
    cdsOK_Kurs2.MasterFields    := 'kv_kurs_code';

  End;

end;

procedure TBOKForm.DBEdit134KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  Case Key of
    VK_RETURN:
      begin
        if (strtodate(dbedHospitalDateOpen.text)) > (strtodate(DBEdit134.text))
        then begin
          showmessage('Дата выдачи больничного '+DBEdit134.text+' должна быть больше или равна дате открытия больничного '+dbedHospitalDateOpen.text);
        end else begin
          SelectNext(ActiveControl, True, True);
        end;
      end;
  end;

end;

procedure TBOKForm.CDSok_zp_rateAfterOpen(DataSet: TDataSet);
begin
    CDSok_zp_rate.MasterSource    := dsOKPersonal;
    CDSok_zp_rate.IndexFieldNames := 'branch;personal_code';
    CDSok_zp_rate.MasterFields    := 'branch;personal_code';
    CDSok_zp_rate.FieldByName('zp_rate_date').EditMask  := '!09/09/0099;1;_';
    CDSok_zp_rate.FieldByName('zp_rate_order_date').EditMask  := '!09/09/0099;1;_';

end;

procedure TBOKForm.TabSheet12Show(Sender: TObject);
begin
  if cdsok_zp_rate.Active then
  Begin
    Exit;
  End;

      cdsok_zp_rate.close;
      with cdsok_zp_rate.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
      end;
//  LoadData(cdsok_zp_rate, SQL_ok_zp_rate+' where branch = '+''''+curBranch +'''');
  LoadData(cdsok_zp_rate, SQL_ok_zp_rate+' where branch=:p_1');

  cdsok_zp_rate.Close;
  cdsok_zp_rate.DisableControls;

  if not cdsss_ok_zp_rate.Active then LoadData(cdsss_ok_zp_rate, SQL_ss_ok_zp_rate);
  if not cdsss_ok_zp_rate_type.Active then LoadData(cdsss_ok_zp_rate_type, SQL_ss_ok_zp_rate_type);

  addLookUpField(cdsok_zp_rate, cdsss_ok_zp_rate, 'zp_rate_code_show', 'zp_rate_code', 'zp_rate_code', 'zp_rate_name', True);
  addLookUpField(cdsok_zp_rate, cdsss_ok_zp_rate_type, 'zp_rate_type_code_show', 'zp_rate_type_code', 'zp_rate_type_code', 'zp_rate_type_name', False);
  addLookUpField(cdsok_zp_rate, cdsUsers, 'emp_name', 'emp_code', 'emp_code', 'emp_NAME', False);

  cdsok_zp_rate.Open;
  cdsok_zp_rate.EnableControls;

end;

procedure TBOKForm.DBEd_zp_rate_dateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  sql_ : string;
  v : variant;
begin
  Case Key of
    VK_RETURN:
      begin
        SelectNext(ActiveControl, True, True);
        if not (cdsok_zp_rate.state in [dsEdit])
        then cdsok_zp_rate.edit;

// подсчитать поле "Фактическое окладо"

//        DBEd_zp_rate_date.text
//  DBLCB_zp_rate.text


{        sql_:='select round(salary*'+DBLCB_zp_rate.text+',2) from ss_ok_category sokc , ok_personal okp,'+
         ' ss_ok_post sokp'+
         ' where branch='''+branch+''''+
         ' and okp.personal_code='+cdsokpersonal.fieldbyname('personal_code').asstring+
         ' and okp.post_code=sokp.post_code'+
         ' and sokc.category_code=sokp.category_code'+
         ' and sokp.state_notes=''A'''+
         ' and sokc.state_notes=''A''';
}        sql_:='select round(salary* :p_1 ,2) from ss_ok_category sokc , ok_personal okp,'+
         ' ss_ok_post sokp'+
         ' where branch=:p_2'+ // '''+branch+''''+
         ' and okp.personal_code=:p_3'+ //cdsokpersonal.fieldbyname('personal_code').asstring+
         ' and okp.post_code=sokp.post_code'+
         ' and sokc.category_code=sokp.category_code'+
         ' and sokp.state_notes=:p_4'+ //''A'''+
         ' and sokc.state_notes=:p_5'; //''A''';

        try
          v:= getsqlresultPAR(sql_,DBLCB_zp_rate.text,curbranch,cdsokpersonal.fieldbyname('personal_code').asstring,
            'A','A'
          );
          if not varisnull(v)
          then begin
            if (cdsok_zp_rate.State in [dsEdit, dsInsert])
            then begin
              cdsok_zp_rate.fieldbyname('zp_fakt').asstring:= v;
            end;
          end else begin
//            sql_:='select ok_service.get_postname('+cdsokpersonal.fieldbyname('post_code').asstring+') from dual';
            sql_:='select ok_service.get_postname(:p_1) from dual';
            v:=  getsqlresultPAR(sql_,cdsokpersonal.fieldbyname('post_code').asstring);
            if not varisnull(v)
            then showmessage('для должности '+v+' не указан разряд либо не введен тариф')
            else  showmessage('для должности сотрудника не указан разряд либо не введен тариф');
          end;

        except on e:exception
          do begin
            showmessage(sql_+#13+e.message);
            SelectNext(ActiveControl, FALSe, True);
          end;
        end;
      end;
  end;

end;

procedure TBOKForm.dbedCOD_OBL_LIVEKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if  dbedCOD_OBL_LIVE.Text = ''
  then begin
    cds_distr.Filtered := False;
  end
  else begin
    cds_distr.Filtered := False;
    cds_distr.Filter := 'region_id='+ cds_Region.FieldByName('region_id').AsString;
    cds_distr.Filtered := True;
  end;

end;

procedure TBOKForm.dbedCOD_OBL_birthKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if  dbedCOD_OBL_birth.Text = ''
  then begin
    cds_distr.Filtered := False;
  end
  else begin
    cds_distr.Filtered := False;
    cds_distr.Filter := 'region_id='+ cds_Region.FieldByName('region_id').AsString;
    cds_distr.Filtered := True;
  end;

end;

procedure TBOKForm.DBLookupComboBox27Click(Sender: TObject);
begin
  if  dbedCOD_OBL_LIVE.Text = ''
  then begin
    cds_distr.Filtered := False;
  end
  else begin
    cds_distr.Filtered := False;
    cds_distr.Filter := 'region_id='+ cds_Region.FieldByName('region_id').AsString;
    cds_distr.Filtered := True;
  end;

end;

procedure TBOKForm.DBLookupComboBox9Click(Sender: TObject);
begin
  if  dbedCOD_OBL_birth.Text = ''
  then begin
    cds_distr.Filtered := False;
  end
  else begin
    cds_distr.Filtered := False;
    cds_distr.Filter := 'region_id='+ cds_Region.FieldByName('region_id').AsString;
    cds_distr.Filtered := True;
  end;

end;

procedure TBOKForm.ed_iias_live_regionChange(Sender: TObject);
begin
  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_live').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_live').asstring:='860';

  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_birth').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_birth').asstring:='860';

  if sender.ClassType= TDBEdit
  then begin
    if tdbedit(sender).Text = ''
    then begin
      cdsSDistr_RO2.Filtered := False;
    end
    else begin
      cdsSDistr_RO2.Filtered := False;
      cdsSDistr_RO2.Filter := 'region_id='+ cdsSRegion.FieldByName('region_id').AsString;
      cdsSDistr_RO2.Filtered := True;
    end;
  end;


end;

procedure TBOKForm.edRegion_RO2Change(Sender: TObject);
begin
  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_live').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_live').asstring:='860';

  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_birth').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_birth').asstring:='860';

  if sender.ClassType= TDBEdit
  then begin
    if tdbedit(sender).Text = ''
    then begin
      cdsSDistr_RO2.Filtered := False;
    end
    else begin
      cdsSDistr_RO2.Filtered := False;
      cdsSDistr_RO2.Filter := 'region_id='+ cdsSRegion.FieldByName('region_id').AsString;
      cdsSDistr_RO2.Filtered := True;
    end;
  end;

end;

procedure TBOKForm.edDistrRO2Change(Sender: TObject);
begin
  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_live').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_live').asstring:='860';

  if (cdsOKPersonal.Active) and (cdsOKPersonal.fieldbyname('cod_str_birth').asstring<>'860')
  and (cdsOKpersonal.State in [dsEdit, dsInsert])
  then cdsOKPersonal.fieldbyname('cod_str_birth').asstring:='860';

  if sender.ClassType= TDBEdit
  then begin
    if tdbedit(sender).Text = ''
    then begin
      cdsSDistrRO2.Filtered := False;
    end
    else begin
      cdsSDistrRO2.Filtered := False;
      cdsSDistrRO2.Filter := 'region_id='+ cdsSRegion.FieldByName('region_id').AsString;
      cdsSDistrRO2.Filtered := True;
    end;
  end;

end;

procedure TBOKForm.cdsOKPeriodAfterScroll(DataSet: TDataSet);
begin

  if kapital_bank
  then begin
    if DataSet.FieldByName('type_period_code').AsString='3'
    then begin
      DBEd_poststring.Width := 160;
      DBEd_depstring.Width := 160;
    end else begin
      DBEd_poststring.Width := 465;
      DBEd_depstring.Width := 465;
    end;
  end;

end;

procedure TBOKForm.cdsOKPeriodAfterRefresh(DataSet: TDataSet);
begin
  if kapital_bank
  then begin
    if DataSet.FieldByName('type_period_code').AsString='3'
    then begin
      DBEd_poststring.Width := 160;
      DBEd_depstring.Width := 160;
    end else begin
      DBEd_poststring.Width := 465;
      DBEd_depstring.Width := 465;
    end;
  end;

end;

procedure TBOKForm.BitBtn151Click(Sender: TObject);
begin
  cdsokleave.Edit;
  cdsokleave.FieldByName('date_recall_begin').Value:=NULL;
  cdsokleave.FieldByName('date_recall_end').Value:=NULL;
  cdsokleave.FieldByName('period_leave_recall').Value:=NULL;
  cdsokleave.FieldByName('date_order_recall').Value:=NULL;
  cdsokleave.FieldByName('num_order_recall').Value:=NULL;
  cdsokleave.post;

end;

procedure TBOKForm.actRefreshRefExecute(Sender: TObject);
var sql_:string;
begin
//
        cdsOKPersonalAfterScroll(nil);

   LOADDATA(CDS_iias_birth_region,sql_sregion);
   LOADDATA(CDS_iias_birth_distr,sql_sdistr);

   LOADDATA(CDS_iias_live_region,sql_sregion);
   LOADDATA(CDS_iias_live_distr, sql_sdistr);

   LOADDATA(CDSregionNew,sql_sregion);
   LOADDATA(CDSdistrNew, sql_sdistr);

   LOADDATA(cds_DBLCB_SRegion,sql_sregion);
   LOADDATA(cds_DBLCBdistr, sql_sdistr);

   LOADDATA(cds_dblcbRegion_RO2,sql_sregion);
   LOADDATA(cds_dblcbDistrRO_2, sql_sdistr);
   LOADDATA(cds_dblcbRegion_RO3,sql_sregion);
   LOADDATA(cds_dblcbDistrRO_3, sql_sdistr);

   LOADDATA(CDSSS_OK_CITY,      SQL_SS_OK_CITY);
   LOADDATA(CDSSS_OK_GOSUBMIT,'SELECT * FROM SS_OK_GOSUBMIT');
   LOADDATA(CDSSS_OK_PASSPORT_TYPE,      SQL_SS_OK_PASSPORT_TYPE);
   LOADDATA(CDSSS_OK_REGPLACE,      SQL_SS_OK_REGPLACE);
   LOADDATA(CDSSSOKACADEMIC_SET,      SQL_SSOKACADEMIC_SET);
   LOADDATA(CDSSSOKARTICLE_SET,      SQL_SSOKARTICLE_SET);
   LOADDATA(CDSSSOKBASIS_SET, SQL_SSOKBASIS_SET);
   LOADDATA(CDSSSOKCOMMANDTYPE_SET,      SQL_SSOKCOMMANDTYPE_SET);
   LOADDATA(CDSSSOKDEGREE_SET,            SQL_SSOKDEGREE_SET);
   LOADDATA(CDSSSOKDEPARTMENT_RO,      SQL_SSOKDEPARTMENT_SET2);
//   LOADDATA(CDSSSOKDEPARTMENT_SET,             SQL_SSOKDEPARTMENT_SET);
      cdsSSOKDepartment_SET.Close;
      with cdsSSOKDepartment_SET.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := 'A';
          CreateParam(ftInteger,'p_2' ,ptInput);
          ParamByName('p_2').Value := strtoint(BossLevel);
          CreateParam(ftInteger,'p_3' ,ptInput);
          ParamByName('p_3').Value := 4;
      end;

  sql_:= 'select /*+ INDEX (d ss_ok_department_PK)*/ '+
    ' d.department_id, d.branch, d.department_code, '+
    ' d.department_name, d.department_num, d.department_type_code,'+
    ' d.high_dep_code, d.state_notes, d.emp_code,'+
    ' d.ins_date, d.LEVEL_DEPARTMENT_CODE, substr(ok_service.GET_high_name(d.department_code),1,250) HIGH_NAME '+
    ' FROM ss_ok_department d '+
    ' where state_notes=:p_1 and level_department_code in(:p_2,:p_3) ';

   LoadData(cdsSSOKDepartment_SET,sql_,True);

   LOADDATA(CDSSSOKDEPARTMENTTYPE_SET,      SQL_SSOKDEPARTMENTTYPE_SET);
   LOADDATA(CDSSSOKEDUCATION_SET,      SQL_SSOKEDUCATION_SET);
   LOADDATA(CDSSSOKEDUCATIONTITLE_SET,     SQL_SSOKEDUCATIONTITLE_SET);
   LOADDATA(CDSSSOKFAMILYSTATUS_SET,    SQL_SSOKFAMILYSTATUS_SET);
   LOADDATA(CDSSSOKGENDER_SET,     SQL_SSOKGENDER_SET);
   LOADDATA(CDSSSOKINSTITUTION_SET,    SQL_SSOKINSTITUTION_SET);
   LOADDATA(CDSSSOKLANGUAGE_SET,      SQL_SSOKLANGUAGE_SET);
   LOADDATA(CDSSSOKLEAVE_SET,      SQL_SSOKLEAVE_SET);
   LOADDATA(CDSSSOKLEVELLANGUAGE_SET,      SQL_SSOKLEVELLANGUAGE_SET);
   LOADDATA(CDSSSOKMOTIVE_SET,     SQL_SSOKMOTIVEDISMISSIAL_SET);
   LOADDATA(CDSSSOKMOTIVEDISMISSIAL_SET,      SQL_SSOKMOTIVEDISMISSIAL_SET);
   LOADDATA(CDSSSOKNATIONALITY_SET,     SQL_SSOKNATIONALITY_SET);
   LOADDATA(CDSSSOKPARTY_SET,    SQL_SSOKPARTY_SET);
//   LOADDATA(CDSSSOKPOST_SET, SQL_SSOKPOST_SET);
      cdsSSOKPost_SET.Close;

      with cdsSSOKPost_SET.Params
      do begin
          clear;
            if (headbranch_='09006')
            then begin
              mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                ' where branch=:p_1',branch);
              if varisnull(mfo_category_type_code_VAR)
              then begin
                mfo_category_type_code :='0';
                showmessage('(21154)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
              end else begin
                mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
              end;
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftString,'p_4' ,ptInput);
              ParamByName('p_4').Value := mfo_category_type_code;
            end else begin
              CreateParam(ftString,'p_1' ,ptInput);
              ParamByName('p_1').Value := 'A';
              CreateParam(ftInteger,'p_2' ,ptInput);
              ParamByName('p_2').Value := strtoint(BossLevel);
              CreateParam(ftInteger,'p_3' ,ptInput);
              ParamByName('p_3').Value := 4;
            end;
        end;

            if (headbranch_='09006')
            then begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_4)';
            end else begin
              sql_ := 'SELECT * FROM ss_ok_post d where d.state_notes like :p_1 '+
                ' and d.level_department_code in(:p_2,:p_3) ';
            end;
      LoadData(cdsSSOKPost_SET, sql_);

   LOADDATA(CDSSSOKPROFMEMBER_SET, SQL_SSOKPROFMEMBER_SET);
   LOADDATA(CDSSSOKQUALIFICATION_SET,      SQL_SSOKQUALIFICATION_SET);
   LOADDATA(CDSSSOKREGTYPE_SET,     SQL_SSOKREGTYPE_SET);
   LOADDATA(CDSSSOKRELATION_SET,      SQL_SSOKRELATION_SET);
   LOADDATA(CDSSSOKSPECIAL_RO, SQL_SSOKSPECIAL_SET);
   LOADDATA(CDSSSOKSPECIAL_SET,      SQL_SSOKSPECIAL_SET);
   LOADDATA(CDSSSOKSTATUS_SET,     SQL_SSOKSTATUS_SET);
   LOADDATA(CDSSSOKTEMPLATECOMMAND_SET,    SQL_SSOKTEMPLATECOMMAND_SET);
   LOADDATA(CDSSSOKTYPEPERIOD_SET,      SQL_SSOKTYPEPERIOD_SET);
   LOADDATA(CDSSSOKYOUTH_SET,      SQL_SSOKYOUTH_SET);

end;

procedure TBOKForm.dblcb_iias_birth_distrEnter(Sender: TObject);
begin
   CDS_iias_birth_distr.filtered:=false;
   CDS_iias_birth_distr.filter:='REGION_ID='+
      CDS_iias_birth_region.fieldbyname('REGION_ID').asstring;
   CDS_iias_birth_distr.filtered:=true;

end;

procedure TBOKForm.dblcb_iias_birth_distrCloseUp(Sender: TObject);
begin
   CDS_iias_birth_distr.filtered:=false;
   CDS_iias_birth_distr.filter:='';

end;

procedure TBOKForm.dblcb_iias_live_distrCloseUp(Sender: TObject);
begin
   CDS_iias_live_distr.filtered:=false;
   CDS_iias_live_distr.filter:='';

end;

procedure TBOKForm.dblcb_iias_live_distrEnter(Sender: TObject);
begin
   CDS_iias_live_distr.filtered:=false;
   CDS_iias_live_distr.filter:='REGION_ID='+
     CDS_iias_live_region.fieldbyname('REGION_ID').asstring;
   CDS_iias_live_distr.filtered:=true;

end;

procedure TBOKForm.dblcbDistrNewCloseUp(Sender: TObject);
begin
   CDSDistrNew.filtered:=false;
   CDSDistrNew.filter:='';

end;

procedure TBOKForm.dblcbDistrNewEnter(Sender: TObject);
begin
   CDSDistrNew.filtered:=false;
   CDSDistrNew.filter:='REGION_ID='+
     CDSregionnew.fieldbyname('REGION_ID').asstring;
   CDSDistrNew.filtered:=true;

end;

procedure TBOKForm.DBLCBdistrCloseUp(Sender: TObject);
begin
   CDS_DBLCBdistr.filtered:=false;
   CDS_DBLCBdistr.filter:='';

end;

procedure TBOKForm.DBLCBdistrEnter(Sender: TObject);
begin
   CDS_DBLCBdistr.filtered:=false;
   CDS_DBLCBdistr.filter:='REGION_ID='+
     cds_DBLCB_SRegion.fieldbyname('REGION_ID').asstring;
   CDS_DBLCBdistr.filtered:=true;

end;

procedure TBOKForm.dblcbDistrRO_3CloseUp(Sender: TObject);
begin
   CDS_dblcbDistrRO_3.filtered:=false;
   CDS_dblcbDistrRO_3.filter:='';

end;

procedure TBOKForm.dblcbDistrRO_2CloseUp(Sender: TObject);
begin
   CDS_dblcbDistrRO_2.filtered:=false;
   CDS_dblcbDistrRO_2.filter:='';

end;

procedure TBOKForm.dblcbDistrRO_3Enter(Sender: TObject);
begin
   CDS_dblcbDistrRO_3.filtered:=false;
   CDS_dblcbDistrRO_3.filter:='REGION_ID='+
     cds_dblcbRegion_RO3.fieldbyname('REGION_ID').asstring;
   CDS_dblcbDistrRO_3.filtered:=true;

end;

procedure TBOKForm.dblcbDistrRO_2Enter(Sender: TObject);
begin
   CDS_dblcbDistrRO_2.filtered:=false;
   CDS_dblcbDistrRO_2.filter:='REGION_ID='+
     cds_dblcbRegion_RO2.fieldbyname('REGION_ID').asstring;
   CDS_dblcbDistrRO_2.filtered:=true;

end;

procedure TBOKForm.actStatPersonalExecute(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant;
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname,oldpost: String;
  total_count,
  total_sum,total_sum2,total_count2:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].Value := 'Наименование';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'Тарифный';
  inc(i);
  V.Cells[row, i ].Value := 'Количество';
  inc(i);
  V.Cells[row, i ].Value := 'Размер';
  inc(i);
  V.Cells[row, i ].Value := 'Всего';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'отделов,';
  inc(i);
  V.Cells[row, i ].Value := 'Разряд';
  inc(i);
  V.Cells[row, i ].Value := 'Коэффициент';
  inc(i);
  V.Cells[row, i ].Value := 'рабочих';
  inc(i);
  V.Cells[row, i ].Value := 'должностного';
  inc(i);
  V.Cells[row, i ].Value := 'за';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'должностей';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'мест';
  inc(i);
  V.Cells[row, i ].Value := 'оклада';
  inc(i);
  V.Cells[row, i ].Value := 'месяц';

  total_count:=0;
  total_count2:=0;
  total_sum:=0;
  total_sum2:=0;

  olddepname:='x';
  oldpost:='x';
  While not cdsTempSource.Eof
  do begin
// отделы-только с 'A' но должности и специализации- без state_notes='A' чтобы показало всех сотрудников в состоянии 2-принят и 5-декрет
    if (headbranch_='09006')
    then begin
        sql_:='select '+
           ' c.post_name field1 ,d.category_name field2,d.category_rate,'+
           ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' round(( nvl( to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'' ),0) )*nvl(d.salary,0),2) zarpl, '+
           ' to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'') float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_post_category f'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
           ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.branch=okp.branch'+
           ' and a.department_code=okp.department_code'+
           ' and a.post_code=okp.post_code'+
           ' and a.special_code=okp.special_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
           ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
           ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
        end;
    end else begin
        sql_:='select '+
           ' c.post_name field1 ,d.category_name field2,d.category_rate,'+
           ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' round(( nvl( to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'' ),0) )*nvl(d.salary,0),2) zarpl, '+
           ' to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'') float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
           ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.branch=okp.branch'+
           ' and a.department_code=okp.department_code'+
           ' and a.post_code=okp.post_code'+
           ' and a.special_code=okp.special_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
           ' and c.category_code=d.category_code (+)'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
        end;
      end;
      loaddata(cdsTemp,sql_);

      While not cdsTemp.Eof
      do begin

          if (olddepname <>cdsTemp.Fields[6].AsString)
          then begin
            inc(row);
            inc(row);
            V.Cells[row, 1 ].NumberFormat := StrFormat;
            V.Cells[row, 1 ].Value := cdsTemp.Fields[6].AsString;
          end;
          olddepname :=cdsTemp.Fields[6].AsString;

         if (oldpost <>cdsTemp.Fields[0].AsString)
         then begin
          inc(row);
          inc(row);
          i := 1;
          For col:=0 To 5
          Do Begin

              case cdsTemp.Fields[col].DataType Of
                ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
                ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
                ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
              end;
              V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
              inc(i);
          if col=3
          then total_count:= total_count+ cdsTemp.Fields[col].AsFloat;
          if col= 5
          then begin
            total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
          end;
         end;

         oldpost :=cdsTemp.Fields[0].AsString;

        End;

        inc(row);
        V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('fio').asstring;
        V.Cells[row, 4 ].Value := cdsTemp.fieldbyname('stavka').asstring;
        V.Cells[row, 5 ].Value := cdsTemp.fieldbyname('zarpl').asstring;
        total_sum2:= total_sum2+  cdsTemp.fieldbyname('zarpl').Asfloat;
        total_count2:=  total_count2   +  cdsTemp.fieldbyname('float_stavka').Asfloat;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


    inc(row);
    inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=floattostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count2);
      V.Cells[row+1,4].NumberFormat := NumFormat;
      V.Cells[row+1,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count-total_count2);
      if (total_count-total_count2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;


      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum2);
      V.Cells[row+1,6].NumberFormat := NumFormat;
      V.Cells[row+1,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum-total_sum2);
      if (total_sum-total_sum2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Штатное расписание';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;
//
end;

procedure TBOKForm.actStatPersonalDepExecute(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant; // ,Range
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname: String;
  total_count, total_sum:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

{  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat)'+
        ' and b.state_notes=''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';
}

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);



  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].Value := 'Наименование';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'Тарифный';
  inc(i);
  V.Cells[row, i ].Value := 'Количество';
  inc(i);
  V.Cells[row, i ].Value := 'Размер';
  inc(i);
  V.Cells[row, i ].Value := 'Всего';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'отделов,';

  inc(i);
  V.Cells[row, i ].Value := 'Разряд';

  inc(i);
  V.Cells[row, i ].Value := 'Коэффициент';

  inc(i);
  V.Cells[row, i ].Value := 'рабочих';

  inc(i);
  V.Cells[row, i ].Value := 'должностного';

  inc(i);
  V.Cells[row, i ].Value := 'за';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'должностей';

  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'мест';

  inc(i);
  V.Cells[row, i ].Value := 'оклада';

  inc(i);
  V.Cells[row, i ].Value := 'месяц';

  V.Range['A'+inttostr(row-3)+':'+'F'+inttostr(row)].Select;
  V.Columns.AutoFit;
//  selection.autofit;


  total_count:=0;
  total_sum:=0;

  olddepname:='x';

  While not cdsTempSource.Eof
  do begin
    if (headbranch_='09006')
    then begin
      sql_:='select '+
       ' c.post_name field1 , d.category_name field2,d.category_rate,'+
       ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ss_ok_post_category f'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
       ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
       ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
       ' order by d.category_code';

      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
      end;

    end else begin
      sql_:='select '+
       ' c.post_name field1 , d.category_name field2,d.category_rate,'+
       ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
       ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and c.category_code=d.category_code (+)'+
       ' order by d.category_code';

      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
    end;
    loaddata(cdsTemp,sql_);
    While not cdsTemp.Eof
    do begin

        if (olddepname <>cdsTemp.Fields[6].AsString)
        then begin
          inc(row);
          inc(row);
          V.Cells[row, 1 ].NumberFormat := StrFormat;
          V.Cells[row, 1 ].Value := cdsTemp.Fields[6].AsString;
        end;
        olddepname :=cdsTemp.Fields[6].AsString;

        i := 1;
        inc(row);
        For col:=0 To 5
        Do Begin
            case cdsTemp.Fields[col].DataType Of
              ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
              ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
              ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
            end;
            V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
//            V.Cells[row, i ].select;
//            V.selection.autofit;
            inc(i);
            if col=3
            then begin
              total_count:= total_count+ cdsTemp.Fields[col].Asfloat;
//              MemoStat.lines.add('total_count='+floattostr(total_count)+' + '+floattostr(cdsTemp.Fields[col].Asfloat));
            end;
            if col= 5
            then begin
              total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
            end;
        End;
     V.Range['A'+inttostr(row)+':'+'F'+inttostr(row)].Select;
     V.Columns.AutoFit;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=floattostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Штатное расписание';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';


//  V.Cells.Select;
//  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;
//
end;

procedure TBOKForm.actStatStagExecute(Sender: TObject);
var
 Save_Cursor:TCursor;
 MyRange,V: Variant;
 i, col,row:integer; //,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,olddepname,oldpost: String; // sum2_,
//  total_count:integer;
//  total_sum,total_sum2,total_count2:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2 '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';


      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  // формирование шапки

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'ФИО';
  inc(i);
  V.Cells[row, i ].Value := 'Должность';
  inc(i);
  V.Cells[row, i ].Value := 'Специализация';
  inc(i);
  V.Cells[row, i ].Value := 'Разряд';
  inc(i);
  V.Cells[row, i ].Value := 'Общий';
  inc(i);
  V.Cells[row, i ].Value := 'Не банковский';
  inc(i);
  V.Cells[row, i ].Value := 'Внутри-системный';
  inc(i);
  V.Cells[row, i ].Value := 'Банковский';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';

//  total_count:=0;
//  total_count2:=0;
//  total_sum:=0;
//  total_sum2:=0;

  olddepname:='x';
  oldpost:='x';
  While not cdsTempSource.Eof
  do begin
// сделать селект с параметрами
    if (headbranch_='09006')
    then begin
        sql_:='select '+
         ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
         ' c.post_name field1, sos.special_name,substr( d.category_name,1,decode((instr(d.category_name,''.'')-1),-1, length(d.category_name) ,instr(d.category_name,''.'')-1))  field2,'+
         ' ok_service.GET_WORK_PERIOD(okp.branch,okp.personal_code,info.getday) "Общий стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,1) "Не банковский стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,3) "Внутри-системный стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,5) "Банковский стаж" '+
         ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_special sos, ss_ok_post_category f'+
         ' where okp.branch = :P_BRANCH'+
         ' and a.department_code= :P_DEP'+
         ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
         ' and b.state_notes= :P_A'+
         ' and a.post_code=c.post_code'+
         ' and a.department_code=okp.department_code'+
         ' and a.special_code=sos.special_code'+
         ' and okp.special_code=sos.special_code'+
         ' and a.post_code=okp.post_code'+
         ' and okp.status_code in ( :P_2 , :P_5 )'+
       ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
       ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
         ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params do
        begin
          Clear;
          CreateParam(ftString,'P_BRANCH',ptInput);
          ParamByName('P_BRANCH').Value:=branch;
          CreateParam(ftInteger,'P_DEP',ptInput);
          ParamByName('P_DEP').Value:= cdsTempSource.fieldbyname('DEPARTMENT_CODE').asinteger;
          CreateParam(ftString,'P_A',ptInput);
          ParamByName('P_A').Value:='A';
          CreateParam(ftInteger,'P_2',ptInput);
          ParamByName('P_2').Value:= 2;
          CreateParam(ftInteger,'P_5',ptInput);
          ParamByName('P_5').Value:= 5;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
        end;

    end else begin

        sql_:='select '+
         ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
         ' c.post_name field1, sos.special_name,substr( d.category_name,1,decode((instr(d.category_name,''.'')-1),-1, length(d.category_name) ,instr(d.category_name,''.'')-1))  field2,'+
         ' ok_service.GET_WORK_PERIOD(okp.branch,okp.personal_code,info.getday) "Общий стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,1) "Не банковский стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,3) "Внутри-системный стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,5) "Банковский стаж" '+
         ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_special sos'+
         ' where okp.branch = :P_BRANCH'+
         ' and a.department_code= :P_DEP'+
         ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
         ' and b.state_notes= :P_A'+
         ' and a.post_code=c.post_code'+
         ' and a.department_code=okp.department_code'+
         ' and a.special_code=sos.special_code'+
         ' and okp.special_code=sos.special_code'+
         ' and a.post_code=okp.post_code'+
         ' and okp.status_code in ( :P_2 , :P_5 )'+
         ' and c.category_code=d.category_code (+)'+
         ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params do
        begin
          Clear;
          CreateParam(ftString,'P_BRANCH',ptInput);
          ParamByName('P_BRANCH').Value:=branch;
          CreateParam(ftInteger,'P_DEP',ptInput);
          ParamByName('P_DEP').Value:= cdsTempSource.fieldbyname('DEPARTMENT_CODE').asinteger;
          CreateParam(ftString,'P_A',ptInput);
          ParamByName('P_A').Value:='A';
          CreateParam(ftInteger,'P_2',ptInput);
          ParamByName('P_2').Value:= 2;
          CreateParam(ftInteger,'P_5',ptInput);
          ParamByName('P_5').Value:= 5;
        end;
      end;

      loaddata(cdsTemp,sql_);
      While not cdsTemp.Eof
      do begin

          if (olddepname <>cdsTemp.Fields[0].AsString)
          then begin
            inc(row);
            inc(row);
               MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(5)+inttostr(row)];
               MyRange.select;
               MyRange.Merge;
               MyRange.HorizontalAlignment := 3;
               MyRange.Font.Bold := True;

            V.Cells[row, 1 ].NumberFormat := StrFormat;
            V.Cells[row, 1 ].Value := cdsTemp.Fields[0].AsString;
          end;
          olddepname :=cdsTemp.Fields[0].AsString;

//          inc(row);
          inc(row);
          i := 1;
          For col:=1 To 8
          Do Begin

              case cdsTemp.Fields[col].DataType Of
                ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
                ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
                ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
              end;
              V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
              inc(i);
         end;


//        inc(row);
//        V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('fio').asstring;
//        V.Cells[row, 4 ].Value := cdsTemp.fieldbyname('stavka').asstring;
//        V.Cells[row, 5 ].Value := cdsTemp.fieldbyname('zarpl').asstring;
//        total_sum2:= total_sum2+  cdsTemp.fieldbyname('zarpl').Asfloat;
//        total_count2:=  total_count2   +  cdsTemp.fieldbyname('float_stavka').Asfloat;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;

{
    inc(row);
    inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=inttostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count2);
      V.Cells[row+1,4].NumberFormat := NumFormat;
      V.Cells[row+1,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count-total_count2);
      if (total_count-total_count2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;


      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum2);
      V.Cells[row+1,6].NumberFormat := NumFormat;
      V.Cells[row+1,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum-total_sum2);
      if (total_sum-total_sum2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;
}
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';
{
  inc(row);
      sum2_:=inttostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';
}
  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'СВЕДЕНИЯ О СОТРУДНИКАХ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;
//

end;

procedure TBOKForm.BitBtn160Click(Sender: TObject);
begin
  cdbgToExcel(cdbgOKKurs,
  'Список сотрудников участвовавших в Тренинг-обучение по теме: '+cdsSSOKkv_kurs_SET.fieldbyname('theme_business_voyage_code_show').asstring,
  '',
  'место проведения: '+cdsSSOKkv_kurs_SET.fieldbyname('kv_place').asstring,
  'тренер: '+cdsSSOKkv_kurs_SET.fieldbyname('KV_ORGANIZER').asstring
  );

end;

procedure TBOKForm.cdbgToExcel(cdbgREP: TClientDBGrid; rep1,rep2,rep3,rep4 : string);
var
 Save_Cursor:TCursor;
 V: Variant;
 line,i, col,row,nn:integer;
 NumFormat,DateFormat,StrFormat: String;
// cdbgREP : TClientDBGrid;

begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  cdbgREP.DataSource.Dataset.DisableControls;
  cdbgREP.DataSource.Dataset.First;

  row:=1;
  V.Cells[row, 3 ].Value:=rep1;
  inc(row);
  V.Cells[row, 3 ].Value:=rep2;
  inc(row);
  V.Cells[row, 3 ].Value:=rep3;
  inc(row);
  V.Cells[row, 3 ].Value:=rep4;
  inc(row);
  inc(row);

  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;
  nn:=cdbgREP.Columns.Count-1;
  i:=1;
  V.Cells[row, i ].Value:='П/п';
  inc(i);

  // формирование шапки для текстового файла
  for col:=0 to nn
  do begin
    if cdbgREP.Columns.Items[col].Visible then
    begin
      V.Cells[row, i ].Value := cdbgREP.Columns.Items[col].title.Caption;
//          rpad(cdbgSSOK.Columns.Items[i].title.Caption, cdbgSSOK.Columns.Items[i].Width div 6)  + '|';
      inc(i);
    end;
  end;

  inc(row);
  line :=1;
  While not cdbgREP.DataSource.Dataset.Eof
  do begin
    i := 1;
    V.Cells[row, i ].Value:=line;
    inc(i);
    inc(line);

    For col:=0 To nn
    Do Begin

      if cdbgREP.Columns.Items[col].Visible
      then begin
        case cdbgREP.DataSource.Dataset.Fields[col].DataType Of
          ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
          ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
          ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
        end;
        V.Cells[row, i ].Value := Trim(cdbgREP.DataSource.Dataset.Fields.FieldByName(cdbgREP.Columns.Items[col].FieldName).AsString );
        inc(i);
      end;

    End;

    inc(row);
    cdbgREP.DataSource.Dataset.Next;
    Application.ProcessMessages;
  end;

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее
  cdbgREP.DataSource.Dataset.ENableControls;
 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.BitBtn161Click(Sender: TObject);
begin

  cdbgToExcel(cdbgSSOKkv_kurs,
  '',
  '',
  'Курсы ',
  ''
  );

end;

procedure TBOKForm.BitBtn162Click(Sender: TObject);
begin

    cdskursdva.DisableControls;

    cdskursdva.Close;
      with cdskursdva.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring;
      end;

    loaddata(cdskursdva,'select a.branch,a.personal_code,'+
    ' p.FAMILY||'' ''||p.FIRST_NAME||'' ''||p.PATRONYMIC fio,'+
    ' substr(ok_service.GET_POSTNAME(p.post_code),1,200) post_code_show,'+
    ' substr(ok_service.GET_DEPARTMENTNAME(p.department_code),1,200) department_code_show,'+
    ' substr(ok_service.GET_HIGH_NAME(p.department_code),1,200) HIGH_NAME,'+
    ' b.* from ok_personal p,ok_kurs a,ss_ok_kv_kurs b '+
    ' where a.KV_KURS_CODE=b.KV_KURS_CODE'+
    ' and p.branch=a.branch'+
    ' and p.personal_code=a.personal_code'+
    ' and b.kv_kurs_code=:p_1'); //+cdsSSOKkv_kurs_SET.fieldbyname('kv_kurs_code').asstring);

    cdskursdva.Close;

    LOADDATA(cdsS_Str, 'select * from S_Str');
    addLookUpField(cdskursdva, cdsS_Str,
                  'CODE_STR_show', 'CODE_STR',
                  'CODE_STR', 'name', True);

    LOADDATA(cdsssok_theme_business_voyage_SET,  sql_ss_ok_theme_business_voyage_SET    );
    addLookUpField(cdskursdva, cdsssok_theme_business_voyage_SET,
                  'theme_business_voyage_code_show', 'theme_business_voyage_code',
                  'theme_business_voyage_code', 'theme_business_voyage_name', false);

    LOADDATA(cdsssok_org_business_voyage_SET, sql_ss_ok_org_business_voyage_SET);
    addLookUpField(cdskursdva, cdsssok_org_business_voyage_SET,
                  'org_business_voyage_code_show', 'org_business_voyage_code',
                  'org_business_voyage_code', 'org_business_voyage_name', false);

    LOADDATA(cdsss_ok_city, sql_ss_ok_city);
    addLookUpField(cdskursdva, cdsss_ok_city,
                  'city_code_show', 'city_code',
                  'city_code', 'city_name', false);


    cdskursdva.Open;
    cdskursdva.EnableControls;

  cdbgToExcel(cdbgkursdva,
  '',
  '',
  'Курсы ',
  ''
  );

end;

procedure TBOKForm.cdsOK_Kurs3AfterOpen(DataSet: TDataSet);
begin

  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsOK_Kurs3.MasterSource    := dsOKPersonal;
    cdsOK_Kurs3.IndexFieldNames := 'branch;personal_code';
    cdsOK_Kurs3.MasterFields    := 'branch;personal_code';
  End;


end;

procedure TBOKForm.TabSheet15Show(Sender: TObject);
begin
  if cdsok_freedays.Active then
  Begin
    Exit;
  End;

{  LoadData(cdsok_tabel, SQL_ok_tabel+' where branch = '+''''+curBranch +'''');
  cdsok_tabel.Filter := 'tabel_year='+copy(medBankDate2.text,7,4)+' and tabel_month='+copy(medBankDate2.text,4,2);
  cdsok_tabel.Filtered:=true;
}
  cdsok_tabel.close;
      with cdsok_tabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(medBankDate2.text,7,4);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(medBankDate2.text,4,2);
      end;

  LoadData(cdsok_tabel, SQL_ok_tabel+' where branch=:p_1 and tabel_year=:p_2 and tabel_month=:p_3');
  cdsok_tabel.Filtered:=true;


  BitBtn164Click(nil);

end;

procedure TBOKForm.cdsOK_TabelAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
    cdsok_tabel.MasterSource    := dsOKPersonal;
    cdsok_tabel.IndexFieldNames := 'branch;personal_code';
    cdsok_tabel.MasterFields    := 'branch;personal_code';
  End;

//  Dataset.FieldByName('date_open').EditMask  := '!09/09/0099;1;_';
//  Dataset.FieldByName('date_close').EditMask  := '!09/09/0099;1;_';
//  Dataset.FieldByName('order_date').EditMask  := '!09/09/0099;1;_';

end;

procedure TBOKForm.BitBtn164Click(Sender: TObject);
begin
//  TabelDate:=medBankDate2.text;
  medBankDate.text := medBankDate2.text;
//  BitBtn141Click(nil);

  cdsok_tabel.Filter := 'tabel_year='+copy(medBankDate2.text,7,4)+' and tabel_month='+copy(medBankDate2.text,4,2);
  cdsok_tabel.Filtered:=true;

  bbGB_PERSClick(nil);


end;

procedure TBOKForm.TextOut_(gb_: tgroupbox; X, Y: Integer; const Text: string; i : integer);
begin
  LockWindowUpdate(gb_.Handle);
  try

        with TLabel.Create(gb_) do begin
//          Font.Name := name_;
//          Font.Size := strtoint(size_);
          Caption := text;
          Left := x+16;
          Top := y+16;

          Parent := gb_;
        end;

      if i >0
      then begin
        with TDBEDit.Create(gb_) do begin
//          Font.Name := name_;
//          Font.Size := strtoint(size_);
//          Caption := text;
          Left := x+16+18;
          Top := y+12;
          datasource:=dsOK_Tabel;
          datafield:='day'+lpad( inttostr(i),2,'0' );
          Parent := gb_;
          width:=16;
        end;
      end;
{
    lb := tlabel.Create(gb_);
    lb.top:=x;
    lb.Left:=y;
    lb.Font.Name := name_;
    lb.Font.Size := strtoint(size_);
    lb.caption:=text;
    lb.visible :=true;
    lb.Parent := gb_;
}
  finally
    LockWindowUpdate(0);
  end;

end;

procedure TBOKForm.bbGB_PERSClick(Sender: TObject);
const // Настройки размеров календаря:
  MonthDX = 150;
  MonthDY = 135;
  DayDX = 40; // DayDX = 20;
  DayDY = 25; // DayDY = 15;
  MonthH = 0; // MonthH = 20;
var
  month, i: integer;
  day: integer;
  s: string[2];
begin

    year_ := strtoint( copy(medBankDate2.text,7,4));
    month := strtoint( copy(medBankDate2.text,4,2));

  if GB_PERS.caption<>('   '+LongMonthNames[month]+'   ')
  then begin
    cdsok_freedays.close;
      with cdsok_freedays.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'mm.yyyy';
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(medBankDate2.Text,4,7);
      end;

    LoadData(cdsok_freedays, SQL_ok_freedays+' where branch=:p_1 '+ //''''+curBranch +''''+
    'and to_char(v_date,:p_2) like :p_3'); //'''+copy(medBankDate2.Text,4,7)+''' ');

    with GB_PERS do
      for i := ComponentCount - 1 downto 0 do
        Components[i].Free;

    // Вывод названия месяца:
    //  TextOut_(GB_PERS,(0) mod 3 * MonthDX, (0) div 3 * MonthDY,
    //    LongMonthNames[month],-1);
    GB_PERS.Caption := '   '+LongMonthNames[month]+'   ';

    // Вывод названий дней недели:
    for day := 1 to 7 do
      TextOut_(GB_PERS,(0) mod 3 * MonthDX,
        day mod 7 * DayDY + (0) div 3 * MonthDY + MonthH,
        ShortDayNames[(day + 1) mod 7 + 1],-1);

    // Определение дня недели первого числа месяца:
    day := DayOfWeek(EncodeDate(year_, month, 1)) - 2;
    if day < 0 then inc(day, 7);
    // Вывод чисел:
    for i := 1 to months_[month] do begin
      str(i: 2, s);
      TextOut_(GB_PERS,day div 7 * DayDX + (0) mod 3 * MonthDX + DayDX,
        day mod 7 * DayDY + (0) div 3 * MonthDY + MonthH, s,i);
      inc(day);
    end;

  end;

end;

procedure TBOKForm.RG_avansClick(Sender: TObject);
begin
  if RG_avans.itemindex=0
  then begin
    cdbgtabel.columns[26].Visible:=true;
    cdbgtabel.columns[27].Visible:=true;
    cdbgtabel.columns[28].Visible:=true;
    cdbgtabel.columns[29].Visible:=true;
    cdbgtabel.columns[30].Visible:=true;
    cdbgtabel.columns[31].Visible:=true;
    cdbgtabel.columns[32].Visible:=true;
    cdbgtabel.columns[33].Visible:=true;
    cdbgtabel.columns[34].Visible:=true;
    cdbgtabel.columns[35].Visible:=true;
    cdbgtabel.columns[36].Visible:=true;
    cdbgtabel.columns[37].Visible:=true;
    cdbgtabel.columns[38].Visible:=true;
//    cdbgtabel.columns[39].Visible:=true;
//    cdbgtabel.columns[40].Visible:=true;
//    cdbgtabel.columns[41].Visible:=true;

    cdbgtabel.columns[42].Visible:=true;
    cdbgtabel.columns[43].Visible:=true;
    cdbgtabel.columns[44].Visible:=true;
    cdbgtabel.columns[45].Visible:=true;
    cdbgtabel.columns[46].Visible:=true;
    cdbgtabel.columns[47].Visible:=true;
    cdbgtabel.columns[48].Visible:=true;
    cdbgtabel.columns[49].Visible:=true;
    cdbgtabel.columns[50].Visible:=true;

    cdbgtabel.columns[51].Visible:=false;
    cdbgtabel.columns[52].Visible:=false;
    cdbgtabel.columns[53].Visible:=false;
    cdbgtabel.columns[54].Visible:=false;
    cdbgtabel.columns[55].Visible:=false;
    cdbgtabel.columns[56].Visible:=false;
    cdbgtabel.columns[57].Visible:=false;
    cdbgtabel.columns[58].Visible:=false;
    cdbgtabel.columns[59].Visible:=false;

    BitBtn141Click(nil);
  end;
  if RG_avans.itemindex=1
  then begin
    cdbgtabel.columns[26].Visible:=false;
    cdbgtabel.columns[27].Visible:=false;
    cdbgtabel.columns[28].Visible:=false;
    cdbgtabel.columns[29].Visible:=false;
    cdbgtabel.columns[30].Visible:=false;
    cdbgtabel.columns[31].Visible:=false;
    cdbgtabel.columns[32].Visible:=false;
    cdbgtabel.columns[33].Visible:=false;
    cdbgtabel.columns[34].Visible:=false;
    cdbgtabel.columns[35].Visible:=false;
    cdbgtabel.columns[36].Visible:=false;
    cdbgtabel.columns[37].Visible:=false;
    cdbgtabel.columns[38].Visible:=false;
    cdbgtabel.columns[39].Visible:=false;
    cdbgtabel.columns[40].Visible:=false;
    cdbgtabel.columns[41].Visible:=false;

    cdbgtabel.columns[42].Visible:=false;
    cdbgtabel.columns[43].Visible:=false;
    cdbgtabel.columns[44].Visible:=false;
    cdbgtabel.columns[45].Visible:=false;
    cdbgtabel.columns[46].Visible:=false;
    cdbgtabel.columns[47].Visible:=false;
    cdbgtabel.columns[48].Visible:=false;
    cdbgtabel.columns[49].Visible:=false;
    cdbgtabel.columns[50].Visible:=false;

    cdbgtabel.columns[51].Visible:=true;
    cdbgtabel.columns[52].Visible:=true;
    cdbgtabel.columns[53].Visible:=true;
    cdbgtabel.columns[54].Visible:=true;
    cdbgtabel.columns[55].Visible:=true;
    cdbgtabel.columns[56].Visible:=true;
    cdbgtabel.columns[57].Visible:=true;
    cdbgtabel.columns[58].Visible:=true;
    cdbgtabel.columns[59].Visible:=true;

  end;


end;

procedure TBOKForm.GB_PERSClick(Sender: TObject);
begin
  bbGB_PERSClick(nil);
end;

procedure TBOKForm.BitBtn165Click(Sender: TObject);
var STATE_CODE_,curr_m, next_m, curr_y, next_y, sql_ , day_lines, ch_lines: string;
  DaysInAMonth_EMPTY, DaysInAMonth_ : word;
  TabelDate : string;
  TabelExisits : integer;
  sqlparams,sqlparams2 : tparams;
 P_CURR_M_,P_CURR_Y_ : integer; //, P_PERSONAL_CODE_,
 P_NN_, P_DEPARTMENT_CODE_, P_DEPARTMENT_CODE2_:integer;
 P_FIO_,P_ESTABLISHED_POST_,P_ESTABLISHED_DEPARTMENT_ : String;
 P_TABNO_, P_POST_CODE_,P_POST_CODE2_,P_POST_CODE3_ : integer;
  P_TABEL_NAME_ : string;
  days_ : array [1..31] of string;
  days_hours_ : array [1..31] of string; // рабочие часы 2,4,8
  otpusk_char: string;
  I,  Bd, Ed ,Bd2, Ed2: Word;
  DatTmp : TdateTime;
  D, SqlT, T, Tmp, Clock : String;
begin

  sqlparams := tparams.create;
  sqlparams2 := tparams.create;
//showmessage(inttostr(Dayofweek(now)));
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;
    curr_m:= copy(TabelDate,4,2)  ;
    curr_y:= copy(TabelDate,7,4)  ;

  medBankDate.text := '01.'+curr_m+'.'+curr_y;
  TabelDate:=medBankDate.text;
  GB_tabel_date.caption := ' Табель '+TabelDate;

  with sqlparams
  do begin
    clear;
    CreateParam(ftString,'P_B',ptInput);
    ParamByName('P_B').Value := branch;
    CreateParam(ftInteger,'P_M',ptInput);
    ParamByName('P_M').Value := strtoint(curr_m);
    CreateParam(ftInteger,'P_Y',ptInput);
    ParamByName('P_Y').Value := strtoint(curr_y);

  end;
  TabelExisits:= GETsqlRESULT('select count(*) From ok_Tabel where branch=:P_B and tabel_month=:P_M and tabel_year=:P_Y',sqlparams);

  if TabelExisits>0
  then begin
    showmessage('Табель за указанный месяц уже существует.');
  end else begin

    if Application.MessageBox(pchar('Сформировать новый табель ('+TabelDate+') ?'), 'Формирование',MB_OKCANCEL) = IDOK
    then Begin
        if curr_m='12'
        then begin
          next_m:='01';
          next_y:= inttostr(strtoint(curr_y)+1);
        end else begin
          next_m:= inttostr(strtoint(curr_m)+1);
          next_y:=  curr_y;
        end;

        DaysInAMonth_:=DaysInAMonth(strtoint(curr_y),strtoint(curr_m));

        if RG_avans.itemindex=0 then
        case DaysInAMonth_ of
          28: begin
                cdbgtabel.columns[39].Visible:=false;
                cdbgtabel.columns[40].Visible:=false;
                cdbgtabel.columns[41].Visible:=false;
              end;
          29: begin
                cdbgtabel.columns[39].Visible:=TRUE;
                cdbgtabel.columns[40].Visible:=false;
                cdbgtabel.columns[41].Visible:=false;
              end;
          30: begin
                cdbgtabel.columns[39].Visible:=TRUE;
                cdbgtabel.columns[40].Visible:=TRUE;
                cdbgtabel.columns[41].Visible:=false;
              end;
          31: begin
                cdbgtabel.columns[39].Visible:=TRUE;
                cdbgtabel.columns[40].Visible:=TRUE;
                cdbgtabel.columns[41].Visible:=TRUE;
              end;
        end;

        case DaysInAMonth_ of
          28: begin
                day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                    'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                    'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                    'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28';
                ch_lines:=':P_D1,:P_D2,:P_D3,:P_D4,:P_D5,:P_D6,:P_D7,'+
                    ':P_D8,:P_D9,:P_D10,:P_D11,:P_D12,:P_D13,:P_D14,'+
                    ':P_D15,:P_D16,:P_D17,:P_D18,:P_D19,:P_D20,:P_D21,'+
                    ':P_D22,:P_D23,:P_D24,:P_D25,:P_D26,:P_D27,:P_D28';

              end;
          29: begin
                day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                    'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                    'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                    'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                    'DAY29 ';
                ch_lines:=':P_D1,:P_D2,:P_D3,:P_D4,:P_D5,:P_D6,:P_D7,'+
                    ':P_D8,:P_D9,:P_D10,:P_D11,:P_D12,:P_D13,:P_D14,'+
                    ':P_D15,:P_D16,:P_D17,:P_D18,:P_D19,:P_D20,:P_D21,'+
                    ':P_D22,:P_D23,:P_D24,:P_D25,:P_D26,:P_D27,:P_D28,'+
                    ':P_D29';
//                day_lines:= day_lines+','+
//                'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
//                    'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
//                    'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
//                    'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
//                    'OLDDAY29 ';
//                ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8 ' ;
//                ch_lines:= ch_lines+','+ch_lines ;
              end;
          30: begin
                day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                    'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                    'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                    'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                    'DAY29,DAY30 ';
                ch_lines:=':P_D1,:P_D2,:P_D3,:P_D4,:P_D5,:P_D6,:P_D7,'+
                    ':P_D8,:P_D9,:P_D10,:P_D11,:P_D12,:P_D13,:P_D14,'+
                    ':P_D15,:P_D16,:P_D17,:P_D18,:P_D19,:P_D20,:P_D21,'+
                    ':P_D22,:P_D23,:P_D24,:P_D25,:P_D26,:P_D27,:P_D28,'+
                    ':P_D29,:P_D30';
//                day_lines:= day_lines+','+
//                'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
//                    'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
//                    'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
//                    'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
//                    'OLDDAY29,OLDDAY30 ';
//                ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8 ' ;
//                ch_lines:= ch_lines+','+ch_lines ;
              end;
          31: begin
                day_lines:='DAY01,DAY02,DAY03,DAY04,DAY05,DAY06,DAY07,'+
                    'DAY08,DAY09,DAY10,DAY11,DAY12,DAY13,DAY14,'+
                    'DAY15,DAY16,DAY17,DAY18,DAY19,DAY20,DAY21,'+
                    'DAY22,DAY23,DAY24,DAY25,DAY26,DAY27,DAY28,'+
                    'DAY29,DAY30,DAY31';
                ch_lines:=':P_D1,:P_D2,:P_D3,:P_D4,:P_D5,:P_D6,:P_D7,'+
                    ':P_D8,:P_D9,:P_D10,:P_D11,:P_D12,:P_D13,:P_D14,'+
                    ':P_D15,:P_D16,:P_D17,:P_D18,:P_D19,:P_D20,:P_D21,'+
                    ':P_D22,:P_D23,:P_D24,:P_D25,:P_D26,:P_D27,:P_D28,'+
                    ':P_D29,:P_D30,:P_D31';
//                day_lines:= day_lines+','+
//                'OLDDAY01,OLDDAY02,OLDDAY03,OLDDAY04,OLDDAY05,OLDDAY06,OLDDAY07,'+
//                    'OLDDAY08,OLDDAY09,OLDDAY10,OLDDAY11,OLDDAY12,OLDDAY13,OLDDAY14,'+
//                    'OLDDAY15,OLDDAY16,OLDDAY17,OLDDAY18,OLDDAY19,OLDDAY20,OLDDAY21,'+
//                    'OLDDAY22,OLDDAY23,OLDDAY24,OLDDAY25,OLDDAY26,OLDDAY27,OLDDAY28,'+
//                    'OLDDAY29,OLDDAY30,OLDDAY31 ';
//                ch_lines:= '8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8,8,8,8,8,8,8,8,8,8,  8' ;
//                ch_lines:= ch_lines+','+ch_lines ;
              end;
        end;

        P_TABEL_NAME_:='За '+curr_m+' месяц '+curr_y+' года';
        P_CURR_M_ := strtoint(curr_m);
        P_CURR_Y_ := strtoint(curr_y);
    // цикл по сотрудникам
        cdsTemp.Close; // добавил cdstemp.close 08.11.2011
        with cdsTemp.params
        do begin
          clear;
          CreateParam(ftString,'P_BRANCH' ,ptInput);
          ParamByName('P_BRANCH').Value := Branch;

          CreateParam(ftInteger,'P2' ,ptInput);
          ParamByName('P2').Value := 2;
          CreateParam(ftInteger,'P4' ,ptInput);
          ParamByName('P4').Value := 4;
          CreateParam(ftInteger,'P5' ,ptInput);
          ParamByName('P5').Value := 5;
        end;

        sql_:='select * from ok_personal where branch=:P_BRANCH '+
//          ' and tabno in ('+edblyat.Text+')'+
          ' and status_code in (:P2,:P4,:P5)';
        loaddata(cdsTemp, sql_);

        while not cdsTemp.Eof
        do begin
//          P_PERSONAL_CODE_:= cdsTemp.fieldbyname('personal_code').asinteger;
          cdsTemp2.close;
          cdsTemp2.params.Clear;
          //cdsTemp2.params.Free;

          with sqlparams
          do begin
            clear;
            CreateParam(ftString,'P_BRANCH' ,ptInput);
            ParamByName('P_BRANCH').Value := Branch;

            CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
            ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;

            CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
            ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
            CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
            ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );
            CreateParam(ftDateTime,'P_FIRST_DAY_OF_NEXT_MONTH' ,ptInput);
            ParamByName('P_FIRST_DAY_OF_NEXT_MONTH').Value := strtodate ( '01.'+next_m +'.'+next_y );

            CreateParam(ftInteger,'P_GENDER_CODE' ,ptInput);
            ParamByName('P_GENDER_CODE').Value := cdsTemp.fieldbyname('GENDER_CODE').asinteger;

          end;

          STATE_CODE_ := getsqlresult('select ok_service.GET_STATUS(:P_BRANCH,:P_PERSONAL_CODE,'+
            ':P_FIRST_DAY_OF_MONTH,:P_LAST_DAY_OF_MONTH,:P_FIRST_DAY_OF_NEXT_MONTH,:P_GENDER_CODE) from dual',
            sqlparams);

          if STATE_CODE_<>'Z'
          then begin
            P_FIO_ :=  cdsTemp.fieldbyname('FAMILY').asString+' '+
              copy(cdsTemp.fieldbyname('FIRST_NAME').asString,1,1)+'. '+
              copy(cdsTemp.fieldbyname('PATRONYMIC').asString,1,1)+'.';
            P_TABNO_:= cdsTemp.fieldbyname('tabno').asinteger;

            cdsTemp2.close;
            with cdsTemp2.params
            do begin
              clear;
              CreateParam(ftString,'P_BRANCH' ,ptInput);
              ParamByName('P_BRANCH').Value := Branch;

              CreateParam(ftString,'P_BRANCH0' ,ptInput);
              ParamByName('P_BRANCH0').Value := Branch;

              CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
              ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;
              CreateParam(ftInteger,'P_3' ,ptInput);
              ParamByName('P_3').Value := 3;

              CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
              ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

              CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
              ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
            end;

            if branch='00395'
            then begin
              loaddata(cdsTemp2,'select ID,BRANCH,PERSONAL_CODE,IN_OFFICE_DATE,OUT_OFFICE_DATE-1 out_office_date,'+
              ' OFFICE_NAME,OFFICE_ADDRESS,ESTABLISHED_POST,TYPE_PERIOD_CODE,ARTICLE_CODE,'+
              ' BASIS_NUM,BASIS_DATE,EMP_CODE,INS_DATE,BASE_MOVE_CODE,DEPARTMENT,PRIZ_SYSTEM,'+
              ' COD_BANK,COD_TYPE_PRN,COD_PR_OFF,PR_OFF,DATE_UTV_KM,NUMB_UTV_KM,DATE_PR_KVL,NUMB_PR_KVL,'+
              ' DATE_ATTEST,RESH_ATTEST,DOLJN_ID,NUM_PR_OFF,DATE_PR_OFF,POST_CODE,DEPARTMENT_CODE '+
              ' from ok_period where branch=:P_BRANCH and COD_BANK=:P_BRANCH0 and personal_code=:P_PERSONAL_CODE '+
              ' and TYPE_PERIOD_CODE=:P_3'+
              ' and in_office_date<=:P_LAST_DAY_OF_MONTH '+
              ' and ((out_office_date-1)>=:P_FIRST_DAY_OF_MONTH or out_office_date is null)' );
            end else begin
              loaddata(cdsTemp2,'select ID,BRANCH,PERSONAL_CODE,IN_OFFICE_DATE,out_office_date,'+
              ' OFFICE_NAME,OFFICE_ADDRESS,ESTABLISHED_POST,TYPE_PERIOD_CODE,ARTICLE_CODE,'+
              ' BASIS_NUM,BASIS_DATE,EMP_CODE,INS_DATE,BASE_MOVE_CODE,DEPARTMENT,PRIZ_SYSTEM,'+
              ' COD_BANK,COD_TYPE_PRN,COD_PR_OFF,PR_OFF,DATE_UTV_KM,NUMB_UTV_KM,DATE_PR_KVL,NUMB_PR_KVL,'+
              ' DATE_ATTEST,RESH_ATTEST,DOLJN_ID,NUM_PR_OFF,DATE_PR_OFF,POST_CODE,DEPARTMENT_CODE '+
              ' from ok_period where branch=:P_BRANCH and COD_BANK=:P_BRANCH0 and personal_code=:P_PERSONAL_CODE '+
              ' and TYPE_PERIOD_CODE=:P_3'+
              ' and in_office_date<=:P_LAST_DAY_OF_MONTH '+
              ' and ((out_office_date)>=:P_FIRST_DAY_OF_MONTH or out_office_date is null)' );
            end;

            while not cdsTemp2.Eof
            do begin
              // по умолчанию
              P_NN_:= cdsTemp.fieldbyname('nn').asinteger;
              P_DEPARTMENT_CODE_:= cdsTemp2.fieldbyname('department_code').asinteger;
              P_DEPARTMENT_CODE2_:= cdsTemp2.fieldbyname('department_code').asinteger;
              //
              if STATE_CODE_='D' then begin // группа декретницы
                if cdsTemp.fieldbyname('nn').asinteger>=         1000000
                then P_NN_:=                                     1000000
                else P_NN_:= cdsTemp.fieldbyname('nn').asinteger+1000000;
                P_DEPARTMENT_CODE_:=                             1000000;
                P_DEPARTMENT_CODE2_:=                            1000000;
              end;
              if STATE_CODE_='U' then begin // группа уволенные
                if cdsTemp.fieldbyname('nn').asinteger>=         100000000
                then P_NN_:=                                     100000000
                else P_NN_:= cdsTemp.fieldbyname('nn').asinteger+100000000;
                P_DEPARTMENT_CODE_:=                             100000000;
                P_DEPARTMENT_CODE2_:=                            100000000;
              end;
              if STATE_CODE_='R' then begin // группа работающие
                P_NN_:= cdsTemp.fieldbyname('nn').asinteger;
                P_DEPARTMENT_CODE_:= cdsTemp2.fieldbyname('department_code').asinteger;
                P_DEPARTMENT_CODE2_:= cdsTemp2.fieldbyname('department_code').asinteger;
              end;

              for i:=1 to 31 do begin
                days_[i]:='.';
                days_hours_[i]:='.';
  //              memo3.lines.add(inttostr(i)+')'+days_[i]);
              end;

                otpusk_char:='8';

                DatTmp := StrToDate('01.'+copy(TabelDate,4,7));
                D := copy(TabelDate,4,7) ;
                Bd := 0;
                Ed := DaysInAMonth_-1;
                If Copy(cdsTemp2.FieldByName('in_office_date').AsString,4,7) = D Then
                  Bd := StrToInt(Copy(cdsTemp2.FieldByName('in_office_date').AsString,1,2)) - 1;
                If Copy(cdsTemp2.FieldByName('out_office_date').AsString,4,7) = D Then
                  Ed := StrToInt(Copy(cdsTemp2.FieldByName('out_office_date').AsString,1,2)) - 1;

                For I := Bd to Ed do
                Begin
                    If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                    Then begin
                        days_[i+1] := '*';
                        days_hours_[i+1] := '*';
                    end Else begin
                        days_[i+1] := otpusk_char;
                        days_hours_[i+1] := otpusk_char;
//memo3.lines.add(inttostr(i+1)+')'+days_[i+1]+' ('+otpusk_char+')');
                    end;
                End;

                P_POST_CODE_:= cdsTemp2.fieldbyname('post_code').asinteger;
                P_POST_CODE2_:= cdsTemp2.fieldbyname('post_code').asinteger;
                P_POST_CODE3_:= cdsTemp2.fieldbyname('post_code').asinteger;
                P_ESTABLISHED_POST_:= cdsTemp2.fieldbyname('ESTABLISHED_POST').asString;
//                P_ESTABLISHED_DEPARTMENT_:= cdsTemp2.fieldbyname('ESTABLISHED_DEPARTMENT').asString;
                P_ESTABLISHED_DEPARTMENT_:= cdsTemp2.fieldbyname('DEPARTMENT').asString;
                if P_NN_ >=1000000 then begin
                    P_ESTABLISHED_DEPARTMENT_ := 'ДЕКРЕТНИЦЫ';
                end;
                if P_NN_ >=10000000 then begin
                    P_ESTABLISHED_DEPARTMENT_ := 'УВОЛЕННЫЕ';
                end;
                // рабочие часы 2,4 ok_zp_rate    ZP_RATE_DATE ZP_RATE_DATE_END

                ////////
                cdsTabelLeave.close;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;
//memo3.lines.add('P_PERSONAL_CODE_='+inttostr(P_PERSONAL_CODE_));
                  CreateParam(ftInteger,'P_8' ,ptInput);
                  ParamByName('P_8').Value := 8;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_zp_rate where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and ZP_RATE_CODE <>:P_8'+
                   ' and ZP_RATE_DATE<=:P_LAST_DAY_OF_MONTH '+
                   ' and (ZP_RATE_DATE_END>=:P_FIRST_DAY_OF_MONTH or ZP_RATE_DATE_END is null)' );

                while not cdsTabelLeave.Eof
                do begin
                    otpusk_char:=cdsTabelLeave.fieldbyname('zp_rate_code').asstring;

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE_END').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('ZP_RATE_DATE_END').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;
//memo3.lines.add('(ed-bd)'+inttostr(ed)+'-'+inttostr(Bd)+' (ed2-bd2)'+inttostr(Ed2)+'-'+inttostr(bd2)+')');

                    For I := Bd2 to Ed2 do
                    Begin
                        If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                        Then begin
                          //  days_[i+1] := '*';
                          //  days_hours_[i+1] := '*';
                        end Else begin
                            days_[i+1] := otpusk_char;
                            days_hours_[i+1] := otpusk_char;
//memo3.lines.add(inttostr(i)+')'+days_[i]+' ('+otpusk_char+')');
                        end;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////

                // отпуск ok_leave leave_code <>4 and <>7
                  // DATE_IN_LEAVE   DATE_OUT_LEAVE
                ////////
                cdsTabelLeave.close;
                cdsTabelLeave.params.Clear;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;
                  CreateParam(ftInteger,'P_4' ,ptInput);
                  ParamByName('P_4').Value := 4;
                  CreateParam(ftInteger,'P_7' ,ptInput);
                  ParamByName('P_7').Value := 7;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_leave where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and leave_code <>:P_4'+
                   ' and leave_code <>:P_7'+
                   ' and DATE_IN_LEAVE<=:P_LAST_DAY_OF_MONTH '+
                   ' and (DATE_OUT_LEAVE>=:P_FIRST_DAY_OF_MONTH or DATE_OUT_LEAVE is null)' );

//memo3.lines.add('отпуск');
                while not cdsTabelLeave.Eof
                do begin
                    otpusk_char:='?';
                      case cdsTabelLeave.fieldbyname('leave_code').asinteger of
                       1:otpusk_char:='О';
                       2:otpusk_char:='У';
                       3:otpusk_char:='#';
                       4:otpusk_char:='#';
                       5:otpusk_char:='Д';
                       6:otpusk_char:='#';
                       8:otpusk_char:='#';
                      end;
//memo3.lines.add('otpusk_char='+otpusk_char);

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('DATE_IN_LEAVE').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('DATE_IN_LEAVE').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('DATE_OUT_LEAVE').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('DATE_OUT_LEAVE').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;
//memo3.lines.add('(ed-bd)'+inttostr(ed)+'-'+inttostr(Bd)+' (ed2-bd2)'+inttostr(Ed2)+'-'+inttostr(bd2)+')');

//memo3.lines.add('otpusk_char='+otpusk_char);
                    For I := Bd2 to Ed2 do
                    Begin
                        If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                        Then begin
                          //  days_[i+1] := '*';
                          //  days_hours_[i+1] := '*';
                        end Else begin
                            days_[i+1] := otpusk_char;
//memo3.lines.add(inttostr(i+1)+')'+days_[i+1]+' ('+otpusk_char+')');
                          //  days_hours_[i+1] := otpusk_char;
                        end;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////

                // отзыв - возвращает часы из массива часов  days_hours_
                  // ok_leave date_recall_begin date_recall_end
                ////////
                cdsTabelLeave.close;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;
                  CreateParam(ftInteger,'P_4' ,ptInput);
                  ParamByName('P_4').Value := 4;
                  CreateParam(ftInteger,'P_7' ,ptInput);
                  ParamByName('P_7').Value := 7;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_leave where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and leave_code <>:P_4'+
                   ' and leave_code <>:P_7'+
                   ' and date_recall_begin<=:P_LAST_DAY_OF_MONTH '+
                   ' and (date_recall_end>=:P_FIRST_DAY_OF_MONTH or date_recall_end is null)' );

                while not cdsTabelLeave.Eof
                do begin
                    otpusk_char:='?';

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('date_recall_begin').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_recall_begin').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('date_recall_end').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_recall_end').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;
//memo3.lines.add('(ed-bd)'+inttostr(ed)+'-'+inttostr(Bd)+' (ed2-bd2)'+inttostr(Ed2)+'-'+inttostr(bd2)+')');

                    For I := Bd2 to Ed2 do
                    Begin
                        If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                        Then begin
                          //  days_[i+1] := '*';
                          //  days_hours_[i+1] := '*';
                        end Else begin
                            days_[i+1] := days_hours_[i+1]; // otpusk_char;
//memo3.lines.add(inttostr(i+1)+')'+days_[i+1]+' ('+days_hours_[i+1]+')');
                          //  days_hours_[i+1] := otpusk_char;
                        end;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////


                // больничные ok_hospital  date_open  date_close
                ////////
                cdsTabelLeave.close;
                cdsTabelLeave.params.Clear;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_hospital where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and date_open<=:P_LAST_DAY_OF_MONTH '+
                   ' and (date_close>=:P_FIRST_DAY_OF_MONTH or date_close is null)' );

                while not cdsTabelLeave.Eof
                do begin
                   if cdsTabelLeave.FieldByName('hospital_code').AsString='1002'
                     then begin otpusk_char:='Д';
                     end else begin otpusk_char:='Б';
                   end;

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('date_open').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_open').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('date_close').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_close').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;
//memo3.lines.add('(ed-bd)'+inttostr(ed)+'-'+inttostr(Bd)+' (ed2-bd2)'+inttostr(Ed2)+'-'+inttostr(bd2)+')');

                    For I := Bd2 to Ed2 do
                    Begin
                        If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                        Then begin
                          //  days_[i+1] := '*';
                          //  days_hours_[i+1] := '*';
                        end Else begin
                            days_[i+1] := otpusk_char;
//memo3.lines.add(inttostr(i+1)+')'+days_[i+1]+' ('+otpusk_char+')');
                          //  days_hours_[i+1] := otpusk_char;
                        end;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////


                // командировки  ok_business_voyage   date_open date_close
                ////////
                cdsTabelLeave.close;
                cdsTabelLeave.params.Clear;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_business_voyage where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and date_open<=:P_LAST_DAY_OF_MONTH '+
                   ' and (date_close>=:P_FIRST_DAY_OF_MONTH or date_close is null)' );

                while not cdsTabelLeave.Eof
                do begin
                   otpusk_char:='К';

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('date_open').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_open').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('date_close').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('date_close').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;
//memo3.lines.add('(ed-bd)'+inttostr(ed)+'-'+inttostr(Bd)+' (ed2-bd2)'+inttostr(Ed2)+'-'+inttostr(bd2)+')');

                    For I := Bd2 to Ed2 do
                    Begin
                        If  (DayOfWeek(DatTmp + I) = 7) or (DayOfWeek(DatTmp + I) = 1)
                        Then begin
                          //  days_[i+1] := '*';
                          //  days_hours_[i+1] := '*';
                        end Else begin
                            days_[i+1] := otpusk_char;
//memo3.lines.add(inttostr(i+1)+')'+days_[i+1]+' ('+otpusk_char+')');
                          //  days_hours_[i+1] := otpusk_char;
                        end;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////

                // выходные  ok_freedays   v_date
                ////////
                cdsTabelLeave.close;
                cdsTabelLeave.params.Clear;
                with cdsTabelLeave.params
                do begin
                  clear;
                  CreateParam(ftString,'P_BRANCH' ,ptInput);
                  ParamByName('P_BRANCH').Value := Branch;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;

                  CreateParam(ftDateTime,'P_LAST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_LAST_DAY_OF_MONTH').Value := strtodate( inttostr(DaysInAMonth_)+'.'+curr_m +'.'+curr_y );

                  CreateParam(ftDateTime,'P_FIRST_DAY_OF_MONTH' ,ptInput);
                  ParamByName('P_FIRST_DAY_OF_MONTH').Value := strtodate ( '01.'+curr_m +'.'+curr_y );
                end;
                loaddata(cdsTabelLeave,'select * from ok_freedays where branch=:P_BRANCH and personal_code=:P_PERSONAL_CODE '+
                   ' and V_date<=:P_LAST_DAY_OF_MONTH '+
                   ' and V_date>=:P_FIRST_DAY_OF_MONTH' );

                while not cdsTabelLeave.Eof
                do begin
                   otpusk_char:= cdsTabelLeave.fieldbyname('simbol').asstring;

                    Bd2 := 0;
                    Ed2 := DaysInAMonth_-1;
                    If Copy(cdsTabelLeave.FieldByName('V_date').AsString,4,7) = D Then
                      Bd2 := StrToInt(Copy(cdsTabelLeave.FieldByName('V_date').AsString,1,2)) - 1;
                    If Copy(cdsTabelLeave.FieldByName('V_date').AsString,4,7) = D Then
                      Ed2 := StrToInt(Copy(cdsTabelLeave.FieldByName('V_date').AsString,1,2)) - 1;

                    if Bd2<Bd then Bd2:= Bd;
                    if Ed2>Ed then Ed2:= Ed;

                    For I := Bd2 to Ed2 do
                    Begin
                      if Bd2=Ed2
                      then days_[i+1] := otpusk_char;
                    End;
                  cdsTabelLeave.next;
                end;
                ////////

   //////////////////////
                sql_:='Insert Into ok_Tabel(category_code,branch,tabel_month,tabel_year,'+
                        ' tabel_name,'+
                        'PERSONAL_CODE,nn,department_nn,department_code, fio,tabno,salary,'+
                        'post_code, post_name , DEPARTMENT_NAME ,'+day_lines+') '+
                        ' Select ok_service.get_category_code(:P_POST_CODE),info.getbranch, :P_CURR_M,:P_CURR_Y,' +
                        ' :P_TABEL_NAME,'+
                        ' :P_PERSONAL_CODE, :P_NN, :P_DEPARTMENT_CODE,:P_DEPARTMENT_CODE2,'+
                        'upper( :P_FIO),'+
                        ' :P_TABNO, ok_service.GET_POST_Salary(:P_POST_CODE2) ,:P_POST_CODE3, :P_ESTABLISHED_POST, :P_ESTABLISHED_DEPARTMENT '+
                         ','+ch_lines+ ' from dual';
                with sqlparams2 do begin
                  clear;

                  CreateParam(ftInteger,'P_POST_CODE' ,ptInput);
                  ParamByName('P_POST_CODE').Value := P_POST_CODE_;

                  CreateParam(ftInteger,'P_CURR_M' ,ptInput);
                  ParamByName('P_CURR_M').Value := P_CURR_M_;

                  CreateParam(ftInteger,'P_CURR_Y' ,ptInput);
                  ParamByName('P_CURR_Y').Value := P_CURR_Y_;

                  CreateParam(ftString,'P_TABEL_NAME' ,ptInput);
                  ParamByName('P_TABEL_NAME').Value := P_TABEL_NAME_;

                  CreateParam(ftInteger,'P_PERSONAL_CODE' ,ptInput);
                  ParamByName('P_PERSONAL_CODE').Value := cdsTemp.fieldbyname('personal_code').asinteger;

                  CreateParam(ftInteger,'P_NN' ,ptInput);
                  ParamByName('P_NN').Value := P_NN_;

                  CreateParam(ftInteger,'P_DEPARTMENT_CODE' ,ptInput);
                  ParamByName('P_DEPARTMENT_CODE').Value := P_DEPARTMENT_CODE_;

                  CreateParam(ftInteger,'P_DEPARTMENT_CODE2' ,ptInput);
                  ParamByName('P_DEPARTMENT_CODE2').Value := P_DEPARTMENT_CODE2_;

                  CreateParam(ftString,'P_FIO' ,ptInput);
                  ParamByName('P_FIO').Value := P_FIO_;

                  CreateParam(ftInteger,'P_TABNO' ,ptInput);
                  ParamByName('P_TABNO').Value := P_TABNO_;

                  CreateParam(ftInteger,'P_POST_CODE2' ,ptInput);
                  ParamByName('P_POST_CODE2').Value := P_POST_CODE2_;

                  CreateParam(ftInteger,'P_POST_CODE3' ,ptInput);
                  ParamByName('P_POST_CODE3').Value := P_POST_CODE3_;

                  CreateParam(ftString,'P_ESTABLISHED_POST' ,ptInput);
                  ParamByName('P_ESTABLISHED_POST').Value := P_ESTABLISHED_POST_;

                  CreateParam(ftString,'P_ESTABLISHED_DEPARTMENT' ,ptInput);
                  ParamByName('P_ESTABLISHED_DEPARTMENT').Value := P_ESTABLISHED_DEPARTMENT_;

                  DaysInAMonth_EMPTY :=0;
                  for i:=1 to DaysInAMonth_ do
                  begin
                    CreateParam(ftString,'P_D'+inttostr(i) ,ptInput);
                    ParamByName('P_D'+inttostr(i)).Value := days_[i];
                    if (days_[i]='.') or (days_[i]='*') then DaysInAMonth_EMPTY:=DaysInAMonth_EMPTY+1;
//memo3.lines.add(inttostr(i)+')'+days_[i]+' (параметры)');
                  end;

                end;
//            for i:=1 to 31 do begin
//              memo3.lines.add(inttostr(i)+')'+days_[i]);
//            end;
                if DaysInAMonth_EMPTY=DaysInAMonth_
                then begin
                  // не вставлять строки состоящие только из '.' и '*'
                end else begin
                  execSql(sql_,SqlParams2);
                end;

              cdsTemp2.next;
            end;
          end;

          cdsTemp.next;
        end;
    // конец формирования табеля
    end;
  end;


      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := FiltrLevel;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;

  loaddata(cdsTemp,'select rownum,level, d.department_id id, d.DEPARTMENT_CODE ,'+
     'd.department_code, d.department_name,  d.department_type_code,'+
        ' d.high_dep_code, d.level_department_code, d.department_num'+
        ' from ss_ok_department d'+
          ' where d.level_department_code=:p_1'+ //FiltrLevel+
          ' and d.state_notes=:p_2'+ //''A'' '+
        ' connect by d.high_dep_code = prior d.department_code'+
        ' start with d.high_dep_code is null');
  cdsTemp.first;

  while not cdsTemp.eof do begin
    execsqlpar('update ok_tabel set dep_nn=:p_1' +
      ' where branch=:p_2 and tabel_month=:p_3 and tabel_year=:p_4 and department_code=:p_5'
       ,cdsTemp.fieldbyname('rownum').asstring
       ,curBranch,copy(tabelDate,4,2),copy(tabelDate,7,4),cdsTemp.fieldbyname('department_code').asstring );
    cdsTemp.Next;
  end;

  execSql('commit');


      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;

      loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );


                cdsTabelLeave.close;
                cdsTabelLeave.params.Clear;

end;

procedure TBOKForm.BitBtn167Click(Sender: TObject);
var   TabelDate,   curr_m,  curr_y : string;
    sqlparams : tparams;
begin
  sqlparams:= tparams.create;

      TabelDate:=medBankDate.text;
        curr_m:= copy(TabelDate,4,2)  ;
        curr_y:= copy(TabelDate,7,4)  ;
    if Application.MessageBox(pchar('Удалить табель ('+TabelDate+') ?'), 'Удаление табеля',MB_OKCANCEL) = IDOK
    then Begin

      medBankDate.text := '01.'+curr_m+'.'+curr_y;
      TabelDate:=medBankDate.text;
      GB_tabel_date.caption := ' Табель '+TabelDate;

      with sqlparams
      do begin
        clear;
        CreateParam(ftString,'P_B',ptInput);
        ParamByName('P_B').Value := branch;
        CreateParam(ftInteger,'P_M',ptInput);
        ParamByName('P_M').Value := strtoint(curr_m);
        CreateParam(ftInteger,'P_Y',ptInput);
        ParamByName('P_Y').Value := strtoint(curr_y);

      end;
       execSql('delete From ok_Tabel where branch=:P_B and tabel_month=:P_M and tabel_year=:P_Y',sqlparams);
       execSql('commit');

    end;

      cdsTabel.close;
      with cdsTabel.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := copy(tabelDate,4,2);
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := copy(tabelDate,7,4);
      end;

      loaddata(cdsTabel,'select a.* from ok_tabel a where branch=:p_1 and tabel_month=:p_2 and tabel_year=:p_3 '+order_by_tabel );

    
end;

procedure TBOKForm.cdsOK_FreeDaysAfterOpen(DataSet: TDataSet);
begin
  If dsOKPersonal.DataSet.Active Then
  Begin
//    cdsOKAward.FieldByName('award_date').EditMask  := '!09/09/0099;1;_';
    cdsOK_FreeDays.MasterSource    := dsOKPersonal;
    cdsOK_FreeDays.IndexFieldNames := 'branch;personal_code';
    cdsOK_FreeDays.MasterFields    := 'branch;personal_code';
  End;

end;

procedure TBOKForm.ed_iias_strChange(Sender: TObject);
begin
  if ed_iias_str.text='860'
  then begin
    edBirth.text:='';
    ed_iias_birth_region.Enabled:=true;
    ed_iias_birth_region_prim.Enabled:=false;
    dblcb_iias_birth_region.Enabled:=true;
    ed_iias_birth_distr.Enabled:=true;
    ed_iias_birth_distr_prim.Enabled:=false;
    dblcb_iias_birth_distr.Enabled:=true;
  end else begin
    if cdsOKpersonal.state in dseditmodes
    then begin
      cdsOKpersonal.FieldByName('region_id').AsString:='';
      cdsOKpersonal.FieldByName('distr').AsString:='';
    end;
    ed_iias_birth_region.Enabled:=false;
    ed_iias_birth_region_prim.Enabled:=true;
    dblcb_iias_birth_region.Enabled:=false;
    ed_iias_birth_distr.Enabled:=false;
    ed_iias_birth_distr_prim.Enabled:=true;
    dblcb_iias_birth_distr.Enabled:=false;

  end;

end;

procedure TBOKForm.edBirthChange(Sender: TObject);
begin

  if (ed_iias_str.text='860') and (edBirth.text<>'')
  and (cdsOKPERSONAL.state in dseditmodes)
  then begin
    edBirth.text:='';
    showmessage('Если Страна рождения '+DBLCB_iias_str.text +#13+
      ' то поле '+lbBirth.caption+'('+cdsOKPERSONAL.FieldByName('birthplace').AsString+') должно быть пустое.'
    );
  end;

end;

procedure TBOKForm.dbedIronMaidenChange(Sender: TObject);
begin
  if (cdsokpersonal.fieldbyname('gender_code').asstring='1')
  and (dbedIronMaiden.Text<>'')
  then begin
    ShowMessage('"Нельзя ввести девичью фамилию - вы ввели пол Мужской"');
  end;

end;

procedure TBOKForm.ed_iias_live_strChange(Sender: TObject);
begin
  if ed_iias_live_str.text='860'
  then begin
    ed_iias_live_region.Enabled:=true;
    ed_iias_live_region_prim.Enabled:=false;
    dblcb_iias_live_region.Enabled:=true;
    ed_iias_live_distr.Enabled:=true;
    ed_iias_live_distr_prim.Enabled:=false;
    dblcb_iias_live_distr.Enabled:=true;
  end else begin
    if cdsOKpersonal.state in dseditmodes
    then begin
      cdsOKpersonal.FieldByName('cod_obl_live').AsString:='';
      cdsOKpersonal.FieldByName('cod_distr_live').AsString:='';
    end;
    ed_iias_live_region.Enabled:=false;
    ed_iias_live_region_prim.Enabled:=true;
    dblcb_iias_live_region.Enabled:=false;
    ed_iias_live_distr.Enabled:=false;
    ed_iias_live_distr_prim.Enabled:=true;
    dblcb_iias_live_distr.Enabled:=false;

  end;

end;

procedure TBOKForm.ed_iias_live_regionClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.ed_iias_live_distrClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.ed_iias_birth_regionClick(Sender: TObject);
begin
  ed_iias_strChange(nil);
end;

procedure TBOKForm.dblcb_iias_birth_regionClick(Sender: TObject);
begin
  ed_iias_strChange(nil);

end;

procedure TBOKForm.ed_iias_birth_distrClick(Sender: TObject);
begin
  ed_iias_strChange(nil);

end;

procedure TBOKForm.dblcb_iias_birth_distrClick(Sender: TObject);
begin
  ed_iias_strChange(nil);

end;

procedure TBOKForm.ed_iias_strClick(Sender: TObject);
begin
  ed_iias_strChange(nil);

end;

procedure TBOKForm.DBLCB_iias_strClick(Sender: TObject);
begin
  ed_iias_strChange(nil);

end;

procedure TBOKForm.ed_iias_live_strClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);

end;

procedure TBOKForm.DBLCB_iias_live_strClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);

end;

procedure TBOKForm.bbGOTO_IIASClick(Sender: TObject);
begin
  LastPanel := 'IIASPanel';
  pcmainok.ActivePage := IIASPanel_;

  actiias.Checked := true;

  actCopyPers.Checked     := False ;
  actTable.Checked := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly := false;
  OptionsPanel.Visible := False;


  if not(cdsdistr.Active)
  then begin
    loaddata(cdsdistr,SQL_S_DISTR);
  end;

  if not(cds_yesno.Active)
  then begin
    loaddata(cds_yesno,SQL_yesno);
  end;

  if not(cdsS_STR.Active)
  then begin
    loaddata(cdsS_STR,SQL_str);
  end;


end;

procedure TBOKForm.BitBtn168Click(Sender: TObject);
begin

  LastPanel := 'FormPanel';
  pcmainok.ActivePage := FormPanel_;
  actForm.Checked := True;

  actCopyPers.Checked     := False ;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=False;
  OptionsPanel.Visible := False;

  actiias.Checked := false;

end;

procedure TBOKForm.DBEdit156Exit(Sender: TObject);
begin
  if cdsOkRelation.fieldbyname('COD_STR_LIVE').asstring='860'
  then begin
    dbedCOD_OBL_LIVE.enabled:=true;
    DBEdit99.enabled:=true;
    DBLookupComboBox27.enabled:=true;
    DBLookupComboBox29.enabled:=true;
    DBEdit45.enabled:=false;
    DBEdit116.enabled:=false;
  end else begin
    dbedCOD_OBL_LIVE.enabled:=false;
    DBEdit99.enabled:=false;
    DBLookupComboBox27.enabled:=false;
    DBLookupComboBox29.enabled:=false;
    DBEdit45.enabled:=true;
    DBEdit116.enabled:=true;
  end;

end;

procedure TBOKForm.dsOkRelationDataChange(Sender: TObject; Field: TField);
begin
  DBEdit156Exit(Sender);
  DBEdit158Exit(Sender);
end;

procedure TBOKForm.DBEdit158Exit(Sender: TObject);
begin
  if cdsOkRelation.fieldbyname('COD_STR_birth').asstring='860'
  then begin
    dbedCOD_OBL_birth.enabled:=true;
    DBEdit157.enabled:=true;
    DBLookupComboBox9.enabled:=true;
    DBLookupComboBox5.enabled:=true;
    DBEdit92.enabled:=false;
    DBEdit51.enabled:=false;
  end else begin
    dbedCOD_OBL_birth.enabled:=false;
    DBEdit157.enabled:=false;
    DBLookupComboBox9.enabled:=false;
    DBLookupComboBox5.enabled:=false;
    DBEdit92.enabled:=true;
    DBEdit51.enabled:=true;
{Дополнительная информация по сотруднику - Родственные отношение в поле место рождения,
в случае если страна рождения не Узбекистан, то при выборе страны рождения ЦБ,
копировать выбранную страну в поле страна, для того чтобы не вводить ее повторно
 -- убрал из-за Зухры 28.11.2013}
//    dbedCOD_STR_birth_prim.text:= dblcbCOD_STR_birth.text;
  end;

end;

procedure TBOKForm.dsOKPeriodDataChange(Sender: TObject; Field: TField);
begin
{
  if cdsOKPeriod.FieldByName('type_period_code').AsString = '3'
  then begin
  // шу банкда
    DBEd_poststring2.enabled:=true;
    DBlcb_poststring3.enabled:=true;
    DBEd_depstring2.enabled:=true;
    DBlcb_depstring3.enabled:=true;
  end else begin
// глючит в капитал банке в 00974 когда отключаем поля.  
    DBEd_poststring2.enabled:=false;
    DBlcb_poststring3.enabled:=false;
    DBEd_depstring2.enabled:=false;
    DBlcb_depstring3.enabled:=false;
  end;
}
end;

procedure TBOKForm.DBEdit184Change(Sender: TObject);
begin
{  if (BOKForm.cdsOKPersonal_NEW.State in [dsEdit, dsInsert])
  and (chbGluk.checked)
  then begin
     cdsOKPersonal_NEW.FieldByName('home_address').AsString := dbeOK_HOME_ADDRESSFACT.Text ;
     cdsOKPersonal_NEW.FieldByName('HOME_ADDRESS_REGION_ID').AsString :=
       cdsOKPersonal_NEW.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString ;
     cdsOKPersonal_NEW.FieldByName('HOME_ADDRESS_DISTR').AsString :=
       cdsOKPersonal_NEW.FieldByName('HOME_ADDRESSFACT_DISTR').AsString ;
  end;
}
end;

procedure TBOKForm.DBEdit185Change(Sender: TObject);
begin
  if DBEdit185.text='860'
  then begin
    DBEdit189.Enabled:=true;
    DBLookupComboBox57.Enabled:=true;
    DBEdit187.Enabled:=true;
    DBLookupComboBox56.Enabled:=true;
    if cdsOKpersonal_new.state in dseditmodes
    then begin
      cdsOKpersonal_new.FieldByName('cod_obl_live_prim').AsString:='';
      cdsOKpersonal_new.FieldByName('cod_distr_live_prim').AsString:='';
    end;
    DBEdit190.Enabled:=false;
    DBEdit188.Enabled:=false;
  end else begin
    if cdsOKpersonal_new.state in dseditmodes
    then begin
      cdsOKpersonal_new.FieldByName('cod_obl_live').AsString:='';
      cdsOKpersonal_new.FieldByName('cod_distr_live').AsString:='';
    end;
    DBEdit189.Enabled:=false;
    DBLookupComboBox57.Enabled:=false;
    DBEdit187.Enabled:=false;
    DBLookupComboBox56.Enabled:=false;
    DBEdit190.Enabled:=true;
    DBEdit188.Enabled:=true;

  end;

end;

procedure TBOKForm.DBEdit185Click(Sender: TObject);
begin
  DBEdit185Change(sender);
end;

procedure TBOKForm.DBLCB_iias_str_NEWClick(Sender: TObject);
begin
  ed_iias_str_NEWChange(nil);
end;

procedure TBOKForm.ed_iias_str_NEWChange(Sender: TObject);
begin

  if ed_iias_str_NEW.text='860'
  then begin
    dbeokRegion.Enabled:=true;
    DBLCBokregion.Enabled:=true;
    dbeOKdistr.Enabled:=true;
    DBLCBokdistr.Enabled:=true;
    if cdsOKpersonal_NEW.state in dseditmodes
    then begin
      cdsOKpersonal_NEW.FieldByName('cod_obl_prim').AsString:='';
      cdsOKpersonal_NEW.FieldByName('cod_place_birth_prim').AsString:='';
    end;
    DBEdit183.Enabled:=false;
    DBEdit184.Enabled:=false;
  end else begin
    if cdsOKpersonal_NEW.state in dseditmodes
    then begin
      cdsOKpersonal_NEW.FieldByName('region_id').AsString:='';
      cdsOKpersonal_NEW.FieldByName('distr').AsString:='';
    end;
    dbeokRegion.Enabled:=false;
    DBLCBokregion.Enabled:=false;
    dbeOKdistr.Enabled:=false;
    DBLCBokdistr.Enabled:=false;
    DBEdit183.Enabled:=true;
    DBEdit184.Enabled:=true;

  end;

end;

procedure TBOKForm.DBLookupComboBox53Click(Sender: TObject);
begin
  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.dbeOKFamilyStatusExit(Sender: TObject);
begin
  if  dbeOKFamilyStatus.Text = ''
  then begin
    cdsSSOKGender_SET.Filtered := False;
  end
  else begin
    cdsSSOKGender_SET.Filtered := False;
    cdsSSOKGender_SET.Filter := 'gender_code='+ cdsSSOKFamilyStatus_SET.FieldByName('gender_code').AsString;
    cdsSSOKGender_SET.Filtered := True;
    if BOKForm.cdsOKPersonal_NEW.State in [dsEdit, dsInsert]
    then cdsOKPersonal_NEW.FieldByName('gender_code').AsString := cdsSSOKFamilyStatus_SET.FieldByName('gender_code').AsString;
//showmessage(cdsSSOKFamilyStatus_SET.FieldByName('gender_code').AsString);
  end;

end;

procedure TBOKForm.N23Click(Sender: TObject);
var
//msg,
  s : string;
  FileHandle : THandle;

begin
  ExecPrc.Close;
  ExecPrc.Params.Clear;
  ExecPrc.Params.CreateParam(ftCursor, 'REP_CUR',ptInputOutput);
  LoadData(ExecPrc,'ok_service.PrintCheckW',False);

  If not DirectoryExists(ROOT_DIR+'\OK') then
     ForceDirectories(ROOT_DIR+'\OK');
  FileHandle:=FileCreate(ROOT_DIR+'\OK\REP.TXT');

  while not ExecPrc.Eof do
  begin
    s:=s+ ExecPrc.Fields[0].AsString+#13#10;
    ExecPrc.Next;
  end;
  FileWrite(FileHandle,PChar(s)^,Length(s));
  FileClose(FileHandle);
  WinExec(PChar('notepad.exe '+ROOT_DIR+'\OK\REP.TXT'), SW_SHOWNORMAL);
end;

procedure TBOKForm.bbApplicationClick(Sender: TObject);
var
  doljn_counter_  : integer; // ,checking_fail_
  ErMessage, doljn_educ_,post_name_,educ_name_,educ_name_pers_ : string;
      text_f : textfile;
  rukovod_,proverka_for_idiots: integer;
begin
  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006') or (HeadBranch_='09004') or (HeadBranch_='09049'))  //  подтв. в ГО
  then begin
//если халк то
    showmessage('(23216)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin
    proverka_:=0;
// будет "отправлен в ГО"
//  требуется разрешение ГО
//
    proverka_for_idiots:=getsqlresultpar(
       ' select count(state_code)'+
       ' from okedb_appoints'+
       ' where branch=:p_1'+
       ' and personal_code=:p_2'+
       ' and department_code_new=:p_3'+
       ' and post_code_new=:p_4'+
       ' and rownum<:p_5',
       cdsOKPersonal.FieldByName('branch').AsString,
       cdsOKPersonal.FieldByName('personal_code').AsString
       cdsOKPersonal.FieldByName('department_code_new').AsString,
       cdsOKPersonal.FieldByName('post_code_new').AsString,
       '2'
       );
    if proverka_for_idiots=0
    then begin
      execsqlpar('update ok_personal set GOSUBMIT_CODE=null'+
         ' where branch=:p_1'+
         ' and personal_code=:p_2',
         cdsOKPersonal.FieldByName('branch').AsString,
         cdsOKPersonal.FieldByName('personal_code').AsString
                );
      execsql('commit');
    end;

    cdsOKPersonal.refresh;

    if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='22')
  //  and (cdsOKPersonal.FieldByName('GOsubmit_code').AsString<>'')
    then begin
      proverka_:=proverka_+1;
      showmessage('(23241)Нельзя отправить заявку, сотрудник в состоянии '+dblcbGOsubmit.text);
      exit;
    end;

    ErMessage:='';
    if not chbSvetaOnly.checked
    then begin
          proverka(2,0);

  /////////////////////////
  //  проверка в халке
  // если признак-научная степень-да то проверить ее  наличие, если -нет- то ее  не должно быть
  // если признак-научное звание -да то проверить его наличие, если -нет- то его не должно быть
  // образование должно соответствовать указанным в ok_education учебным заведениям
  /////////////////////////
    if  ( cdsOKPersonal.FieldByName('reg_type_code').AsString='2')
    and (   cdsOKPersonal.FieldByName('REG_DATE_END').AsString='')
    then begin
      ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
      proverka_:=proverka_+1;
    end;

        if cdsOKPersonal.FieldByName('TRUD_SOGL').AsString=''
        then begin
          ErMessage := ErMessage+' "По трудовому соглашению" ';
          proverka_:=proverka_+1;
        end;

        if cdsOKPersonal.FieldByName('profmember').AsString=''
        then begin
          ErMessage := ErMessage+' "Профсоюз" ';
          proverka_:=proverka_+1;
        end;
        if cdsOKPersonal.FieldByName('telefon').AsString=''
        then begin
          ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
          proverka_:=proverka_+1;
        end;
        try
          strtoint64(cdsOKPersonal.FieldByName('telefon').AsString);
        except
          ErMessage := ErMessage+' "Телефон '+cdsOKPersonal.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
          proverka_:=proverka_+1;
        end;

        if ( strtoint(copy(datetostr(now),7,4))-
              strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
              <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
        or (( strtoint(copy(datetostr(now),7,4))-
              strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
              =45) and (now< strtodate(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
        )
        then begin
          if (cdsokpersonal.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
          then begin
            ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
            proverka_:=proverka_+1;
          end else begin
            if (cdsokpersonal.FieldByName('PASS_DATE_END').AsDateTime < now)
            then begin
              ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
              proverka_:=proverka_+1;
            end;
          end;
        end;

  end;

     //        \\
    // проверка \\
   //            \\
    try
      if chbSvetaOnly.checked
      then begin
//        showmessage('Только для Светы: проверка "CHECKW" отключена.');
        if proverka_=0
        then begin
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_BRANCH',curbranch);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_PERSONAL_CODE',cdsOKPersonal.fieldbyname('personal_code').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE_NEW',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE_NEW',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_USERID',UserId);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_VDATE',bankdate);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_CHECK','1'); // check_=1 проверять вакансию
    //    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','','');
        execSQL('begin OK_SERVICE.NEW_appoint; end;');
        ExecSQL('COMMIT');
        end else begin
          Showmessage('Исправьте все ошибки указанные в отчете.'+#13+'не меньше '+inttostr(proverka_));
        end;
      end else begin
        rukovod_ :=0;
        if cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                 '79',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
        if cdsOKPersonal.fieldbyname('POST_CODE').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                '79',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
        if (rukovod_=0)
        then begin
          // 25.02.2014 если новая должность НЕ руководящая, то не проверять фото и образование
        end else begin
        // наличие фото  \
          doljn_counter_ := getsqlresultpar('select count(*) from ok_photo where branch=:p_1 '+
            ' and personal_code=:p_2 and (priznak is null or priznak=:p_3)',
             curbranch, cdsOKPersonal.fieldbyname('personal_code').asstring,'1'
            );
          if doljn_counter_=0
          then begin
           ErMessage:=ErMessage+' отсутствует фото ';
           proverka_:=proverka_+1;
          end;

          // наличие образования
          doljn_counter_ := getsqlresultpar('select count(*) from ok_education where branch=:p_1 '+
            ' and personal_code=:p_2',
             curbranch, cdsOKPersonal.fieldbyname('personal_code').asstring
            );
          if doljn_counter_=0
          then begin
            ErMessage:=ErMessage+' отсутствует образование в доп.сведениях ';
            proverka_:=proverka_+1;
          end;

          if cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring=''
          then begin
            ErMessage:=ErMessage+' отсутствует * Образование Сотрудника ( Наименование ) на вкладке "Информация по сотруднику" ';
            proverka_:=proverka_+1;
          end else begin
            doljn_educ_ := getsqlresultpar('select nvl(Education_Title_CODE,0) from ss_ok_post where post_code=:p_1',
                cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring
              );
            if doljn_educ_<>'0'
            then begin
              if doljn_educ_<> cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring
              then begin
                post_name_:=getsqlresultpar('select post_name from ss_ok_post where post_code=:p_1',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
                educ_name_:=getsqlresultpar('select Education_Title_name from ss_ok_Education_Title where Education_Title_code=:p_1',
                    doljn_educ_
                  );
                educ_name_pers_:=getsqlresultpar('select Education_Title_name from ss_ok_Education_Title where Education_Title_code=:p_1',
                  cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring
                  );
                ErMessage:=ErMessage+'для должности '+post_name_+' необходимо образование '+educ_name_+' а не '+educ_name_pers_;
                proverka_:=proverka_+1;
              end;
            end;
          end;
        end;
        /////////

        if ErMessage<>''
        then begin
          showmessage(ErMessage);
          proverka_:=proverka_+1;
      ////
          if 1=1
          then begin
            If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
            If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');            If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');
            try
              System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok3.txt');
              System.Rewrite(text_f);

              Try
                System.Writeln(text_f,ErMessage);
              Finally
                System.CloseFile(text_f);
              End;
            except
              showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok3.txt"');              raise;
            end;

            try
              WinExec('notepad C:\NCI Bank\OK\Temp\err_ok3.txt', SW_MAXIMIZE);
            except
              showmessage('(23200)Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok3.txt"');            end;
          end;
      ////


          ExecSQL('BEGIN ok_service.checkw;  END;');
        end else begin
          ExecSQL('BEGIN ok_service.checkw;  END;');
          if proverka_=0
          then begin
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_BRANCH',curbranch);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_PERSONAL_CODE',cdsOKPersonal.fieldbyname('personal_code').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE_NEW',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE_NEW',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_USERID',UserId);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_VDATE',bankdate);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_CHECK','1'); // check_=1 проверять вакансию
            execSQL('begin OK_SERVICE.NEW_appoint; end;');
            ExecSQL('COMMIT');
          end else begin
            Showmessage('Исправьте все ошибки указанные в отчете.'+#13+'не меньше '+inttostr(proverka_));
          end;

        end;
      end;


    except
      on E: Exception do
      begin
        ExecSQL('rollback');

        n23click(sender);
        Showmessage('Исправьте все ошибки указанные в отчете.'+#13+e.Message);
      // не прошел проверку, выходит отчет об ошибках
        exit;

      end;
    end;




          cdsOKPersonalAfterScroll(nil);
  end; // если отправлен в го

      cdsokpersonal.Refresh;

end;

procedure TBOKForm.bbUvolClick(Sender: TObject);
begin
  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006')  or (HeadBranch_='09004') or (HeadBranch_='09049'))  //  подтв. в ГО
  then begin
//если халк то
    showmessage('(23476)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin
//  будет "Заявка на увольнение"
    try
  //    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','PAR_NAME','значение');
      execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_BRANCH',curbranch);
      execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_PERSONAL_CODE',cdsOKPersonal.fieldbyname('personal_code').asstring);
      execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_USERID',UserId);
      execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_VDATE',bankdate);
      execSQL('begin OK_SERVICE.NEW_dismiss; end;');
      ExecSQL('COMMIT');
      if (cdsokpersonal.State in dsEditModes)
      then begin
        cdsokpersonal.cancel;
      end;
      cdsokpersonal.Refresh;
    except on e:exception
      do begin
        showmessage('(21564)Ошибка '+#13+e.Message);
      end;
    end;
          cdsOKPersonalAfterScroll(nil);

  end; // отправлен в го

      cdsokpersonal.Refresh;

end;

procedure TBOKForm.BitBtn134Click(Sender: TObject);
var App:      Variant;
   WorkBook: Variant;
   k,x:      integer; //  i,
  Text61,Text62,Text63: string;
  Text3,Text4 : string; //Text_, Text2, ,Text5,Text7,Text8,Text9,Text10
  Text11, Text12: string; //, Text13,Text14,Text15,Text16, Text16a, Text16b
  //Text16i, Text16j,  Text16h,   text16c,  text16d,  text16e,  text16f,  text16g  : string;
  //Text17,Text18,Text19,
  Text20,Text21: string;
  file_name_, sql_, where_pers, where_pers_a : string;
  Save_Cursor:TCursor;
begin

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }
                                   // час стекла - песочные часы
 TRY
    { Do some lengthy operation }

  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049')  // не связано с подтв. в ГО
  then begin
    App := CreateOLEObject('Excel.Application');
    WorkBook:=App.Workbooks.Open('C:\NCI Bank\Ok\templates\pril01.xls');
    App.Visible := false;
    file_name_:= 'pril01.xls';
  end else begin
    App := CreateOLEObject('Excel.Application');
    WorkBook:=App.Workbooks.Open('C:\NCI Bank\Ok\templates\pril01.xls');
    App.Visible := false;
    file_name_:= 'pril01.xls';
  end;

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Excel'' не может открыть файл C:\NCI Bank\Ok\Templates\'+file_name_+
      #10#13+ ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+
      #10#13+'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;

// ЭТО РАБОТАЕТ !!!!
{
  try
    App.Selection.Find.Execute('<INN>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('inn').AsString, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESS_REGION_ID_SHOW').AsString+' '+
              cdsOKPersonal.FieldByName('HOME_ADDRESS_DISTR_SHOW').AsString;
    App.Selection.Find.Execute('<KB_HOME_ADDRESS>', false, false, false, false, false,
           true, 1, false, text21, 2);

    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESS').AsString; // ok_personal.home_address
    App.Selection.Find.Execute('<HOME_ADDRESS>', false, false, false, false, false,
           true, 1, false, text21, 2);




    text21 := cdsOKPersonal.FieldByName('home_address').AsString; // ok_personal.home_address
    App.Selection.Find.Execute('<TEXT21>', false, false, false, false, false,
           true, 1, false, text21, 2);
}
//    where_pers := ' WHERE branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                  ' AND personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
//    where_pers_a := ' WHERE a.branch = '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
//                    ' AND a.personal_code='+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers := ' WHERE branch=:p_1'+
                  ' AND personal_code=:p_2' ;
    where_pers_a := ' WHERE a.branch=:p_1'+
                    ' AND a.personal_code=:p_2' ;
    TRY
    sql_ := SQL_OKPhoto+where_pers  +  ' and (priznak is null or priznak=:p_3)';

    try

      cdsOKPhoto.close;
      with cdsOKPhoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
      LoadData(cdsOKPhoto, sql_);

      if fileexists('C:\NCI Bank\Ok\Temp\photo.jpg')
      then deletefile('C:\NCI Bank\Ok\Temp\photo.jpg');

      if not cdsOKPhoto.FieldByName('photo').IsNull
      then begin
        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
        WorkBook.WorkSheets[1].Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg',
          false,true,0,0, 162,216 );
        cdsOKPhoto.Close;
      end else begin
        cdsOKPhoto.Close;
      end;
    except
    end;

    WorkBook.WorkSheets[1].Cells[3,4].Value:=
    cdsOKPersonal.FieldByName('family').AsString+' '+
    cdsOKPersonal.FieldByName('First_Name').AsString+' '+
    cdsOKPersonal.FieldByName('Patronymic').AsString;

    WorkBook.WorkSheets[1].Cells[5,4].Value:=
    'Должность:'+getsqlresultpar('select ok_service.GET_POSTNAME(:p_1) from dual',cdsOKPersonal.FieldByName('post_code').AsString);

    WorkBook.WorkSheets[1].Cells[11,4].Value:=
      'Стаж в банковской сфере: '+
      getsqlresultpar('select ok_service.GET_WORK_PERIOD_BY_TYPE(:p_1,:p_2,to_date(:p_3,''dd.mm.yyyy''),:p_4) from dual',
        cdsOKPersonal.FieldByName('branch').AsString,cdsOKPersonal.FieldByName('personal_code').AsString,
        bankdate,'5'
      );

    WorkBook.WorkSheets[1].Cells[11,9].Value:=
      'Тел: '+ cdsOKPersonal.FieldByName('TELEFON').AsString;

    x:=0;
    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= copy(cdsOKPersonal.FieldByName('birthday').AsString, 7,4);

  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    text3 := text3 +' '+cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
//    sql_:='SELECT region_nam '+
//                         ' FROM s_region'+
//                         ' where region_id='''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,'SELECT region_nam '+
                         ' FROM s_region'+
                         ' where region_id=:p_1', True);
    text3 := text3 + ' '+cdsTempSource.FieldByName('region_nam').AsString;

//    sql_:='SELECT distr_name '+
//                         ' FROM s_distr'+
//                         ' where distr='''+cdsOKPersonal.FieldByName('distr').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,'SELECT distr_name '+
                         ' FROM s_distr'+
                         ' where distr=:p_1', True);
    text3 := text3 + ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;
    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= text3;

//text4
  text4 := '';
//  sql_:='SELECT nationality_name '+
//                         ' FROM ss_ok_nationality'+
//                         ' where nationality_code='+cdsOKPersonal.FieldByName('nationality_code').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('nationality_code').AsString;
      end;
  LoadData(cdsTempSource,'SELECT nationality_name '+
                         ' FROM ss_ok_nationality'+
                         ' where nationality_code=:p_1' , True);

  text4 := cdsTempSource.FieldByName('nationality_name').AsString;

    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= text4;

//text6
  sql_:='select a.end_date||'' ''|| b.institution_name all_data,   a.diplom_num diplomnum, '+
                ' c.qualification_name '+
                ' from ok_education a, ss_ok_institution b, ss_ok_qualification c'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and a.qualification_code = c.qualification_code'+
                ' order by a.end_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  k:=1; Text61:='';Text62:='';Text63:='';
  While not cdsTempSource.Eof do
  Begin
    Text61:= Text61+' '+cdsTempSource.fieldbyname('all_data').asstring;
    Text62:= Text62+' '+cdsTempSource.fieldbyname('qualification_name').asstring;
    Text63:= Text63+' '+cdsTempSource.fieldbyname('diplomnum').asstring;
    inc(k);
    cdsTempSource.next;
  End;
    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= Text61;
    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= Text62;
    inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:= Text63;

   // адрес
    text21 :=  cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_REGION_ID_SHOW').AsString+ ' ' +
               cdsOKPersonal.FieldByName('HOME_ADDRESSFACT_DISTR_SHOW').AsString+ ' '+
               cdsOKPersonal.FieldByName('HOME_ADDRESSFACT').AsString; // ok_personal.home_address
   inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:=text21;

//text20
  text20 := ''; // ss_ok_FAMILY_STATUS.FAMILY_STATUS_CODE
//  sql_:='select family_status_name all_data'+
//                ' from ss_ok_FAMILY_STATUS'+
//                ' where FAMILY_STATUS_CODE='+ cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('FAMILY_STATUS_CODE').AsString;
      end;
  LoadData(cdsTempSource,'select family_status_name all_data'+
                ' from ss_ok_FAMILY_STATUS'+
                ' where FAMILY_STATUS_CODE=:p_1', True);

  Text20:= cdsTempSource.fieldbyname('all_data').asstring;

   // Семейное положение
   inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:=text20;
   //серия
   inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:=
            cdsOKPersonal.FieldByName('PASS_SERIYA').AsString +' '+
            cdsOKPersonal.FieldByName('PASS_NUM').AsString ;

   //  выдан
   inc(x);WorkBook.WorkSheets[1].Cells[16,x].Value:=
            cdsOKPersonal.FieldByName('PASS_DATE').AsString +' '+
            cdsOKPersonal.FieldByName('PASS_REG').AsString;
// до этой команды приложение  работает в фоновом режиме

//text12
  text12 := '';
  k:=19;
  sql_:='select IN_OFFICE_DATE ||'' й.'' date1_,'+
        ' OUT_OFFICE_DATE ||'' й.'' DATE2_,'+
        ' substr(OFFICE_NAME,1,250),'+//   ||'' - ''||'+
        ' substr(ESTABLISHED_DEPARTMENT,1,250)  ||'' - ''||'+
        ' substr(ESTABLISHED_POST,1,250)  ||'' - ''||OFFICE_ADDRESS office_'+
        ' from ok_period '+
        where_pers+' order by in_office_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
      WorkBook.WorkSheets[1].Cells[k,1].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,1].Value:= cdsTempSource.fields[0].asstring;

      WorkBook.WorkSheets[1].Cells[k,2].WrapText := True; // для обьединенных ячеек врап не работает ((
      if cdsTempSource.fields[1].asstring<>' й.'
      then WorkBook.WorkSheets[1].Cells[k,2].Value:= cdsTempSource.fields[1].asstring;

      WorkBook.WorkSheets[1].Cells[k,3].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,3].Value:= cdsTempSource.fields[2].asstring;

//  примечание ????
      WorkBook.WorkSheets[1].Cells[k,7].Value:= cdsTempSource.fields[3].asstring;


    inc(k);
    cdsTempSource.next;

  End;

  text11 := '';
  k:=41;
  sql_:='select b.relation_name,a.RELATION_FAMILY	||'' ''||a.RELATION_NAME ||'' ''||'+
                ' a.RELATION_PATRONYMIC,'+
                ' a.RELATION_BIRTHDAY||'' йил ''||'+
                 'decode(COD_OBL_birth,null,nvl(COD_OBL_BIRTH_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_birth))||'' ''||'+
                 'decode(COD_CITY_birth,null,nvl(COD_CITY_BIRTH_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY_birth))'+
//                 '||'' ''||nvl(a.RELATION_BIRTHPLACE,'' ''),'+
                 ','+
                ' nvl(a.RELATION_OFFICE,'' '')||'' ''||nvl(a.RELATION_POST,'' '') ,'+
                 'decode(COD_OBL_LIVE,null,nvl(COD_OBL_LIVE_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_LIVE))||'' ''||'+
                 'decode(COD_CITY,null,nvl(COD_CITY_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY))||'' ''||'+
                'nvl(a.RELATION_HOME_ADDRESS,'' '')'+
                ' from ok_relation a, ss_ok_relation b'+
                  where_pers_a +
                ' and a.relation_code=b.relation_code'+
                ' order by a.relation_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

      WorkBook.WorkSheets[1].Cells[k,1].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,1].Value:= cdsTempSource.fields[0].asstring;

      WorkBook.WorkSheets[1].Cells[k,3].WrapText := True; // для обьединенных
      WorkBook.WorkSheets[1].Cells[k,3].Value:= cdsTempSource.fields[1].asstring;

      WorkBook.WorkSheets[1].Cells[k,5].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,5].Value:= cdsTempSource.fields[2].asstring;

      WorkBook.WorkSheets[1].Cells[k,7].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,7].Value:= cdsTempSource.fields[3].asstring;
      WorkBook.WorkSheets[1].Cells[k,9].WrapText := True;
      WorkBook.WorkSheets[1].Cells[k,9].Value:= cdsTempSource.fields[4].asstring;

      inc(k);
    cdsTempSource.next;

  End;


  App.Visible:=true;

//  App.Application.Quit; -- выход  совсем
 except
  App.Application.Quit(false); // выход  совсем без сохранения
/////
  raise;
//  App.Application.Quit(true); // выход  с сохранением
 end;

  App:=unassigned;
 FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

{
//text2
  text2 := '';
  sql_:= 'SELECT change_date,change_motive '+
                         ' FROM ok_change_fio'+
                           where_pers+' order by change_date' ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text2 = ''
    then Text2:= cdsTempSource.fieldbyname('change_date').asstring+' йил '+cdsTempSource.fieldbyname('change_motive').asstring
    else Text2:= text2+#13+cdsTempSource.fieldbyname('change_date').asstring+' йил '+cdsTempSource.fieldbyname('change_motive').asstring;

    cdsTempSource.next;

  End;
  if text2 = '' then text2 := 'узгармаган';
  App.Selection.Find.Execute('<TEXT2>', false, false, false, false, false,
           true, 1, false, text2, 2);






//text5 text17, text18
  text5  := '';
  text17 := '';
  text18 := '';
  sql_:= 'select b.party_name, party_outdate,out_party, '+
                ' punishment_date||'' ''||punishment_motive text18'+
                ' from ok_party a, ss_ok_party b'+
                  where_pers_a +
//                ' and a.party_outdate is null'+
                ' and a.party_code = b.party_code'+
                ' order by a.party_date'  ;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);
// ||'' йил ''||
  While not cdsTempSource.Eof do
  Begin
    if text5 = ''
    then Text5:= cdsTempSource.fieldbyname('party_name').asstring
    else Text5:= text5+' '+cdsTempSource.fieldbyname('party_name').asstring;

    text_:='';
    if cdsTempSource.fieldbyname('party_outdate').asstring<>''
    then
      text_:= cdsTempSource.fieldbyname('party_outdate').asstring+' йил '+
                  cdsTempSource.fieldbyname('out_party').asstring;
    if text17 = ''
    then Text17:= text_
    else Text17:= text17+#13+text_;

    if text18 = ''
    then Text18:= cdsTempSource.fieldbyname('text18').asstring
    else Text18:= text18+#13+cdsTempSource.fieldbyname('text18').asstring;

    cdsTempSource.next;

  End;

  if text5 = ''
  then Text5:= 'партия аъзоси эмас';

  App.Selection.Find.Execute('<TEXT5>', false, false, false, false, false,
           true, 1, false, text5, 2);

  App.Selection.Find.Execute('<TEXT17>', false, false, false, false, false,
           true, 1, false, text17, 2);

  App.Selection.Find.Execute('<TEXT18>', false, false, false, false, false,
           true, 1, false, text18, 2);



//text7
  text7 := '';
// награды
  sql_:='select award_date||'' йил ''||award_info all_data'+
                ' from ok_award '+
                  where_pers +
                ' order by award_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text7 = ''
    then Text7:= cdsTempSource.fieldbyname('all_data').asstring
    else Text7:= text7+' ; '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

// ученые степени
   sql_:='select a.degree_date||'' йил ''||b.degree_name all_data'+
                ' from ok_degree a, ss_ok_degree b'+
                  where_pers_a +
                ' and a.degree_code= b.degree_code'+
                ' order by a.degree_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text7 = ''
    then Text7:= cdsTempSource.fieldbyname('all_data').asstring
    else Text7:= text7+' ; '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//
    if text7 = ''
    then Text7:= 'илмий даражаси йук';
  App.Selection.Find.Execute('<TEXT7>', false, false, false, false, false,
           true, 1, false, text7, 2);

//text8
  text8 := '';
//OK_SCIENTIFIC
  sql_:='select scientific_date||'' йил ''||scientific_info all_data'+
                ' from ok_scientific'+
                  where_pers +
                ' order by scientific_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    if text8 = ''
    then Text8:= cdsTempSource.fieldbyname('all_data').asstring
    else Text8:= text8+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

    if text8 = ''
    then Text8:= 'илмий ишлари йук';
  App.Selection.Find.Execute('<TEXT8>', false, false, false, false, false,
           true, 1, false, text8, 2);

//text9
  text9 := '';
  sql_:='select voyage_date, voyage_land, voyage_info'+
                ' from ok_voyage'+
                  where_pers +
                ' order by voyage_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    text_:='';
    if cdsTempSource.fieldbyname('voyage_date').asstring<>''
    then text_:= cdsTempSource.fieldbyname('voyage_date').asstring+' йил '+
                 cdsTempSource.fieldbyname('voyage_land').asstring+' '+
                 cdsTempSource.fieldbyname('voyage_info').asstring;

    if text9 = ''
    then Text9:= text_
    else Text9:= text9+'; '+text_;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT9>', false, false, false, false, false,
           true, 1, false, copy(text9,1,250) , 2);

//text10
  text10 := '';
  sql_:='select b.language_name||'' - ''||c.level_language_name all_data'+
                ' from ok_language a, ss_ok_language b, ss_ok_level_language c'+
                  where_pers_a +
                ' and a.language_code= b.language_code'+
                ' and a.level_code= c.level_language_code'+
                ' order by a.language_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text10 = ''
    then Text10:= cdsTempSource.fieldbyname('all_data').asstring
    else Text10:= text10+'                                 '+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//showmessage('text10 '+text10);
  App.Selection.Find.Execute('<TEXT10>', false, false, false, false, false,
           true, 1, false, text10, 2);



//text13
  text13 := '';
  sql_:='select RISE_DATE_YEAR,'+
        'RISE_INFO '+
        ' from ok_rise '+
        where_pers+' order by rise_date_year';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    text_:='';

    if cdsTempSource.fieldbyname('RISE_DATE_YEAR').asstring<>''
    then text_:= cdsTempSource.fieldbyname('RISE_DATE_YEAR').asstring+' йил '+
                 cdsTempSource.fieldbyname('RISE_INFO').asstring;

    cdsTempSource.next;

  End;
  // только последнее повышение квалификации
  Text13:= text_;

//showmessage('text13 '+text13);
  App.Selection.Find.Execute('<TEXT13>', false, false, false, false, false,
           true, 1, false, text13, 2);



//text14
  text14 := '';
  k:=11;
  sql_:='select b.ELECTION_ADDRESS,b.ELECTION_NAME,'+
        'a.ELECTION_POST ,a.ELECTION_DATE_BEGIN,a.ELECTION_DATE_END '+
        ' from ok_election a, ss_ok_election b'+
        where_pers+
        ' and a.election_code=b.election_code'+
        ' and b.state_notes='+#39+'A'+#39+
        ' order by election_date_begin';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text14 := cdsTempSource.fields[i].asstring;
      App.Selection.Find.Execute('<TEXT14'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text14, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 30
  do begin
      App.Selection.Find.Execute('<TEXT14'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;

  if text14=''
  then begin
      App.Selection.Find.Execute('<TEXT14>', false, false, false, false, false,
            true, 1, false, 'катнашмаган', 2);
  end else begin
      App.Selection.Find.Execute('<TEXT14>', false, false, false, false, false,
            true, 1, false, ' ', 2);
  end;


//text15
  text15 := ''; // Гос премии ok_premium
//PREMIUM_DATE 	DATE not null, --Дата получения премии	Вводится с клавиатуры, невидимое поле, обязательное для заполнения
//PREMIUM_NAME	VARCHAR2(200) not null, --Наименование премии	Вводится с клавиатуры, невидимое поле, обязательное для заполнения
  sql_:='select premium_date, premium_name '+
                ' from ok_premium'+
                  where_pers +
                ' order by premium_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    text_:='';
    if cdsTempSource.fieldbyname('premium_date').asstring<>''
    then text_ := cdsTempSource.fieldbyname('premium_date').asstring+' йил '+
                  cdsTempSource.fieldbyname('premium_name').asstring;

    if text15 = ''
    then Text15:= text_
    else Text15:= text15+' ; '+text_;

    cdsTempSource.next;
  End;

  if text15 = ''
  then Text15:= 'мукофотломнаган';

  App.Selection.Find.Execute('<TEXT15>', false, false, false, false, false,
           true, 1, false, text15, 2);


  text16 := '';
  text16a := '';
  text16b := '';
  text16c := '';
  text16d := '';
  text16e := '';
  text16f := '';
  text16g := '';
  sql_:= 'select ok_service.get_staffname(a.staff_code) staff_show,'+
         ' ok_service.get_typeforcename(a.type_force_code) type_force_show, '+
         ' ok_service.get_categoryarmyname(a.CATEGORY_ARMY_CODE) CATEGORY_ARMY,'+
         ' a.SPECREG_NUMBER, a.NUMBER_VUS, b.fitness_army_type, a.NAME_ARMY_OFFICE,'+
         ' ok_service.get_armytype(a.army_code) army_type, '+
         ' ok_service.get_militaryrankname(a.military_rank_code) MILITARY_RANK, '+
         ' ok_service.get_armygroupname(a.army_group_code) ARMY_GROUP'+
                ' from ok_army a, ss_ok_fitness_army b'+
                 where_pers_a +
                ' and a.fitness_army_code= b.fitness_army_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

  Text16a := cdsTempSource.fieldbyname('staff_show').asstring ;
  text16b := cdsTempSource.fieldbyname('type_force_show').asstring ;

  Text16c := cdsTempSource.fieldbyname('CATEGORY_ARMY').asstring ;
  Text16d := cdsTempSource.fieldbyname('SPECREG_NUMBER').asstring ;
  Text16e := cdsTempSource.fieldbyname('NUMBER_VUS').asstring  ;
  Text16f := cdsTempSource.fieldbyname('fitness_army_type').asstring ;
  Text16g := cdsTempSource.fieldbyname('NAME_ARMY_OFFICE').asstring ;

  text16i := cdsTempSource.fieldbyname('army_type').asstring ;
  Text16j := cdsTempSource.fieldbyname('MILITARY_RANK').asstring  ;
  Text16h := cdsTempSource.fieldbyname('ARMY_GROUP').asstring ;

  Text16 :=  Text16j+' '+text16i; //  MILITARY_RANK   army_type


//text16
  // группа учета, категория учета,
//ARMY_GROUP_CODE
//CATEGORY_ARMY_CODE
//MILITARY_RANK_CODE
//STAFF_CODE
//TYPE_FORCE_CODE

  if text16=''
  then begin
    text16 :='муносабати йук';
  end;

  App.Selection.Find.Execute('<TEXT16>', false, false, false, false, false,
           true, 1, false, text16, 2);
  App.Selection.Find.Execute('<TEXT16A>', false, false, false, false, false,
           true, 1, false, text16a, 2);
  App.Selection.Find.Execute('<TEXT16B>', false, false, false, false, false,
           true, 1, false, text16b, 2);

  App.Selection.Find.Execute('<TEXT16C>', false, false, false, false, false,
           true, 1, false, text16c, 2);
  App.Selection.Find.Execute('<TEXT16D>', false, false, false, false, false,
           true, 1, false, text16d, 2);
  App.Selection.Find.Execute('<TEXT16E>', false, false, false, false, false,
           true, 1, false, text16e, 2);
  App.Selection.Find.Execute('<TEXT16F>', false, false, false, false, false,
           true, 1, false, text16f, 2);
  App.Selection.Find.Execute('<TEXT16G>', false, false, false, false, false,
           true, 1, false, text16g, 2);

  App.Selection.Find.Execute('<TEXT16H>', false, false, false, false, false,
           true, 1, false, text16h, 2);
  App.Selection.Find.Execute('<TEXT16I>', false, false, false, false, false,
           true, 1, false, text16i, 2);
  App.Selection.Find.Execute('<TEXT16J>', false, false, false, false, false,
           true, 1, false, text16j, 2);

//text17 см пункт 5 партийность
//text18 см пункт 5 партийность

//text19
  text19 := '';
//CONVICTIONS_DATE 	DATE not null, --Дата привлечения	Вводится с клавиатуры, видимое поле, обязательное для заполнения
//CONVICTIONS_MOTIVE	VARCHAR2(200) not null, --Причина привлечения	Вводится с клавиатуры, видимое поле, обязательное для заполнения
  sql_:='select CONVICTIONS_date||'' ''||CONVICTIONS_MOTIVE all_data'+
                ' from ok_convictions'+
                  where_pers +
                ' order by CONVICTIONS_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text19 = ''
    then Text19:= cdsTempSource.fieldbyname('all_data').asstring
    else Text19:= text19+#13+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text19 = ''
  then Text19:= 'судланмаган';

  App.Selection.Find.Execute('<TEXT19>', false, false, false, false, false,
           true, 1, false, text19, 2);




//text21 см text1 (где ФИО)
}

end;

procedure TBOKForm.DBLookupComboBox40CloseUp(Sender: TObject);
begin
//showmessage(cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring);

                    cdsSSOKPost_new.close;
                    with cdsSSOKPost_new.Params
                    do begin
                        clear;
                        if (headbranch_='09006')
                        then begin
                          mfo_category_type_code_VAR := getsqlresultpar('select mfo_category_type_code from ss_ok_mfo_category'+
                            ' where branch=:p_1',branch);
                          if varisnull(mfo_category_type_code_VAR)
                          then begin
                            mfo_category_type_code :='0';
                            showmessage('(25301)Укажите категорию филиала в халк банке.(заполните Справочник Категорий Филиалов)');
                          end else begin
                            mfo_category_type_code :=vartostr(mfo_category_type_code_VAR) ;
                          end;
                          CreateParam(ftString,'p_1' ,ptInput);
                          ParamByName('p_1').Value := 'A';
                          CreateParam(ftString,'p_4' ,ptInput);
                          ParamByName('p_4').Value := curbranch;
                          CreateParam(ftInteger,'p_5' ,ptInput);
                          ParamByName('p_5').Value := cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring;
                          CreateParam(ftString,'p_6' ,ptInput);
                          ParamByName('p_6').Value := mfo_category_type_code;
                        end else begin
                          CreateParam(ftString,'p_1' ,ptInput);
                          ParamByName('p_1').Value := 'A';
                          CreateParam(ftInteger,'p_2' ,ptInput);
                          ParamByName('p_2').Value := strToInt(BossLevel);
                          CreateParam(ftInteger,'p_3' ,ptInput);
                          ParamByName('p_3').Value := 4;
                          CreateParam(ftString,'p_4' ,ptInput);
                          ParamByName('p_4').Value := curbranch;
                          CreateParam(ftInteger,'p_5' ,ptInput);
                          ParamByName('p_5').Value := cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring;
                      end;
                    end;
            if (headbranch_='09006')
            then begin
               LoadData(cdsSSOKPost_new,'select a.post_code id, '+
                    ' a.post_code||'') ''||a.post_name name, a.post_code, a.post_name '+
                    ' from ss_ok_post a where'+
                    ' a.state_notes=:p_1'+ //''A'
                    ' and a.post_code in (select post_code from ok_stat where branch=:p_4'+
                      ' and department_code=:p_5'+ //edDepDown.text+
                    ' and post_code in (select post_code from ss_ok_post_category where mfo_category_type_code=:p_6)'+
                    ')',True);
            end else begin
               LoadData(cdsSSOKPost_new,'select a.post_code id, '+
                    ' a.post_code||'') ''||a.post_name name, a.post_code, a.post_name '+
                    ' from ss_ok_post a where'+
                    ' a.state_notes=:p_1'+ //''A'
                    ' and a.level_department_code in (:p_2,:p_3)'+ //('+BossLevel+',4)'+
                    ' and a.post_code in (select post_code from ok_stat where branch=:p_4'+
                      ' and department_code=:p_5'+ //edDepDown.text+
                    ')',True);

            end;
  if (cdsOKPersonal.State in [dsEdit, dsInsert])
  then begin
    cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring:='';
  end;

end;

procedure TBOKForm.ed_iias_birth_region_primChange(Sender: TObject);
begin
  if (ed_iias_str.text='860') and (ed_iias_birth_region_prim.text<>'')
  and (cdsOKPERSONAL.state in dseditmodes)
  then begin
    ed_iias_birth_region_prim.text:='';
    showmessage('Если Страна рождения '+DBLCB_iias_str.text +#13+
      ' то поле '+label194.caption+'('+cdsOKPERSONAL.FieldByName('cod_obl_prim').AsString+') должно быть пустое.'
    );
  end;

end;

procedure TBOKForm.ed_iias_birth_distr_primChange(Sender: TObject);
begin
  if (ed_iias_str.text='860') and (ed_iias_birth_distr_prim.text<>'')
  and (cdsOKPERSONAL.state in dseditmodes)
  then begin
    ed_iias_birth_distr_prim.text:='';
    showmessage('Если Страна рождения '+DBLCB_iias_str.text +#13+
      ' то поле '+label189.caption+'('+cdsOKPERSONAL.FieldByName('cod_place_birth_prim').AsString+') должно быть пустое.'
    );
  end;

end;

procedure TBOKForm.ed_iias_birth_region_primClick(Sender: TObject);
begin
  ed_iias_strChange(nil);
end;

procedure TBOKForm.ed_iias_birth_distr_primClick(Sender: TObject);
begin
  ed_iias_strChange(nil);
end;

procedure TBOKForm.ed_iias_live_region_primClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.ed_iias_live_distr_primClick(Sender: TObject);
begin
  ed_iias_live_strChange(nil);
end;

procedure TBOKForm.cdsOKPersonalAfterScroll(DataSet: TDataSet);
var is_boss:integer;
begin
//showmessage('AfterScroll');
(*подтверждение нужно, если сотрудник новый,
либо его текущая и/или будущая должность руководящие.

кнопка активна, если получено подтверждение на новую должность,
а сотрудник на нее еще не назначен или его текущая должность не руководящая.

кнопка активна, если текущая должность не руководящая,
но стоит проверка- назначение на руководящую должность без подтверждения невозможно.

пока сотрудник не назначен на новую должность,
она(должность) отсутствует в сведениях о работе, иначе ее необходимо оттуда удалить.
*)
//* showmessage('0)'+HeadBranch_+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE').asstring+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE_NEW').asstring+
//*   '/'+cdsokpersonal.FieldByName('POST_CODE').asstring+'/'+cdsokpersonal.FieldByName('POST_CODE_NEW').asstring+'/'+
//*   cdsokpersonal.FieldByName('GOSUBMIT_CODE').asstring+'/'+cdsokpersonal.FieldByName('STATUS_CODE').asstring='1');
  if (HeadBranch_ ='09006') and (cdsokpersonal.active)         // 08.11.2012 не стал включать-выключать кнопки в агро
  then begin
//* showmessage('1)'+HeadBranch_+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE').asstring+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE_NEW').asstring+
//*   '/'+cdsokpersonal.FieldByName('POST_CODE').asstring+'/'+cdsokpersonal.FieldByName('POST_CODE_NEW').asstring+'/'+
//*   cdsokpersonal.FieldByName('GOSUBMIT_CODE').asstring+'/'+cdsokpersonal.FieldByName('STATUS_CODE').asstring='1');
//showmessage('AfterScroll_'+cdsokpersonal.FieldByName('DEPARTMENT_CODE').asstring);
    IF ((    (cdsokpersonal.FieldByName('DEPARTMENT_CODE').asstring<>cdsokpersonal.FieldByName('DEPARTMENT_CODE_NEW').asstring)
         or (cdsokpersonal.FieldByName('POST_CODE').asstring<>cdsokpersonal.FieldByName('POST_CODE_NEW').asstring)
       )
    and (cdsokpersonal.FieldByName('GOSUBMIT_CODE').asstring='33'))
    then begin
//* showmessage('2)'+HeadBranch_+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE').asstring+'/'+cdsokpersonal.FieldByName('DEPARTMENT_CODE_NEW').asstring+
//*   '/'+cdsokpersonal.FieldByName('POST_CODE').asstring+'/'+cdsokpersonal.FieldByName('POST_CODE_NEW').asstring+'/'+
//*   cdsokpersonal.FieldByName('GOSUBMIT_CODE').asstring+'/'+cdsokpersonal.FieldByName('STATUS_CODE').asstring='1');

      if (cdsokpersonal.FieldByName('STATUS_CODE').asstring='1') // новый сотрудник
      then begin
        actAppointNew.Enabled := true;
        actAppoint.Enabled := false;
      end else begin
        actAppointNew.Enabled := false;
        actAppoint.Enabled := true;
      end;

    end else begin

//      is_boss:=getsqlresultpar('select count(*) from SS_OK_NCI son'+
//        ' where son.ok_id=:p_1 and son.NCI_ID=:p_2',cdsokpersonal.FieldByName('POST_CODE').asstring,'79');
//    is_submit_needed_:=1; -- 13.02.2012 требовать подтверждение для всех должностей
      is_boss :=1;

      if (is_boss>0)  // текущая должность руководящая
      or (cdsokpersonal.FieldByName('STATUS_CODE').asstring='1') // новый сотрудник
      then begin
        actAppointNew.Enabled := false;
        actAppoint.Enabled := false;
      end else begin
        actAppointNew.Enabled := true;
        actAppoint.Enabled := true;
      end;

    end;

  end;

end;

procedure TBOKForm.cdbgOK_PERSONALDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn;
  State: TGridDrawState);
var perekras:integer;
begin
  perekras:=0;

  if (cdsokpersonal.FieldByName('PASS_DATE_END').AsString<>'') // Паспорт Действителен До..
  then
  if (cdsokpersonal.FieldByName('PASS_DATE_END').AsDateTime < now)
  and ( strtoint(copy(cdsokpersonal.FieldByName('PASS_DATE_END').AsString,7,4))-
        strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
        <44)    // дата истечения паспорта меньше даты 45 летия сотрудника
  then begin
    perekras:=perekras+1;
  end;

  if (cdsokpersonal.FieldByName('REG_DATE_END').AsString<>'')
  then
  if (cdsokpersonal.FieldByName('REG_DATE_END').AsDateTime < now)
  then begin
    perekras:=perekras+1;
  end;

  if (cdsokpersonal.FieldByName('SROK_DATE').AsString<>'')
  then
  if (cdsokpersonal.FieldByName('SROK_DATE').AsDateTime < now+10)
  then begin
    perekras:=perekras+1;
  end;

  if (cdsokpersonal.FieldByName('TRUD_SOGL').AsString='1')
  then begin
    if (perekras>0)
    then begin
      if not (gdSelected in State) then
      begin
              cdbgOK_PERSONAL.Canvas.Font.Color := clLime;
              cdbgOK_PERSONAL.DefaultDrawColumnCell(Rect,DataCol,Column,State);
      end;
    end else begin
      if not (gdSelected in State) then
      begin  // если по трудовому 1-Да
              cdbgOK_PERSONAL.Canvas.Font.Color := clFuchsia; // если и перекрас и по трудовому
              cdbgOK_PERSONAL.DefaultDrawColumnCell(Rect,DataCol,Column,State);
      end;
    end;
  end else begin
    if (perekras>0)
    then begin
       if not (gdSelected in State) then
       begin
              cdbgOK_PERSONAL.Canvas.Font.Color := clOlive;
              cdbgOK_PERSONAL.DefaultDrawColumnCell(Rect,DataCol,Column,State);
      end;
    end;

  end;



end;

procedure TBOKForm.dsOKEducationDataChange(Sender: TObject; Field: TField);
begin

  if cdsOKEducation.FieldByName('education_end').AsString='1' // да
  then begin

    if DBEdit85.Text<>'' then DBEdit85.Text := '';
    DBEdit85.Enabled:=false;
    DBEdit74.Enabled:=true;
  end else begin
    DBEdit74.Enabled:=false;
    DBEdit85.Enabled:=true;
  end;

end;

procedure TBOKForm.actObiektivkaAgroUzExecute(Sender: TObject);
begin
 //
 Obiektivka23('2','pril_03_v2.doc');
end;

procedure TBOKForm.BitBtn139Click(Sender: TObject);
var dbName:string;
//db:TextFile;
//FileHandle:Integer;
begin


      cdsOK_diplom.Close;
      with cdsOK_diplom.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOkeducation.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkeducation.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOkeducation.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :='2'; // 2-диплом
      end;

       LoadData(cdsOK_diplom, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

     if cdsOK_diplom.RecordCount=0
     then begin
       showmessage('нет данных');
     end else begin
       if not DirectoryExists(ROOT_DIR+'OK\TEMP') then
       begin
         CreateDir(ROOT_DIR+'OK\TEMP');
       end;

       cdsOK_diplom.First;
       dbName:=ROOT_DIR+'OK\TEMP\'+cdsOK_diplom.FieldByName('file_name').AsString;
//showmessage(dbName);
       TBlobField(cdsOK_diplom.FieldByName('photo')).SaveToFile(dbName);

       OpenDlFile.FileName:=dbName;
       if OpenDlFile.Execute then
       begin
         ShellExecute(0, 'open', PChar(dbName), '', '', SW_SHOW);
       end;
     end;

end;

procedure TBOKForm.BtnAddlFileClick(Sender: TObject);
var ss, ss1, s:string; // , id
k, i:Integer;
begin

  if (cdsOkeducation.FieldByName('branch').AsString='')
  or (cdsOkeducation.FieldByName('id').AsString='')
  or (cdsOkeducation.FieldByName('personal_code').AsString='')
  then begin
    showmessage('(25331) Прежде чем прикрепить файлы укажите данные об образовании.');
  end else begin

      with TOpenDialog.Create(Self) do
       try
         if Execute then
         begin
           s:=FileName;
           k:=0;
           for i:=length(s) downto 1 do
           begin
            k:=k+1;
             if s[i]='\' then
             begin
              ss:=copy(s,length(s)-k+2,k-1);
              ss1:=ss;
              Break;
             end;
           end;

           if  (copy(FileName,Length(FileName)-3,4) <>'.pdf')
           and (copy(FileName,Length(FileName)-3,4) <>'.jpg')
           and (copy(FileName,Length(FileName)-3,4) <>'.JPG')
           and (copy(FileName,Length(FileName)-3,4) <>'.PDF')
           then begin
             showmessage('(25628)Требуется файл формата .pdf или .jpg а не '+copy(FileName,Length(FileName)-3,4));
           end else begin
              EditFileName.Text:=FileName;

              cdsOK_diplom.Close;
              with cdsOK_diplom.Params
              do begin
                  clear;
                  CreateParam(ftString,'p_1' ,ptInput);
                  ParamByName('p_1').Value := cdsOkeducation.FieldByName('branch').AsString;
                  CreateParam(ftString,'p_2' ,ptInput);
                  ParamByName('p_2').Value := cdsOkeducation.FieldByName('id').AsString;
                  CreateParam(ftString,'p_3' ,ptInput);
                  ParamByName('p_3').Value := cdsOkeducation.FieldByName('personal_code').AsString;
            CreateParam(ftString,'p_4' ,ptInput);
            ParamByName('p_4').Value :='2'; // 2-диплом
              end;
              LoadData(cdsOK_diplom, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4' );

             if cdsOK_diplom.RecordCount=0
             then begin
               cdsOK_diplom.Insert;
             end else begin
               cdsOK_diplom.Edit;
             end;

             cdsOK_diplom.FieldByName('ok_id').Value:=cdsOkeducation.FieldByName('id').AsString;
             cdsOK_diplom.FieldByName('priznak').Value:='2';
             cdsOK_diplom.FieldByName('personal_code').Value:=cdsOkeducation.FieldByName('personal_code').AsString;
             cdsOK_diplom.FieldByName('FILE_NAME').Value:=ss1;
             cdsOK_diplom.FieldByName('branch').Value:=cdsOkeducation.FieldByName('branch').AsString;
             (cdsOK_diplom.FieldByName('photo') as TBlobField).LoadFromFile(FileName);

             cdsOK_diplom.post;
           end;

         end;
       finally
         Free;
       end;

  end;

  if cdsOK_diplom.Active
  then cdsOK_diplom.Refresh;

end;

procedure TBOKForm.cdsOK_diplomAfterOpen(DataSet: TDataSet);
begin
  If dsOKEducation.DataSet.Active Then
  Begin
    cdsOK_diplom.MasterSource    := dsOKEducation;
    cdsOK_diplom.IndexFieldNames := 'branch;personal_code;ok_id';
    cdsOK_diplom.MasterFields    := 'branch;personal_code;id';
  End;

end;

procedure TBOKForm.PageControl3Change(Sender: TObject);
begin
      cdsOK_diplom.Close;
      with cdsOK_diplom.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOkeducation.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkeducation.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOkeducation.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :='2'; // 2-диплом
      end;

       LoadData(cdsOK_diplom, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

end;

procedure TBOKForm.BitBtn154Click(Sender: TObject);
begin
  PageControl3Change(nil);

end;

procedure TBOKForm.Obiektivka23(type_,file_name: string);
var App:      OLEVariant;
//  i,j:      integer;
  vid_education_,Text_i, Text_iB: string;
  Text1a,Text2a,Text3a,Text4a,Text5a,Text6a,Text7a,Text8a,Text9a,Text10a: string;
  Text11a, Text12a, Text13a, Text16: string;
//  Text17,Text18,Text19,Text20,
  ErMes, Text21,Text22: string;
  texth3, sql_,where_pers, where_pers_a : string;
  file_name_,text11,TextDD,TextMM,TextYYYY :string;

//  V: Variant;

// col, nn,
 k,i :integer;

// NumFormat,  DateFormat,
//  StrFormat: String;
//  first_string : boolean;
//  prev0,prev2 : string;
//  prev1 : string;
    Save_Cursor:TCursor;

begin

//  showmessage(tobject(sender).ClassName);
  ErMes := '';

  if cdsOKPersonal.FieldByName('education_title_code').AsString =''
  then begin
    erMes := erMes+'В данных сотрудника не указано Наименование образования сотрудника!'+#13;
  end;

  if ErMes<>''
  then begin
    showmessage(ErMes);
    exit;
  end;

  Save_Cursor := Screen.Cursor;
  Screen.Cursor := crHourGlass;    { Show hourglass cursor }


 TRY
    { Do some lengthy operation }

   if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1) // не связано с подтв. в ГО
   then begin
     App := PrepareOle( file_name ,'Word.Application'
        );
     file_name_  := file_name;
   end else begin
     App := PrepareOle( file_name ,'Word.Application'
        );
     file_name_  := file_name;
   end;

//  App := CreateOleObject('Word.Application');
//App.visible:=true;
//  App.Documents.Add('"C:\NCI Bank\Ok\Templates\pril03.doc"');


//  App.Selection.HomeKey(6);
//  App.Selection.Find.ClearFormatting;

  If VarIsNull(App) Then
  begin
    showmessage('Приложение ''Word'' не может открыть файл C:\NCI Bank\Ok\Templates\ '+file_name_ +#10#13+
           ' и не найден файл '+GetCurrentDir_templates+'\'+file_name_+#10#13+
    'Пожалуйста проверьте наличие этого файла.' );
    Exit;
  end;
//App.Visible:=true;
  try
    where_pers := ' WHERE branch=:p_1'+ // '''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                  ' AND personal_code=:p_2'; //+cdsOKPersonal.FieldByName('personal_code').AsString;
    where_pers_a := ' WHERE a.branch=:p_1'+ // ''+cdsOKPersonal.FieldByName('branch').AsString+''''+
                    ' AND a.personal_code=:p_2'; //+cdsOKPersonal.FieldByName('personal_code').AsString;

    sql_:='select to_char(a.in_office_date,''yyyy'') column0, to_char(a.in_office_date,''dd'') column_day,'+
                         ' to_char(a.in_office_date,''mm'') column1,'+
//                         '  ESTABLISHED_POST column3,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'' ''||ESTABLISHED_POST,1,255) column3'+
                         ' FROM ok_period a '+
                         ' WHERE a.branch=:p_1'+
                    ' AND a.personal_code=:p_2'+
                         ' and a.in_office_date='+
                         ' (select max(in_office_date) from ok_period '+
                         ' WHERE branch=:p_3'+
                    ' AND personal_code=:p_4)';
    ErMes:='не удалось получить сведения о работе';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);

    App.Selection.Find.Execute('<TEXTH1>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('column0').AsString, 2);

    App.Selection.Find.Execute('<TEXTH2>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('column_day').AsString +' '+ toMonthName(cdsTempSource.FieldByName('column1').AsString), 2);

(*
    sql_:='select level, d.department_name name_, d.department_code,'+
        ' d.high_dep_code from ss_ok_department d'+
        ' connect by d.department_code = prior  d.high_dep_code'+
//        ' start with d.department_code='+cdsOKPersonal.FieldByName('department_code').AsString;
        ' start with d.department_code=:p_1';
  try
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('department_code').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    While not cdsTempSource.Eof do
    Begin
      texth3:= cdsTempSource.FieldByName('name_').AsString+' '+texth3;
      cdsTempSource.next;
    End;
  except
      texth3:=' не указано в данных сотрудника!';
  end;
    App.Selection.Find.Execute('<TEXTH4>', false, false, false, false, false,
           true, 1, false, cdsTempSource.FieldByName('column3').AsString, 2);
*)
    texth3:=cdsTempSource.FieldByName('column3').AsString;
    App.Selection.Find.Execute('<TEXTH3>', false, false, false, false, false,
           true, 1, false, texth3, 2);







// ЭТО РАБОТАЕТ !!!!

    App.Selection.Find.Execute('<FAMILY1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('family').AsString, 2);

    App.Selection.Find.Execute('<NAME1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('First_Name').AsString, 2);

    App.Selection.Find.Execute('<PATRONYMIC1>', false, false, false, false, false,
           true, 1, false, cdsOKPersonal.FieldByName('Patronymic').AsString, 2);

    try
      cdsOKPhoto.close;
      with cdsOKPhoto.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '1';
      end;
      LoadData(cdsOKPhoto, SQL_OKPhoto+where_pers + ' and (priznak is null or priznak=:p_3)');

      if not cdsOKPhoto.IsEmpty
      then begin
//        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
  //      App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg', 2,0 ,15,30);
        (cdsOKPhoto.FieldByName('photo') as TBlobField).SaveToFile('C:\NCI Bank\Ok\Temp\photo.jpg');
        App.ActiveDocument.Shapes.AddPicture('C:\NCI Bank\Ok\Temp\photo.jpg',  true,true, 403,13);

         cdsOKPhoto.Close;
      end;
    except
    end;
//text1a

    DateTimeToString(TextDD, 'dd', cdsOKPersonal.FieldByName('birthday').AsDateTime);
    DateTimeToString(TextMM, 'mm', cdsOKPersonal.FieldByName('birthday').AsDateTime);
    DateTimeToString(TextYYYY, 'yyyy', cdsOKPersonal.FieldByName('birthday').AsDateTime);
//    Text1a := cdsOKPersonal.FieldByName('birthday').AsString;
    Text1a := TextDD+'.'+TextMM+'.'+TextYYYY;

    App.Selection.Find.Execute('<TEXT1A>', false, false, false, false, false,
           true, 1, false, Text1a, 2);

//DateTimeToString(var Result: string; const Format: string; DateTime: TDateTime);


//text2a
  text2a := '';
  sql_:='SELECT nationality_name '+
                         ' FROM ss_ok_nationality'+
                         ' where nationality_code=:p_1'+ //cdsOKPersonal.FieldByName('nationality_code').AsString+
                         ' and state_notes=:p_2'; // +#39+'A'+#39;
  ErMes:='не удалось получить сведения о национальности';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('nationality_code').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  LoadData(cdsTempSource,sql_, True);

  text2a := cdsTempSource.FieldByName('nationality_name').AsString;

  App.Selection.Find.Execute('<TEXT2A>', false, false, false, false, false,
           true, 1, false, text2a, 2);

//text3a
  sql_:='SELECT education_title_name '+
                         ' FROM ss_ok_education_title'+
                         ' where education_title_code=:p_1'+ //cdsOKPersonal.FieldByName('education_title_code').AsString+
                         ' and state_notes=:p_2'; // +#39+'A'+#39;
  try
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('education_title_code').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
    LoadData(cdsTempSource,sql_, True);
    Text3a:= cdsTempSource.fieldbyname('education_title_name').asstring;
  except
    Text3a:='';
  end;

  App.Selection.Find.Execute('<TEXT3A>', false, false, false, false, false,
           true, 1, false, text3a, 2);

//text4a
  if cdsOKPersonal.FieldByName('region_id').IsNull
  then begin
    text4a := cdsOKPersonal.FieldByName('birthplace').AsString;
  end else begin
    ErMes:='не удалось получить сведения о месте рождения';
    sql_:='SELECT region_nam FROM s_region'+
                         ' where region_id=:p_1'; //'''+cdsOKPersonal.FieldByName('region_id').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('region_id').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4a := cdsTempSource.FieldByName('region_nam').AsString;

    sql_:='SELECT distr_name FROM s_distr'+
                         ' where distr=:p_1'; //'''+cdsOKPersonal.FieldByName('distr').AsString+'''';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('distr').AsString;
      end;
    LoadData(cdsTempSource,sql_, True);
    text4a := text4a + ' '+cdsTempSource.FieldByName('distr_name').AsString;
  end;

    App.Selection.Find.Execute('<TEXT4A>', false, false, false, false, false,
           true, 1, false, text4a, 2);
//text5a
  ErMes:='не удалось получить сведения о партии';
  sql_:='select b.party_name'+
                ' from ok_party a, ss_ok_party b'+
                  where_pers_a +
                ' and a.party_code = b.party_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.party_date';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;

  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text5a = ''
    then Text5a:= cdsTempSource.fieldbyname('party_name').asstring
    else Text5a:= text5a+','+cdsTempSource.fieldbyname('party_name').asstring;
    cdsTempSource.next;
  End;

  if text5a='' then text5a:='йук';
  App.Selection.Find.Execute('<TEXT5A>', false, false, false, false, false,
           true, 1, false, text5a, 2);

//text6a
//text7a
  text6a := '';
  text7a := '';

  if (HeadBranch_ ='00883') or (HeadBranch_ ='09006') // не связано с подтв. в ГО
  or (HeadBranch_ ='00394') or (HeadBranch_ ='09004') // не связано с подтв. в ГО
  or (HeadBranch_ ='00444') or (HeadBranch_ ='09014') // не связано с подтв. в ГО
  then begin
  // народный банк- агро банк - ипак йули банк
    sql_:='select to_char(a.END_DATE)||'' й. ''||b.institution_name all_data0,'+
                ' a.profession_personal all_data1,'+
                ' a.vid_education_code'+
                ' from ok_education a, ss_ok_institution b'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.end_date';
  end else begin
    sql_:='select b.institution_name all_data0,'+
                ' a.profession_personal all_data1,'+
                ' a.vid_education_code'+
                ' from ok_education a, ss_ok_institution b'+
                  where_pers_a +
                ' and a.institution_code = b.institution_code'+
                ' and b.state_notes=:p_3'+ //#39+'A'+#39+
                ' order by a.end_date';
  end;
  ErMes:='не удалось получить сведения об учебном заведении';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
  LoadData(cdsTempSource,sql_, True);


  While not cdsTempSource.Eof do
  Begin
    if cdsTempSource.fieldbyname('vid_education_code').asstring=''
    then begin
      vid_education_:=' ';
    end else begin
      vid_education_:=getsqlresultpar('select vid_education_name from ss_ok_vid_education where vid_education_code=:p_1',
        cdsTempSource.fieldbyname('vid_education_code').asstring);
    end;

    if text6a = ''
    then Text6a:= cdsTempSource.fieldbyname('all_data0').asstring+vid_education_
    else Text6a:= text6a+', '+#13+cdsTempSource.fieldbyname('all_data0').asstring+vid_education_;
    if text7a = ''
    then Text7a:= cdsTempSource.fieldbyname('all_data1').asstring
    else Text7a:= text7a+', '+#13+cdsTempSource.fieldbyname('all_data1').asstring ;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT6A>', false, false, false, false, false,
           true, 1, false, text6a, 2);
  App.Selection.Find.Execute('<TEXT7A>', false, false, false, false, false,
           true, 1, false, text7a, 2);
////////////

  text16 := 'муносабати йук';
(*  text16a := '';
  text16b := '';
  text16c := '';
  text16d := '';
  text16e := '';
  text16f := '';
  text16g := '';
*)
  sql_:= 'select ok_service.get_staffname(a.staff_code) staff_show,'+
         ' ok_service.get_typeforcename(a.type_force_code) type_force_show, '+
         ' ok_service.get_categoryarmyname(a.CATEGORY_ARMY_CODE) CATEGORY_ARMY,'+
         ' a.SPECREG_NUMBER, a.NUMBER_VUS, b.fitness_army_type, a.NAME_ARMY_OFFICE,'+
         ' ok_service.get_armytype(a.army_code) army_type, '+
         ' ok_service.get_militaryrankname(a.military_rank_code) MILITARY_RANK, '+
         ' ok_service.get_armygroupname(a.army_group_code) ARMY_GROUP'+
                ' from ok_army a, ss_ok_fitness_army b'+
                 where_pers_a +
                ' and a.fitness_army_code= b.fitness_army_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource, sql_, True);

(*  Text16a := cdsTempSource.fieldbyname('staff_show').asstring ;
  text16b := cdsTempSource.fieldbyname('type_force_show').asstring ;

  Text16c := cdsTempSource.fieldbyname('CATEGORY_ARMY').asstring ;
  Text16d := cdsTempSource.fieldbyname('SPECREG_NUMBER').asstring ;
  Text16e := cdsTempSource.fieldbyname('NUMBER_VUS').asstring  ;
  Text16f := cdsTempSource.fieldbyname('fitness_army_type').asstring ;
  Text16g := cdsTempSource.fieldbyname('NAME_ARMY_OFFICE').asstring ;

  text16i := cdsTempSource.fieldbyname('army_type').asstring ;
  Text16j := cdsTempSource.fieldbyname('MILITARY_RANK').asstring  ;
  Text16h := cdsTempSource.fieldbyname('ARMY_GROUP').asstring ;
  Text16 :=  Text16j+' '+text16i; //  MILITARY_RANK   army_type
*)
  while not cdsTempSource.Eof
  do begin
    Text16 :=  cdsTempSource.fieldbyname('MILITARY_RANK').asstring+' '+
             cdsTempSource.fieldbyname('army_type').asstring;
    cdsTempSource.Next;
  end;

//text16
  // группа учета, категория учета,
//ARMY_GROUP_CODE
//CATEGORY_ARMY_CODE
//MILITARY_RANK_CODE
//STAFF_CODE
//TYPE_FORCE_CODE

  if text16=''
  then begin
    text16 :='муносабати йук';
  end;

  App.Selection.Find.Execute('<TEXT16>', false, false, false, false, false,
           true, 1, false, text16, 2);

////////////

//text8a
// ученые степени
  sql_:='select b.degree_name all_data'+
                ' from ok_degree a, ss_ok_degree b'+
                  where_pers_a +
                ' and a.degree_code= b.degree_code'+
                ' and b.state_notes='+#39+'A'+#39+
                ' order by a.degree_date';
  ErMes:='не удалось получить сведения об ученой степени';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if text8a = ''
    then Text8a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text8a:= text8a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

//
  if text8a='' then text8a:='йук';
  App.Selection.Find.Execute('<TEXT8A>', false, false, false, false, false,
           true, 1, false, text8a, 2);

//text9a
  text9a := ''; //
  ErMes:='не удалось получить сведения об ученом звании';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
  LoadData(cdsTempSource,'select b.academic_name all_data'+
                ' from ok_academic a,ss_ok_academic b '+
                  where_pers_a +
                ' and a.academic_code=b.academic_code'+
                ' and b.state_notes=:p_3'+ //#39+'A'+#39+
                ' order by a.academic_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text9a = ''
    then Text9a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text9a:= text9a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  App.Selection.Find.Execute('<TEXT9A>', false, false, false, false, false,
           true, 1, false, text9a, 2);

//text10a
  text10a := '';
  ErMes:='не удалось получить сведения об иностранных языках';
  if type_='4'
  then begin
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
      end;
    LoadData(cdsTempSource,'select b.language_name||'' тили '' all_data'+
                ' from ok_language a, ss_ok_language b, ss_ok_level_language c'+
                  where_pers_a +
                ' and a.language_code= b.language_code'+
                ' and a.level_code=c.level_language_code'+
                ' and c.state_notes=:p_3'+ //#39+'A'+#39+
                ' and b.state_notes=:p_4'+ //#39+'A'+#39+
                ' order by a.language_code', True);
  end else begin
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;

          CreateParam(ftString,'pp_3' ,ptInput);
          ParamByName('pp_3').Value := '%СВОБОД%';
          CreateParam(ftString,'pp_4' ,ptInput);
          ParamByName('pp_4').Value := '%ЭРКИН%';

          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
      end;
    LoadData(cdsTempSource,'select b.language_name||'' тили '' all_data'+
                ' from ok_language a, ss_ok_language b, ss_ok_level_language c'+
                  where_pers_a +
                ' and a.language_code= b.language_code'+
                ' and (upper(c.level_language_name) like :pp_3'+
                     ' or upper(c.level_language_name) like :pp_4)'+
                ' and a.level_code=c.level_language_code'+
                ' and c.state_notes=:p_3'+ //#39+'A'+#39+
                ' and b.state_notes=:p_4'+ //#39+'A'+#39+
                ' order by a.language_code', True);
  end;

  While not cdsTempSource.Eof do
  Begin
    if text10a = ''
    then Text10a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text10a:= text10a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text10a='' then text10a:='билмайди';
  App.Selection.Find.Execute('<TEXT10A>', false, false, false, false, false,
           true, 1, false, text10a, 2);

//text11a
  text11a := '';
  ErMes:='не удалось получить сведения о зарубежных поездках';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,'select voyage_date||'' ''||voyage_land all_data'+
                ' from ok_voyage'+
                  where_pers +
                ' order by voyage_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text11a = ''
    then Text11a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text11a:= text11a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text11a='' then text11a:='булмаган';

  App.Selection.Find.Execute('<TEXT11A>', false, false, false, false, false,
           true, 1, false, text11a, 2);

//text12a
  text12a := ''; // Гос премии ok_premium

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,'select premium_name all_data'+
                ' from ok_premium'+
                  where_pers +
                ' order by premium_date', True);

  While not cdsTempSource.Eof do
  Begin
    if text12a = ''
    then Text12a:= cdsTempSource.fieldbyname('all_data').asstring
    else Text12a:= text12a+','+cdsTempSource.fieldbyname('all_data').asstring;

    cdsTempSource.next;
  End;

  if text12a='' then text12a:='йук';

  App.Selection.Find.Execute('<TEXT12A>', false, false, false, false, false,
           true, 1, false, text12a, 2);

//text13a
  text13a := '';

  ErMes:='не удалось получить сведения об избрании';
  sql_:='select a.election_date_begin, a.election_date_end,b.ELECTION_name all_data'+
        ' from ok_election a, ss_ok_election b '+
        where_pers+
                ' and a.election_code= b.election_code'+
                ' and b.state_notes='+#39+'A'+#39+
        ' order by a.election_date_begin';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin
    if cdsTempSource.fieldbyname('election_date_end').asstring=''
    then begin
      if text13a = ''
      then Text13a:=
        cdsTempSource.fieldbyname('election_date_begin').asstring+' й. -  х.в. - '+cdsTempSource.fieldbyname('all_data').asstring
      else Text13a:= text13a+','+
        cdsTempSource.fieldbyname('election_date_begin').asstring+' й. -  х.в. - '+cdsTempSource.fieldbyname('all_data').asstring;
    end else begin
      if text13a = ''
      then Text13a:=
        cdsTempSource.fieldbyname('election_date_begin').asstring+' й. - '+
        cdsTempSource.fieldbyname('election_date_end').asstring+' й. - '+cdsTempSource.fieldbyname('all_data').asstring
      else Text13a:= text13a+','+
        cdsTempSource.fieldbyname('election_date_begin').asstring+' й. - '+
        cdsTempSource.fieldbyname('election_date_end').asstring+' й. - '+cdsTempSource.fieldbyname('all_data').asstring
    end;

    cdsTempSource.next;

  End;

  if text13a='' then text13a:='сайланмаган';
  App.Selection.Find.Execute('<TEXT13A>', false, false, false, false, false,
           true, 1, false, text13a, 2);

//text14a
// Отчет сформирован: (убрал)
//  App.Selection.Find.Execute('<TEXT14A>', false, false, false, false, false,
//           true, 1, false, DateToStr(Date), 2);


  text_i := '';
  text_iB := '';
  ErMes:='сведения о работе (Мехнат фаолияти)';

  if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or (1=1)  // не связано с подтв. в ГО
  then begin
// капитал-банку дату показывать день-месяц-год
    if type_='2'
    then begin
      sql_:='select to_char(IN_OFFICE_DATE,''dd.mm.yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''dd.mm.yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'' ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
    end;
    if (type_='3') or (type_='4')
    then begin
      sql_:='select to_char(IN_OFFICE_DATE,''mm.yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''mm.yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'' ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
    end;
  end else begin
    if type_='2'
    then begin
      sql_:='select to_char(IN_OFFICE_DATE,''yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'' ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
    end;
    if (type_='3') or (type_='4')
    then begin
      sql_:='select to_char(IN_OFFICE_DATE,''mm.yyyy'') IN_OFFICE,'+
        'to_char(OUT_OFFICE_DATE,''mm.yyyy'') OUT_OFFICE,'+
        ' substr(OFFICE_NAME ||'' ''||ESTABLISHED_department ||'' ''||ESTABLISHED_POST,1,255) column2'+
        ' FROM ok_period'+
        where_pers+' order by in_office_date';
    end;
  end;
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

//  row:=1;
//  sql_ := 'App.Selection.GoTo(2, 1, 4, '''');';

//  App.Selection.SelectRow;
  App.Selection.Find.Execute('xxxx-xxxx йй. - <xxxxxxx>',
        EmptyParam, true,
                          EmptyParam, EmptyParam, EmptyParam,
                          EmptyParam, EmptyParam, EmptyParam,
                          EmptyParam, EmptyParam, EmptyParam,
                          EmptyParam, EmptyParam, EmptyParam);

  App.Selection.Copy;



  While not cdsTempSource.eOF do
    begin

      if cdsTempSource.Fields[1].AsString <> ''
      then begin
        text21 := cdsTempSource.Fields[0].AsString+'-'+cdsTempSource.Fields[1].AsString+ ' йй. - ';
        text22 := cdsTempSource.Fields[2].AsString;
//        App.Selection.Find.Execute('xx.xxxx-xx.xxxx йй. - <xxxxxxx>', false, false, false, false, false,
//                                         true, 1, false, text22+text21, 1);

        App.Selection.typetext(text21+text22+#10);

//        App.Selection.Paste;

      end else begin
        text21 := cdsTempSource.Fields[0].AsString+' й. -  х.в.  - ';
        text22 := cdsTempSource.Fields[2].AsString;
//        App.Selection.Find.Execute('xx.xxxx-xx.xxxx йй. - <xxxx'+#13+'xxx>', false, false, false, false, false,
//                                         true, 1, false, text22+text21, 1);

//        App.Selection.Paste;
        App.Selection.typetext(text21 +text22+#10);

      end;

      cdsTempSource.next;
    end;


// до этой команды приложение word работает в фоновом режиме

//  App.Visible:=true;

//  V.Visible:=true;


//   if (HeadBranch_ ='00974') or (HeadBranch_ ='09049') // or     // не связано с подтв. в ГО
   if (1=1)
   then begin
//text11
  text11 := '';
  k:=11;
  sql_:='select b.relation_name,a.RELATION_FAMILY ||'' ''||a.RELATION_NAME ||'' ''||'+
                ' a.RELATION_PATRONYMIC,'+
                ' a.RELATION_BIRTHDAY||'' йил ''||'+
                 'decode(COD_OBL_birth,null,nvl(COD_OBL_BIRTH_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_birth))||'' ''||'+
                 'decode(COD_CITY_birth,null,nvl(COD_CITY_BIRTH_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY_birth))'+
//                 '||'' ''||nvl(a.RELATION_BIRTHPLACE,'' ''),'+
                 ','+
                ' nvl(a.RELATION_OFFICE,'' '')||'' ''||nvl(a.RELATION_POST,'' '') ,'+
                 'decode(COD_OBL_LIVE,null,nvl(COD_OBL_LIVE_PRIM,'' ''),ok_service.GET_REGIONNAME(COD_OBL_LIVE))||'' ''||'+
                 'decode(COD_CITY,null,nvl(COD_CITY_PRIM,'' ''),ok_service.GET_DISTRNAME(COD_CITY))||'' ''||'+
                'nvl(a.RELATION_HOME_ADDRESS,'' '')'+
                ' from ok_relation a, ss_ok_relation b'+
                  where_pers_a +
                ' and a.relation_code=b.relation_code'+
                ' order by a.relation_code';
      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKPersonal.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKPersonal.FieldByName('personal_code').AsString;
      end;
  LoadData(cdsTempSource,sql_, True);

  While not cdsTempSource.Eof do
  Begin

    for i:=0 to 4
    do begin
      Text11:= cdsTempSource.fields[i].asstring;
//            '|'+cdsTempSource.fieldbyname('rabota').asstring+
//            '|'+cdsTempSource.fieldbyname('RELATION_HOME_ADDRESS').asstring;
      App.Selection.Find.Execute('<TEXT11'+IntToStr(k)+'>', false, false, false, false, false,
            true, 1, false, text11, 2);
      inc(k);
    end;
    cdsTempSource.next;

  End;

  for i:= k to 114
  do begin
      App.Selection.Find.Execute('<TEXT11'+IntToStr(i)+'>', false, false, false, false, false,
            true, 1, false, ' ', 2);

  end;
//text11:=copy(text11,1,255);
//showmessage('text11 '+text11);

   end;

   App.visible:=true;
   App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\'+
            cdsOKPersonal.FieldByName('family').AsString +' '+
            cdsOKPersonal.FieldByName('First_Name').AsString+' '+
            cdsOKPersonal.FieldByName('Patronymic').AsString+
        '.doc"');

 except on e:exception
   do begin
//  App.ActiveDocument.SaveAs('"C:\NCI Bank\Ok\Templates\temp.doc"');
     App.Application.Quit(false); // выход из ворда совсем без сохранения
     showmessage(ermes+#13+sql_+#13+e.message);
//  App.Application.Quit(true); // выход из ворда с сохранением
//  V.Quit(false); // выход из ексцеля совсем без сохранения
     raise;
   end;
 end;

  App := unassigned;
//  V := unassigned;
//        App.Selection.EndKey(6);
//    App.ActiveDocument.Range.InsertAfter('one' +#9+ 'two' +#9+ 'three'+#10);
//    App.ActiveDocument.Range.ConvertToTable(Separator:=Chr(9), NumRows:=1, NumColumns:=3);

 FINALLY
    Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.Button9Click(Sender: TObject);
begin
 Obiektivka23('3','pril_03_v3.doc');

end;

procedure TBOKForm.BitBtn136Click(Sender: TObject);
begin
  PrintTabel('30');
end;

procedure TBOKForm.BitBtn166Click(Sender: TObject);
begin
  PrintTabel('15');

end;

procedure TBOKForm.bbSaveIIASClick(Sender: TObject);
begin
  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006')  or (HeadBranch_='09004') or (HeadBranch_='09049')) //  подтв. в ГО
  then begin
//если халк то
    cdsOKPersonal.cancel;
    showmessage('(25647)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin
// проверка полей со страницы ИИАС
    IIAS_TabSheet_Check(1);
  end;
end;

procedure TBOKForm.IIAS_TabSheet_Check(num_: integer);
var z: integer;
 sql_,ErMessage: string;
 QuantityPost_ , QuantityPostReal_ : integer;
 text_f : TextFile;
begin

  if not (cdsOKPersonal.State in dseditmodes)
  then begin
    cdsOKPersonal.edit;
  end;

  ErMessage:='';

  if  ( cdsOKPersonal.FieldByName('spec_ikki').AsString='')
  then begin
    ErMessage := ErMessage+' "* Наличие второй специальности" ';
  end else begin

  end;

  if  ( cdsOKPersonal.FieldByName('nationality_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Национальность" ';
  end;

  if  ( cdsOKPersonal.FieldByName('FAMILY').AsString='')
  then begin
    ErMessage := ErMessage+' " * Фамилия" ';
  end;

  if  ( cdsOKPersonal.FieldByName('FIRST_NAME').AsString='')
  then begin
    ErMessage := ErMessage+' " * Имя" ';
  end;



        if (cdsOKPersonal.fieldbyname('cod_distr_uvd').asstring='')
        and (cdsOKPersonal.fieldbyname('cod_distr_prim').asstring='')
        then ErMessage := ErMessage+' "(25609)Укажите * Код района, подразделением УВД которого выдан паспорт"  или примечание';


    sql_ := 'select count(id) from ok_personal where branch=:p_1'+ //cdsOKPERSONAL.FieldByName('branch').AsString+
        ' and tabno=:p_2'+ //cdsOKPERSONAL.FieldByName('tabno').AsString+
        ' and personal_code<>:p_3'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
    try
      z := getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('branch').AsString,
          cdsOKPERSONAL.FieldByName('tabno').AsString,
          cdsOKPERSONAL.FieldByName('personal_code').AsString
      );
      if (z<>0)
      then begin
        ErMessage := ErMessage+#13+#13+'Табельный номер '+cdsOKPERSONAL.FieldByName('tabno').AsString+' уже используется!'+#13+' Измените табельный номер и сохраните данные.';
//        Showmessage(ErMessage);
//        exit;
      end;
    except
      showmessage('Для ввода нового сотрудника перейдите в режим "Таблица" и нажмите кнопку "Новый". ');
      cdsOKPERSONAL.cancel;
      exit;
    end;

// нельзя ставить статус 4-уволен
    if (OldStatus<>'4') and (cdsOKPERSONAL.FieldByName('status_code').AsString='4')
    then begin
        ErMessage := ErMessage+#13+#13+'Чтобы перевести статус сотрудника в состояние "Уволен" используйте кнопку "Увольнение".';
//        Showmessage(ErMessage);
//      exit;
    end;

  if (cdsOKPersonal.State in [dsEdit, dsInsert])
  then begin
    if (HeadBranch_='09006') and    // не связано с подтв. в ГО
      (cdsOKPersonal.FieldByName('passport_type_code').AsInteger <> 1)
    then begin
      cdsOKPersonal.FieldByName('passport_type_code').AsInteger := 1;
    end;
    cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString :=cdsOKPERSONAL.FieldByName('cod_obl_live').AsString ;
    cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_DISTR').AsString :=    cdsOKPERSONAL.FieldByName('cod_distr_live').AsString ;  end;

// проверка полей со страницы ИИАС
  if (cdsOKPERSONAL.FieldByName('status_code').AsString<>'2')
  then begin
//    cdsOKPERSONAL.FieldByName('special_code').AsString:='';
  end else begin
    IF num_<>2
    THEN BEGIN
     if HeadBranch_<>'09006' // временно(т.е. навсегда) отключено в халке   // не связано с подтв. в ГО
     then begin
      QuantityPost_     :=-1;
      QuantityPostReal_ :=-1;

      try
      sql_ :=  'select ok_service.get_QuantityPost(:p_1,:p_2,:p_3,:p_4) from dual'   ;
      QuantityPost_ := GetSQLResultpar(sql_,
        cdsOKPERSONAL.FieldByName('branch').AsString ,
        cdsOKPERSONAL.FieldByName('department_code').AsString ,
        cdsOKPERSONAL.FieldByName('post_code').AsString ,
        cdsOKPERSONAL.FieldByName('special_code').AsString
      );

      sql_ := 'select ok_service.get_QuantityPostReal(:p_1,:p_2,:p_3,:p_4) from dual'   ;

      QuantityPostReal_ := GetSQLResultpar(sql_,
        cdsOKPERSONAL.FieldByName('branch').AsString ,
        cdsOKPERSONAL.FieldByName('department_code').AsString ,
        cdsOKPERSONAL.FieldByName('post_code').AsString ,
        cdsOKPERSONAL.FieldByName('special_code').AsString
      );

      except on e:exception
        do begin
          ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!'+#13+
          sql_+#13+e.message;
        end;
      end;

      if QuantityPost_ =-1 then
        ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!';

      if (QuantityPostReal_ >=QuantityPost_)
      and (OldSpecial<>cdsOKPERSONAL.FieldByName('special_code').AsString)
      then
        ErMessage := ErMessage+ ' В штатном расписании указано '+inttostr(QuantityPost_)+
          ' рабочих мест по указанной специализации. Фактически назначено '+
            inttostr(QuantityPostReal_)+' сотрудников. Операция прервана!';

      end;
     end; 
    END;

  if HeadBranch_<>('09049')
  then begin
    if ( cdsOKPersonal.FieldByName('Education_Title_CODE').AsString='')
    then begin
      ErMessage := ErMessage+' "* Образование  Сотрудника" ';
    end;
  end;
  
  if  ( cdsOKPersonal.FieldByName('bank_spec').AsString='')
  then begin
    ErMessage := ErMessage+' "Наличие банковской специальности *" ';
  end;


  if  ( cdsOKPersonal.FieldByName('is_boss').AsString='')
  then begin
    ErMessage := ErMessage+' "Входит в руководящий состав *" ';
  end;

  if  ( cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='')
  then begin
    ErMessage := ErMessage+' "Гражданство" ';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна Гражданство '+cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString+' нет в справочнике" ';
    end;
    if  ( cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='860')
    then begin
      if  ( cdsOKPersonal.FieldByName('cod_distr_uvd').AsString='')
      then  ErMessage := ErMessage+' "(25723)* Код района, подразделением УВД которого выдан паспорт" ';
    end else begin
      if  ( cdsOKPersonal.FieldByName('cod_distr_prim').AsString='')
      then  ErMessage := ErMessage+' "(25726)* Примечание к Код района, подразделением УВД которого выдан паспорт" ';
    end;
  end;


  if  ( cdsOKPersonal.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
  end;

  if  ( cdsOKPersonal.FieldByName('cod_str_birth').AsString='')
  then begin
    ErMessage := ErMessage+' "Страна рождения" ';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOKPersonal.FieldByName('cod_str_birth').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна рождения '+cdsOKPersonal.FieldByName('cod_str_birth').AsString+' нет в справочнике" ';
    end;
  end;

  if (cdsOKPersonal.FieldByName('cod_str_birth').AsString='860')
  then begin
    if ( cdsOKPersonal.FieldByName('region_id').AsString='')
    Then ErMessage := ErMessage+' "Место рождения сотрудника (область)" ';
    If ( cdsOKPersonal.FieldByName('distr').AsString=''    )
    Then ErMessage := ErMessage+' "Место рождения сотрудника (район/город)" ';
  end else begin
    if ( cdsOKPersonal.FieldByName('cod_obl_prim').AsString='')
    Then ErMessage := ErMessage+' "Место рождения сотрудника (область-примечание)" ';
    If ( cdsOKPersonal.FieldByName('cod_place_birth_prim').AsString=''    )
    Then ErMessage := ErMessage+' "Место рождения сотрудника (район/город-примечание)" ';
  end;

  if  ( cdsOKPersonal.FieldByName('cod_str_live').AsString='')
  then begin
    ErMessage := ErMessage+' " * Страна проживания" ';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOKPersonal.FieldByName('cod_str_live').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна проживания '+cdsOKPersonal.FieldByName('cod_str_live').AsString+' нет в справочнике" ';
    end;
  end;

  if (cdsOKPersonal.FieldByName('cod_str_live').AsString='860')
  then begin
    if ( cdsOKPersonal.FieldByName('cod_obl_live').AsString='')
    Then ErMessage := ErMessage+' "Место проживания сотрудника (область)" ';
    If ( cdsOKPersonal.FieldByName('cod_distr_live').AsString=''    )
    Then ErMessage := ErMessage+' "Место проживания сотрудника (район/город)" ';
  end else begin
    if ( cdsOKPersonal.FieldByName('cod_obl_live_prim').AsString='')
    Then ErMessage := ErMessage+' "Место проживания сотрудника (область-примечание)" ';
    If ( cdsOKPersonal.FieldByName('cod_distr_live_prim').AsString=''    )
    Then ErMessage := ErMessage+' "Место проживания сотрудника (район/город-примечание)" ';
  end;

  if  ( cdsOKPersonal.FieldByName('check_kfs').AsString='')
  then begin
    ErMessage := ErMessage+' "Резерв руководящего состава *" ';
  end;

  if (cdsokpersonal.fieldbyname('gender_code').asstring='1')
  and (not cdsokpersonal.fieldbyname('maiden_family').IsNull)
  then begin
    ErMessage := ErMessage+' "Нельзя ввести девичью фамилию - вы ввели пол Мужской" ';
  end;

  if  ( cdsOKPersonal.FieldByName('region_id').AsString='')
  and ( cdsOKPersonal.FieldByName('cod_obl_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Область рождения или Примечание" ';
  end;

  if  ( cdsOKPersonal.FieldByName('distr').AsString='')
  and ( cdsOKPersonal.FieldByName('cod_place_birth_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Район/город рождения или Примечание" ';
  end;

  if cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if cdsOKPERSONAL.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'+ //cdsOKPERSONAL.FieldByName('nps_id').AsString+
        ' and personal_code<>:p_2'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('nps_id').AsString,
                cdsOKPERSONAL.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+#13+#13+'Пенсионный ИН '+cdsOKPERSONAL.FieldByName('nps_id').AsString+' уже используется!'+#13+' Измените Пенсионный ИН и сохраните данные.';
//          Showmessage(ErMessage);
//          exit;
        end;
      except on e:exception
        do begin
          showmessage('25649)нпс='+cdsOKPERSONAL.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOKPERSONAL.FieldByName('personal_code').AsString+#13+
            sql_+#13+e.message);

          exit;
        end;
      end;
    end;

    z := length(cdsOKPERSONAL.FieldByName('nps_id').AsString);
    if (z<>14) and (z<>0)
    then begin
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН должно содержать 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
    end;

    if  ( cdsOKPersonal.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
    end;

  end;


    if cdsOKPERSONAL.FieldByName('cod_str_sitizent').asstring='860'
    then begin
      try
        strtoint64(cdsOKPERSONAL.FieldByName('nps_id').AsString);
      except
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН для резидентов должно быть 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
      end;
    end;

    z := length(cdsOKPERSONAL.FieldByName('inn').AsString);
    if (z<>9) and (z<>0)
    then begin
        ErMessage:=ErMessage+#13+#13+'поле ИНН должно содержать 9 цифр'+#13+
          'вы ввели ИНН='+cdsOKPERSONAL.FieldByName('inn').AsString+#13+
          'только '+IntToStr(z)+' символов';
    end;

    if  ( cdsOKPersonal.FieldByName('inn').AsString='')
    then begin
      ErMessage := ErMessage+' "ИНН" ';
    end;



// END проверка полей со страницы ИИАС
    if ErMessage <> '' then
  begin
               proverka_:=proverka_+1;
    ShowMessage( ErMessage);
////
    if 1=1    // не связано с подтв. в ГО
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');
      try
        if num_=0
        then begin
        //
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_okN.txt');
          System.Append(text_f);
        end else begin
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok2.txt');
          System.Rewrite(text_f);
        end;

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok2.txt"');        raise;
      end;

      if num_=0
      then begin
      //
      end else begin
        try
          WinExec('notepad C:\NCI Bank\OK\Temp\err_ok2.txt', SW_MAXIMIZE);
        except
          showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok2.txt"');        end;
      end;
    end;
////
    exit;
  end;

   cdsOKPersonal.Post;



end;

procedure TBOKForm.bbSaveFormClick(Sender: TObject);
begin
// проверить если не пусто и не 8 (полная ставка) что есть запись в ok_zp_rate что неполная ставка (полставки)

  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006')  or (HeadBranch_='09004') or (HeadBranch_='09049')) //   подтв. в ГО
  then begin
//если халк то
    cdsOKPersonal.cancel;
    showmessage('(26019)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin
// проверка полей со страницы Form
    Form_TabSheet_Check(1);
  end;

end;

procedure TBOKForm.Form_TabSheet_Check(num_: integer);
var z: integer;
 sql_,ErMessage: string;
 QuantityPost_ , QuantityPostReal_ : integer;
 text_f : TextFile;
    raznica:double;
begin

  if not (cdsOKPersonal.State in dseditmodes)
  then begin
    cdsOKPersonal.edit;
  end;

  ErMessage:='';

        if cdsOKPersonal.FieldByName('ZP_RATE_CODE').AsString=''
        then ErMessage := ErMessage+' "Ставка" ';

        if cdsOKPersonal.FieldByName('TRUD_SOGL').AsString=''
        then ErMessage := ErMessage+' "По трудовому соглашению" ';

        if cdsOKPersonal.FieldByName('Reg_Type_code').AsString=''
        then ErMessage := ErMessage+' "Тип прописки" ';

        if cdsOKPersonal.FieldByName('PASS_DATE').AsString=''
        then ErMessage := ErMessage+' "Дата выдачи паспорта" ';

        if cdsOKPersonal.FieldByName('PASS_NUM').AsString=''
        then ErMessage := ErMessage+' "Номер паспорта" ';

        if cdsOKPersonal.FieldByName('PASS_SERIYA').AsString=''
        then ErMessage := ErMessage+' "Серия паспорта" ';

        if cdsOKPersonal.FieldByName('profmember').AsString=''
        then ErMessage := ErMessage+' "Профсоюз" ';

  if  ( cdsOKPersonal.FieldByName('gender_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Пол" ';
               proverka_:=proverka_+1;
  end;

  if  ( cdsOKPersonal.FieldByName('nationality_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Национальность" ';
               proverka_:=proverka_+1;
  end;

  if  ( cdsOKPersonal.FieldByName('family_status_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Семейное положение" ';
               proverka_:=proverka_+1;
  end;

  if  ( cdsOKPersonal.FieldByName('FAMILY').AsString='')
  then begin
    ErMessage := ErMessage+' " * Фамилия" ';
               proverka_:=proverka_+1;
  end;

  if  ( cdsOKPersonal.FieldByName('FIRST_NAME').AsString='')
  then begin
    ErMessage := ErMessage+' " * Имя" ';
               proverka_:=proverka_+1;
  end;

    sql_ := 'select count(id) from ok_personal where branch=:p_1'+ //cdsOKPERSONAL.FieldByName('branch').AsString+
        ' and tabno=:p_2'+ //cdsOKPERSONAL.FieldByName('tabno').AsString+
        ' and personal_code<>:p_3'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
    try
      z := getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('branch').AsString,
          cdsOKPERSONAL.FieldByName('tabno').AsString,
          cdsOKPERSONAL.FieldByName('personal_code').AsString
      );
      if (z<>0)
      then begin
        ErMessage := ErMessage+#13+#13+'Табельный номер '+cdsOKPERSONAL.FieldByName('tabno').AsString+' уже используется!'+#13+' Измените табельный номер и сохраните данные.';
//        Showmessage(ErMessage);
//        exit;
               proverka_:=proverka_+1;
      end;
    except
      showmessage('Для ввода нового сотрудника перейдите в режим "Таблица" и нажмите кнопку "Новый". ');
      cdsOKPERSONAL.cancel;
      exit;
    end;

// нельзя ставить статус 4-уволен
    if (OldStatus<>'4') and (cdsOKPERSONAL.FieldByName('status_code').AsString='4')
    then begin
        ErMessage := ErMessage+#13+#13+'Чтобы перевести статус сотрудника в состояние "Уволен" используйте кнопку "Увольнение".';
//        Showmessage(ErMessage);
//      exit;
    end;

    if cdsOKPERSONAL.FieldByName('cod_str_sitizent').asstring='860'
    then begin
      try
        strtoint64(cdsOKPERSONAL.FieldByName('nps_id').AsString);
      except
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН для резидентов должно быть 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
      end;

    if cdsOKPERSONAL.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'+ //cdsOKPERSONAL.FieldByName('nps_id').AsString+
        ' and personal_code<>:p_2'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOKPERSONAL.FieldByName('nps_id').AsString,
                cdsOKPERSONAL.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+#13+#13+'Пенсионный ИН '+cdsOKPERSONAL.FieldByName('nps_id').AsString+' уже используется!'+#13+' Измените Пенсионный ИН и сохраните данные.';
//          Showmessage(ErMessage);
//          exit;
        end;
      except on e:exception
        do begin
          showmessage('25872)нпс='+cdsOKPERSONAL.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOKPERSONAL.FieldByName('personal_code').AsString+#13+
            sql_+#13+e.message);

          exit;
        end;
      end;
      z := length(cdsOKPERSONAL.FieldByName('nps_id').AsString);
      if (z<>14) //and (z<>0)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле Пенсионный ИН должно содержать 14 цифр'+#13+
          'вы ввели ИН='+cdsOKPERSONAL.FieldByName('nps_id').AsString+#13+
          'только '+IntToStr(z)+' символов';
//        Showmessage(ErMessage);
//        exit;
      end;
    end;


      z := length(cdsOKPERSONAL.FieldByName('inn').AsString);
      if (z<>9) //and (z<>0)
      then begin
        ErMessage:=ErMessage+#13+#13+'поле ИНН должно содержать 9 цифр'+#13+
          'вы ввели ИНН='+cdsOKPERSONAL.FieldByName('inn').AsString+#13+
          'только '+IntToStr(z)+' символов';
//        Showmessage(ErMessage);
//        exit;
      end;

    end;


  if (cdsOKPersonal.State in [dsEdit, dsInsert])
  then begin
    if (HeadBranch_='09006') and   // не связано с подтв. в ГО
        (cdsOKPersonal.FieldByName('passport_type_code').AsString <> '1')
    then begin
      cdsOKPersonal.FieldByName('passport_type_code').AsInteger := 1;
    end;
    cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_REGION_ID').AsString :=cdsOKPERSONAL.FieldByName('cod_obl_live').AsString ;
    cdsOKPERSONAL.FieldByName('HOME_ADDRESSFACT_DISTR').AsString :=    cdsOKPERSONAL.FieldByName('cod_distr_live').AsString ;  end;

  if  ( cdsOKPersonal.FieldByName('reg_type_code').AsString='2')
  and (   cdsOKPersonal.FieldByName('REG_DATE_END').AsString='')
  then begin
    ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
  end;

  if (cdsOKPERSONAL.FieldByName('status_code').AsString<>'2')
  then begin
//    cdsOKPERSONAL.FieldByName('special_code').AsString:='';
  end else begin
   if HeadBranch_<>'09006' // временно(т.е. навсегда) отключено в халке    // не связано с подтв. в ГО
   then begin
    QuantityPost_     :=-1;
    QuantityPostReal_ :=-1;

    try
    sql_ :=  'select ok_service.get_QuantityPost(:p_1,:p_2,:p_3,:p_4) from dual'   ;
    QuantityPost_ := GetSQLResultpar(sql_,
      cdsOKPERSONAL.FieldByName('branch').AsString ,
      cdsOKPERSONAL.FieldByName('department_code').AsString ,
      cdsOKPERSONAL.FieldByName('post_code').AsString ,
      cdsOKPERSONAL.FieldByName('special_code').AsString
    );

    sql_ := 'select ok_service.get_QuantityPostReal(:p_1,:p_2,:p_3,:p_4) from dual'   ;

    QuantityPostReal_ := GetSQLResultpar(sql_,
      cdsOKPERSONAL.FieldByName('branch').AsString ,
      cdsOKPERSONAL.FieldByName('department_code').AsString ,
      cdsOKPERSONAL.FieldByName('post_code').AsString ,
      cdsOKPERSONAL.FieldByName('special_code').AsString
    );

    except on e:exception
      do begin
        ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!'+#13+
        sql_+#13+e.message;
      end;
    end;

    if QuantityPost_ =-1 then
      ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!';

    if (QuantityPostReal_ >=QuantityPost_)
    and (OldSpecial<>cdsOKPERSONAL.FieldByName('special_code').AsString)
    then
      ErMessage := ErMessage+'В штатном расписании указано '+inttostr(QuantityPost_)+
        ' рабочих мест по указанной специализации. Фактически назначено '+
          inttostr(QuantityPostReal_)+' сотрудников. Операция прервана!';
   END;
  end;

      if (headbranch_='09006')      // не связано с подтв. в ГО
      then begin
        if cdsOKPersonal.FieldByName('telefon').AsString=''
        then ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
        try
          strtoint64(cdsOKPersonal.FieldByName('telefon').AsString);
        except
          ErMessage := ErMessage+' "Телефон '+cdsOKPersonal.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
        end;

        if length(cdsOKPersonal.FieldByName('telefon').AsString)<>11
        then ErMessage := ErMessage+' "в Телефоне должно быть всегда 11 цифр в Халк банке" ';
        if (cdsOKPersonal.fieldbyname('regplace_code').asstring='')
        and (cdsOKPersonal.fieldbyname('PASS_REG').asstring='')
        then ErMessage := ErMessage+' "Укажите * *Место Регистрации (паспорт) по справочнику или примечание" ';

      end;

          if  ( cdsOKPersonal.FieldByName('HOME_ADDRESS_REGION_ID').AsString='')
          and  ( cdsOKPersonal.FieldByName('HOME_ADDRESS_DISTR').AsString='')
          and  ( cdsOKPersonal.FieldByName('Home_Address').AsString='')
          then begin
//            ErMessage := ErMessage+' "Где прописан- район,обл,адрес" ';
            ErMessage := ErMessage+' "'+lbGdePropisan2.caption+' '+lbGdePropisan2_.caption+'- район,обл,адрес" ';
          end;

    if  ( cdsOKPersonal.FieldByName('Education_Title_CODE').AsString='')
    then begin
      ErMessage := ErMessage+' "Образование сотрудника (Наименование)" ';
    end else begin
      z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
               '74',cdsOKPersonal.FieldByName('Education_Title_CODE').AsString
        );
      if z=0
      then ErMessage := ErMessage+' "Реквизит «Образование» должен соответствовать справочнику соответствия <Образование>" ';
    end;

    if  ( cdsOKPersonal.FieldByName('inn').AsString='')
    then begin
      ErMessage := ErMessage+' "ИНН" ';
    end;

  if cdsOKPersonal.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if  ( cdsOKPersonal.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
    end;
  end;

  if  ( cdsOKPersonal.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
  end;

  if  ( cdsokpersonal.FieldByName('PASS_DATE').AsString<>'')
  and (cdsokpersonal.FieldByName('BIRTHDAY').AsString<>'')
  then begin
    raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
      cdsokpersonal.FieldByName('PASS_DATE').AsString,cdsokpersonal.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16)
    then ErMessage := ErMessage+'"Разница Дата получения паспорта и Даты рождения не должна быть меньше 16" ';

  end;

  if (cdsokpersonal.FieldByName('BIRTHDAY').AsString='')
  then ErMessage := ErMessage+' "Дата рождения" '
  else begin
    if ( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
          <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
    or (( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
          =45) and (now< strtodate(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
    )
    then begin
      if (cdsokpersonal.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
      then begin
        ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
      end else begin
        if (cdsokpersonal.FieldByName('PASS_DATE_END').AsDateTime < now)
        then ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
      end;
    end;

    raznica:=getsqlresultpar('select trunc(months_between(sysdate,:p_1)/:p_2) from dual',cdsokpersonal.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16) or (raznica>90)
    then ErMessage := ErMessage+'"Разница Даты текущей и Даты рождения не должна быть меньше 16 и больше 90" ';
  end;



// проверка полей со страницы Form
  if ErMessage <> '' then
  begin
               proverka_:=proverka_+1;
    ShowMessage('Проверка полей со страницы Форма'+#13+ ErMessage);
////
    if 1=1   // не связано с подтв. в ГО
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');
      try
        if num_=0
        then begin
        //
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_okN.txt');
          System.Append(text_f);
        end else begin
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok1.txt');
          System.Rewrite(text_f);
        end;

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok1.txt"');        raise;
      end;

      if num_ =0
      then begin
      //
      end else begin
        try
          WinExec('notepad C:\NCI Bank\OK\Temp\err_ok1.txt', SW_MAXIMIZE);
        except
          showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok1.txt"');        end;
      end;
    end;
////
    exit;
  end;

   cdsOKPersonal.Post;



end;


procedure TBOKForm.Button1Click(Sender: TObject);
var ss, ss1, s:string; // , id
k, i:Integer;
begin
  if (cdsOKConvictions.FieldByName('branch').AsString='')
  or (cdsOKConvictions.FieldByName('id').AsString='')
  or (cdsOKConvictions.FieldByName('personal_code').AsString='')
  then begin
    showmessage('(27084) Прежде чем прикрепить файл - укажите основыне данные о судимости.');
  end else begin

      with TOpenDialog.Create(Self) do
       try
         if Execute then
         begin
           s:=FileName;
           k:=0;
           for i:=length(s) downto 1 do
           begin
            k:=k+1;
             if s[i]='\' then
             begin
              ss:=copy(s,length(s)-k+2,k-1);
              ss1:=ss;
              Break;
             end;
           end;

           if  (copy(FileName,Length(FileName)-3,4) <>'.pdf')
           and (copy(FileName,Length(FileName)-3,4) <>'.jpg')
           and (copy(FileName,Length(FileName)-3,4) <>'.JPG')
           and (copy(FileName,Length(FileName)-3,4) <>'.PDF')
           then begin
             showmessage('(27420)Требуется файл формата .pdf или .jpg а не '+copy(FileName,Length(FileName)-3,4));
           end else begin
              EditFileNameSpravka.Text:=FileName;

              cdsSpravka.Close;
              with cdsSpravka.Params
              do begin
                  clear;
                  CreateParam(ftString,'p_1' ,ptInput);
                  ParamByName('p_1').Value := cdsOKConvictions.FieldByName('branch').AsString;
                  CreateParam(ftString,'p_2' ,ptInput);
                  ParamByName('p_2').Value := cdsOKConvictions.FieldByName('id').AsString;
                  CreateParam(ftString,'p_3' ,ptInput);
                  ParamByName('p_3').Value := cdsOKConvictions.FieldByName('personal_code').AsString;
            CreateParam(ftString,'p_4' ,ptInput);
            ParamByName('p_4').Value :='3'; // 3справка УВД
              end;
              LoadData(cdsSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4' );

             if cdsSpravka.RecordCount=0
             then begin
               cdsSpravka.Insert;
             end else begin
               cdsSpravka.Edit;
             end;

             cdsSpravka.FieldByName('ok_id').Value:=cdsOKConvictions.FieldByName('id').AsString;
             cdsSpravka.FieldByName('priznak').Value:='3';
             cdsSpravka.FieldByName('personal_code').Value:=cdsOKConvictions.FieldByName('personal_code').AsString;
             cdsSpravka.FieldByName('FILE_NAME').Value:=ss1;
             cdsSpravka.FieldByName('branch').Value:=cdsOKConvictions.FieldByName('branch').AsString;
             (cdsSpravka.FieldByName('photo') as TBlobField).LoadFromFile(FileName);

             cdsSpravka.post;
           end;

         end;
       finally
         Free;
       end;

  end;
    if cdsSpravka.Active
    then cdsSpravka.Refresh;

end;

procedure TBOKForm.BitBtn175Click(Sender: TObject);
var dbName:string;
begin
      cdsSpravka.Close;
      with cdsSpravka.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKConvictions.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKConvictions.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKConvictions.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :='3'; // 3-справка УВД
      end;

       LoadData(cdsSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

     if cdsSpravka.RecordCount=0
     then begin
       showmessage('нет данных');
     end else begin
       if not DirectoryExists(ROOT_DIR+'OK\TEMP') then
       begin
         CreateDir(ROOT_DIR+'OK\TEMP');
       end;

       cdsSpravka.First;
       dbName:=ROOT_DIR+'OK\TEMP\'+cdsSpravka.FieldByName('file_name').AsString;
//showmessage(dbName);
       TBlobField(cdsSpravka.FieldByName('photo')).SaveToFile(dbName);

       OpenDlFile.FileName:=dbName;
       if OpenDlFile.Execute then
       begin
         ShellExecute(0, 'open', PChar(dbName), '', '', SW_SHOW);
       end;
     end;

end;

procedure TBOKForm.BitBtn174Click(Sender: TObject);
begin
      cdsSpravka.Close;
      with cdsSpravka.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKConvictions.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKConvictions.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKConvictions.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :='3'; // 3-справка УВД
      end;

       LoadData(cdsSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

end;

procedure TBOKForm.cdsSpravkaAfterOpen(DataSet: TDataSet);
begin
  If dsOKConvictions.DataSet.Active Then
  Begin
    cdsSpravka.MasterSource    := dsOKConvictions;
    cdsSpravka.IndexFieldNames := 'branch;personal_code;ok_id';
    cdsSpravka.MasterFields    := 'branch;personal_code;id';
  End;

end;

procedure TBOKForm.cdsSpravkaBeforePost(DataSet: TDataSet);
begin
   DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
   DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
   DataSet.Fields.FieldByName('branch').AsString := Branch;

end;

procedure TBOKForm.cdsOK_diplomBeforePost(DataSet: TDataSet);
begin
   DataSet.Fields.FieldByName('emp_code').AsInteger := StrToInt(UserId);
   DataSet.Fields.FieldByName('ins_date').AsVariant := GetSQLResult( 'select SysDate from dual' );
   DataSet.Fields.FieldByName('branch').AsString := Branch;

end;

procedure TBOKForm.DBLookupComboBox45Exit(Sender: TObject);
begin

  if (cdsOKEducation.FieldByName('education_end').AsString='1')
//  and (cdsOKEducation.FieldByName('education_city').AsString='')
  then begin

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
//          ParamByName('p_1').Value := cdsOKEducation.FieldByName('education_code').AsString;
          ParamByName('p_1').Value := cdsOKEducation.FieldByName('institution_code').AsString;

          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
    LoadData(cdsTempSource,'SELECT to_char(institution_code) id, institution_name name, INSTITUTION_PLACE'+
                                              ' FROM ss_ok_institution'+
//                                              ' WHERE education_code=:p_1'+ //cdsOKEducation.FieldByName('education_code').AsString+
                                              ' WHERE institution_code=:p_1'+ //cdsOKEducation.FieldByName('education_code').AsString+
                                              ' AND state_notes=:p_2',True); // ''A''',True);

    cdsTempSource.Edit;
    if cdsTempSource.FieldByName('INSTITUTION_PLACE').AsString<>''
    then begin
      cdsOKEducation.FieldByName('education_city').AsString  := cdsTempSource.FieldByName('INSTITUTION_PLACE').AsString;
    end;
//showmessage(
//cdsTempSource.fieldbyname('id').asstring+#13+
//cdsTempSource.fieldbyname('name').asstring+#13+
//cdsTempSource.fieldbyname('INSTITUTION_PLACE').asstring
//);
  end;

end;

procedure TBOKForm.BitBtn178Click(Sender: TObject);
begin
  proverka(0,0);
end;

procedure TBOKForm.proverka(num_: integer;num_2: integer);
var education_title_code_, S_ID, check_date_message_,  er_mes, ErMessage: string; // sql_,birthplace_,
  rukovod_,z2,raznica:integer;
  v:variant;
// cdsok_DAHHbIE : tclientdatasetex;
    text_f : textfile;
  z:double;
begin
// num_2=0  проверять вакансию   *27266)рабочее место
// num_2=1  не проверять вакансию для ротации
  if num_=0
  then begin
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_okN.txt');
          System.Rewrite(text_f);

        Try
          System.Writeln(text_f,datetimetostr(now));
        Finally
          System.CloseFile(text_f);
        End;

  end;
// проверка полей со страницы Form
StatusBar.Panels[2].Text :='(27224)проверка полей со страницы Форма';
  Form_TabSheet_Check(num_);

// проверка полей со страницы ИИАС
StatusBar.Panels[2].Text :='(27228)проверка полей со страницы ИИАС';
  IIAS_TabSheet_Check(num_);

  // берется сотрудник из ok_personal
  // и пробегаются проверки по его дополнительным данным
// переделать на пробег по всем записям в доп.таблицах о сотруднике
        er_mes:='';
        ErMessage  :='';

        rukovod_ :=0;
        if cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                 '79',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
        if cdsOKPersonal.fieldbyname('POST_CODE').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                '79',cdsOKPersonal.fieldbyname('POST_CODE').asstring);

        if (rukovod_=0)
        then begin
          // 25.02.2014 если текущая должность НЕ руководящая, то не проверять фото и образование
        end else begin
         StatusBar.Panels[2].Text :='(27236)фото';
         z :=  getsqlresultpar('select count(*) from ok_photo where branch=:p_1'+
                  ' AND personal_code=:p_2 and (priznak is null or priznak=:p_3)',
           cdsOKPersonal.FieldByName('branch').AsString,cdsOKPersonal.FieldByName('personal_code').AsString,'1');
         if z=0
         then begin
           ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26115)отсутствует фото'+#13;
           proverka_:=proverka_+1;
         end;
        end;
// ... знает почему не выходит сообщение о штатном расписании
StatusBar.Panels[2].Text :='(27247)штатное расписание';
   z:= getsqlresultpar(
     ' select nvl(sum(quantity_post),0)'+
     ' from ok_stat'+
     ' where branch=:p_1'+
     ' and department_code=:p_2'+
     ' and post_code =:p_3',
      cdsOKPersonal.FieldByName('branch').AsString,
      cdsOKPersonal.FieldByName('DEPARTMENT_CODE_NEW').AsString,
      cdsOKPersonal.FieldByName('post_CODE_NEW').AsString);

StatusBar.Panels[2].Text :='(27258)рабочее место';
   if num_<>0
   then begin
     if z=0
     then begin
       ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26130)Указанное рабочее место не найдено в штатном расписании'+#13;
       proverka_:=proverka_+1;
     end else begin
       StatusBar.Panels[2].Text :='(27266)рабочее место';
       z2:= getsqlresultpar(
         ' select count(*)'+
         ' from ok_personal'+
         ' where branch=:p_1'+
         ' and department_code=:p_2'+
         ' and post_code =:p_3'+
         ' and status_code=:p_4',
          cdsOKPersonal.FieldByName('branch').AsString,
          cdsOKPersonal.FieldByName('DEPARTMENT_CODE_NEW').AsString,
          cdsOKPersonal.FieldByName('post_CODE_NEW').AsString, '2');
       if (z2>=z) and (num_2=0)
       then  begin
         ErMessage  :=ErMessage +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')' +'(26143)В штатном расписании указано'+floattostr(z)+'рабочих мест. Фактически назначено'+inttostr(z2)+#13;
         proverka_:=proverka_+1;
       end;
     end;
   end;

        if (rukovod_=0)
        then begin
          // 25.02.2014 если текущая должность НЕ руководящая, то не проверять фото и образование
        end else begin
StatusBar.Panels[2].Text :='(27284)вкладка Образование';
     Tabokeducation_0Show(nil);
StatusBar.Panels[2].Text :='(27286)Образование';

   if cdsOKEducation.recordcount=0
   then ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'отсутствуют сведения об образовании'+#13;

StatusBar.Panels[2].Text :='(27291)Образование';
    if  ( cdsOKPersonal.FieldByName('spec_ikki').AsString='')
    then begin
      ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+' "* Наличие второй специальности" ';
      proverka_:=proverka_+1;
    end else begin
StatusBar.Panels[2].Text :='(27297)Образование';
      if ( cdsOKPersonal.FieldByName('spec_ikki').AsString='1')
      then begin
StatusBar.Panels[2].Text :='(27300)Образование';
        z:= getsqlresultpar('select count(*) from ok_education where branch=:p_1 and personal_code=:p_2 '+
           ' and education_count_CODE=:p_3',
           cdsOKPersonal.FieldByName('branch').AsString,
           cdsOKPersonal.FieldByName('personal_code').AsString, '2'
        );
        if z=0
        then begin
          ErMessage  :=ErMessage +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')' +'отсутствует второе образование(* Наличие второй специальности)'+#13;
           proverka_:=proverka_+1;
        end;
      end;
    end;

     cdsOKEducation.first;
     while not cdsOKEducation.eof do begin
// образование
//
StatusBar.Panels[2].Text :='(27318)Образование';
        if not (cdsOKEducation.FieldByName('nostra_date').IsNull)
        then begin
StatusBar.Panels[2].Text :='(27321)Образование';
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('nostra_date').AsString,cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
StatusBar.Panels[2].Text :='(27324)Образование';
          if (cdsOKEducation.FieldByName('nostra_date').asdatetime < cdsokpersonal.fieldbyname('birthday').asdatetime)
          or (raznica<20)
          then begin
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Разница Даты нострификации '+cdsOKEducation.FieldByName('nostra_date').AsString+
              ' и даты рождения '+cdsOKPersonal.FieldByName('BIRTHDAY').AsString+' сотрудника не должна быть меньше 20  и больше возраста сотрудника'+#13;
           proverka_:=proverka_+1;
          end;

        end;

StatusBar.Panels[2].Text :='(27335)Образование';
        if (cdsOKEducation.FieldByName('nostra').AsString<>'')
        then begin
          if (cdsOKEducation.FieldByName('nostra').AsString='1') // есть
          and ((cdsOKEducation.FieldByName('nostra_number').IsNull) or (cdsOKEducation.FieldByName('nostra_date').IsNull))
          then begin
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно'+#13;
  //          show message('Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно');
             proverka_:=proverka_+1;
          end;
        end;

StatusBar.Panels[2].Text :='(27347)Образование';
        try
          if not (cdsOKEducation.FieldByName('diplom_date').IsNull)
          then
          if (cdsOKEducation.FieldByName('diplom_date').asdatetime>now)
          or (cdsOKEducation.FieldByName('diplom_date').asdatetime<
            strtodate( cdsOKEducation.FieldByName('end_date_dd').asstring+'.'+cdsOKEducation.FieldByName('end_date_mm').asstring+'.'+
                        cdsOKEducation.FieldByName('end_date').asstring ))
          then begin
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Дата выдачи диплома не должна быть больше текущей даты и меньше даты окончания учебного заведения'+#13;
           proverka_:=proverka_+1;
          end;
        except
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(6455) Проверьте дату окончания учебного заведения'+#13;
           proverka_:=proverka_+1;
        end;

StatusBar.Panels[2].Text :='(27364)Образование';
        if (cdsOKEducation.FieldByName('end_date').IsNull)
        and (cdsOKEducation.FieldByName('curs').IsNull)
        then begin
          er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если реквизит «Дата окончания учебного заведения» не указан, то обязательно должен быть заполнен реквизит «Курс»'+#13;
           proverka_:=proverka_+1;
        end;

StatusBar.Panels[2].Text :='(27839)Образование';
          v:=getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','74',cdsokpersonal.fieldbyname('education_title_code').asstring);
          if not varisnull(v)
          then begin
            education_title_code_:=vartostr(v);
          end else begin
            education_title_code_:='0';
          end;

        if (cdsOKEducation.FieldByName('profession_personal').IsNull)
        then begin
StatusBar.Panels[2].Text :='(27375)Образование';
            if ((education_title_code_='3') or (education_title_code_='4') or (education_title_code_='5'))
            and (cdsOKEducation.FieldByName('profession_personal').IsNull)
            then begin
              er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(05962)Если реквизит «Код образования» в требовании 09-001 указан как (3,4,5), то реквизит «Специальность» должен быть указан обязательно'+#13;
               proverka_:=proverka_+1;
            end;
        end;


StatusBar.Panels[2].Text :='(27389)Образование';
        if (cdsOKEducation.FieldByName('begin_date').IsNull)
        and ( (not cdsOKEducation.FieldByName('begin_date_mm').IsNull) or (not cdsOKEducation.FieldByName('begin_date_dd').IsNull) )
        then begin
          er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если год даты поступления не указан, то число и месяц даты поступления не должны указываться'+#13;
               proverka_:=proverka_+1;
        end;

StatusBar.Panels[2].Text :='(27397)Образование';
        if (cdsOKEducation.FieldByName('end_date').IsNull)
        and ( (not cdsOKEducation.FieldByName('end_date_mm').IsNull) or (not cdsOKEducation.FieldByName('end_date_dd').IsNull) )
        then begin
          er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если год даты окончания не указан, то число и месяц даты окончания не должны указываться'+#13;
               proverka_:=proverka_+1;
        end;

StatusBar.Panels[2].Text :='(27405)Образование';
        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString,
          cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
          if (strtodate(cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString) > now)
          or (raznica < 12)
          then begin
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26646)Разница даты поступления и даты рождения должна быть больше 12 лет и меньше возраста сотрудника'+#13;
               proverka_:=proverka_+1;
          end;
        except
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Проверьте дату поступления '+cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString+#13;
               proverka_:=proverka_+1;
        end;

StatusBar.Panels[2].Text :='(27427)Образование';
        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKEducation.FieldByName('end_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('end_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('end_date').AsString,
          cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString,
          '12');
          if (raznica > 20) //or (raznica < 1)
          then begin
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(05960)Разница даты окончания и даты поступления в учебное заведение не должна быть больше 20 лет'+#13; // 10.05.2013 убрал- и меньше 1 года
               proverka_:=proverka_+1;
          end;
        except
            er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Проверьте дату поступления '+cdsOKEducation.FieldByName('begin_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('begin_date').AsString+' и дату окончания '+
          cdsOKEducation.FieldByName('end_date_dd').AsString+'.'+
          cdsOKEducation.FieldByName('end_date_mm').AsString+'.'+
          cdsOKEducation.FieldByName('end_date').AsString+ ' учебного заведения'+
          #13;
               proverka_:=proverka_+1;
        end;


StatusBar.Panels[2].Text :='(27454)Образование';
       if cdsOKEducation.FieldByName('EDUCATION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Образование'+#13;
//         showmessag e('Не заполнено поле '+'Образование');
//         dblcbSSOKEducation.SetFocus;
//         exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27464)Образование';
       if cdsOKEducation.FieldByName('BASIS_CODE').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Признак образования'+#13;
//         showmessag e('Не заполнено поле '+'Признак образования');
//         dblcbSSOKBasis.SetFocus;
//         exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27474)Образование';
       if cdsOKEducation.FieldByName('INSTITUTION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Учебное заведение'+#13;
               proverka_:=proverka_+1;
       end;

StatusBar.Panels[2].Text :='(27481)Образование';
       if cdsOKEducation.FieldByName('cod_vuz_prim').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Примечание (обязательно должно быть указано Учебное заведение)'+#13;
               proverka_:=proverka_+1;
       end;
// -
//
StatusBar.Panels[2].Text :='(27489)Образование';
       if cdsOKEducation.FieldByName('BEGIN_DATE').AsString=''
       then begin
         er_mes:=er_mes+'Не заполнено поле '+'Поступление (год)'+#13;
//         showmessag e('Не заполнено поле '+'Поступление (год)');
//         medOK_beginDAte.SetFocus;
//         exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27499)Образование';
       if not cdsOKEducation.FieldByName('END_DATE').IsNull
       then begin
         if cdsOKEducation.FieldByName('BEGIN_DATE').AsInteger>
            cdsOKEducation.FieldByName('END_DATE').AsInteger
         then begin
           er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Ошибка: год поступления '+
             cdsOKEducation.FieldByName('BEGIN_DATE').asstring+#13+
             ' не должен быть больше года окончания учебного заведения '+
             cdsOKEducation.FieldByName('END_DATE').asstring+#13;
               proverka_:=proverka_+1;
         end;
       end;
//
StatusBar.Panels[2].Text :='(27513)Образование';
       if cdsOKEducation.FieldByName('PROFESSION_PERSONAL').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Специальность'+#13;
//         showmessag e('Не заполнено поле '+'Специальность');
//         dbedProfession.setFocus;
//         exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27523)Образование';
       if cdsOKEducation.FieldByName('QUALIFICATION_CODE').AsString=''
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Квалификация'+#13;
//         showmessag e('Не заполнено поле '+'Квалификация');
//         dblcbSSOKQualification.SetFocus;
//         exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27533)Образование';
       if (not(cdsOKEducation.FieldByName('Diplom_Date').IsNull)) and (cdsOKEducation.FieldByName('DIPLOM_NUM').IsNull)
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно'+#13;
//         showmessag e('Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно');
//         exit;
               proverka_:=proverka_+1;
       end;

StatusBar.Panels[2].Text :='(27542)Образование';
       check_date_message_:= check_date_yyyymmdd(cdsOKEducation.FieldByName('BEGIN_DATE').AsString,
         cdsOKEducation.FieldByName('BEGIN_DATE_mm').AsString,
         cdsOKEducation.FieldByName('BEGIN_DATE_dd').AsString,'N','N');

StatusBar.Panels[2].Text :='(27547)Образование';
       if check_date_message_<>'1'
       then begin
         er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26327)дата поступления '+check_date_message_+#13;
               proverka_:=proverka_+1;
       end;

StatusBar.Panels[2].Text :='(27557)Образование';
       if not cdsOKEducation.FieldByName('END_DATE').IsNull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKEducation.FieldByName('END_DATE').AsString,
           cdsOKEducation.FieldByName('END_DATE_mm').AsString,
           cdsOKEducation.FieldByName('END_DATE_dd').AsString,'Y','N');

StatusBar.Panels[2].Text :='(27564)Образование';
         if check_date_message_<>'1'
         then begin
           er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26341)обучение окончание '+check_date_message_+#13;
//           showmessag e(check_date_message_);
//           medOK_endDAte.SetFocus;
//           exit;
               proverka_:=proverka_+1;
         end;
       end;

//show message('cdsOKEducation.FieldByName(''END_DATE'')='+cdsOKEducation.FieldByName('END_DATE').asstring);
StatusBar.Panels[2].Text :='(27576)Образование';
       if (not cdsOKEducation.FieldByName('END_DATE').IsNull)
       and (     (education_title_code_='3')
              or (education_title_code_='4')
              or (education_title_code_='5')
           )
       then begin
         z:= getsqlresultpar('select count(*) from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4',
            cdsOkeducation.FieldByName('branch').AsString,
            cdsOkeducation.FieldByName('id').AsString,
            cdsOkeducation.FieldByName('personal_code').AsString, '2');
         if z=0
         then begin
           er_mes:=er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+' отсутствует копия диплома'+#13;
               proverka_:=proverka_+1;
         end;
       end;

      cdsOKEducation.next;

     End;
   END; // если неруководящий то не проверять образование

//  1: If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
StatusBar.Panels[2].Text :='(27595)вкладка Ученое звание';
     TabSheet_1Show(nil);
StatusBar.Panels[2].Text :='(27597)Ученое звание';
     cdsOKacademic.first;
StatusBar.Panels[2].Text :='(27599)Ученое звание';
     if (cdsOKpersonal.FieldByName('is_ACADEMIC').AsString<>'')
     then begin
       if (cdsOKpersonal.FieldByName('is_ACADEMIC').AsString='1')
       and (cdsOKacademic.recordcount=0)
       then begin
//         showmessag e(
         er_mes := er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ученое звание Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

StatusBar.Panels[2].Text :='(27612)Ученое звание';
     while not cdsOKacademic.eof do begin
// ученые звания
//
StatusBar.Panels[2].Text :='(27616)Ученое звание';
     if (cdsOKpersonal.FieldByName('is_ACADEMIC').AsString<>'')
     then begin
       if cdsOKpersonal.FieldByName('is_ACADEMIC').AsString='2'
       then begin
//         showmessag e(
         er_mes := er_mes+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ученого звания Нет"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

StatusBar.Panels[2].Text :='(27628)Ученое звание';
       if (cdsOKacademic.FieldByName('ACADEMIC_CODE').AsString='')
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Ученое звание'+#13;
  //       dblcbSSOKAcademic.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(27637)Ученое звание';
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '76',cdsOKacademic.FieldByName('ACADEMIC_CODE').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Реквизит Ученое звание должен соответствовать справочнику соответствия.'+#13;
  //          dblcbSSOKAcademic.SetFocus;
    //        exit;
               proverka_:=proverka_+1;
         end;
       end;

//
StatusBar.Panels[2].Text :='(27652)Ученое звание';
       if cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученого звания)'+#13;
  //       dbedAcademicDate.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin

StatusBar.Panels[2].Text :='(27662)Ученое звание';
         try
           if (cdsOKacademic.FieldByName('ACADEMIC_DATE').AsInteger<1917)
           then begin
      //       showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученого звания)='+
               cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString;
  //           dbedAcademicDate.SetFocus;
    //         exit;
                 proverka_:=proverka_+1;
           end;
         except on e:exception
           do begin
  //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученого звания)'+
               cdsOKacademic.FieldByName('ACADEMIC_DATE').AsString;
    //         dbedAcademicDate.SetFocus;
      //       exit;
                 proverka_:=proverka_+1;
           end;
         end;
       end;
//
      cdsOKacademic.next;

     End;


//  2: If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
StatusBar.Panels[2].Text :='(27691)вкладка Ученая степень';
     TabDegree_2Show(nil);
StatusBar.Panels[2].Text :='(27693)Ученая степень';
     cdsOKDegree.first;
StatusBar.Panels[2].Text :='(27695)Ученая степень';
       if (cdsOKpersonal.FieldByName('is_DEGREE').AsString='1')
       and (cdsOKDegree.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ученая степень Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
StatusBar.Panels[2].Text :='(27704)Ученая степень';
     while not cdsOKDegree.eof do begin
// ученые степени
//
StatusBar.Panels[2].Text :='(27708)Ученая степень';
       if cdsOKpersonal.FieldByName('is_DEGREE').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ученой степени Нет"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;

StatusBar.Panels[2].Text :='(27717)Ученая степень';
       if cdsOKDegree.FieldByName('DEGREE_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Ученая степень'+#13;
  //       dblcbSSOKdegree.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '75',cdsOKDegree.FieldByName('DEGREE_CODE').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Реквизит Ученая степень должен соответствовать справочнику соответствия.'+#13;
  //          dblcbSSOKdegree.SetFocus;
    //        exit;
               proverka_:=proverka_+1;
         end;
       end;
//
       if (cdsOKDegree.FieldByName('DEGREE_DATE').AsString='')
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученой степени)'+#13;
  //       dbedDegreeDate.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin

StatusBar.Panels[2].Text :='(27748)Ученая степень';
         try
           if (cdsOKDegree.FieldByName('DEGREE_DATE').AsInteger<1917)
           then begin
  //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученой степени)='+cdsOKDegree.FieldByName('DEGREE_DATE').AsString;
    //         dbedDegreeDate.SetFocus;
      //       exit;
                 proverka_:=proverka_+1;
           end;
         except on e:exception
           do begin
  //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата присвоения (ученой степени)'+cdsOKDegree.FieldByName('DEGREE_DATE').AsString;
    //         dbedDegreeDate.SetFocus;
      //       exit;
                 proverka_:=proverka_+1;
           end;
         end;
       end;

//
      cdsOKDegree.next;
     End;

//  3: If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
StatusBar.Panels[2].Text :='(27773)вкладка Награды';
     TabSheet_3Show(nil);
StatusBar.Panels[2].Text :='(27775)Награды';
     cdsOKaward.first;
StatusBar.Panels[2].Text :='(27777)Награды';
     if (cdsOKpersonal.FieldByName('is_award').AsString<>'')
     then begin
       if (cdsOKpersonal.FieldByName('is_award').AsString='1')
       and (cdsOKaward.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Награды Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

     while not cdsOKaward.eof do begin
StatusBar.Panels[2].Text :='(27788)Награды';

// награды
//


       if (cdsOKpersonal.FieldByName('is_award').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_award').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Наград Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

StatusBar.Panels[2].Text :='(27809)Награды';
       if cdsOKaward.FieldByName('AWARD_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Сведения о награде'+#13;
  //       dbedAwardInfo.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27819)Награды';
       if cdsOKaward.FieldByName('AWARD_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год получения (награды)'+#13;
  //       dbedAwardDate.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(27830)Награды';
       check_date_message_:= check_date_yyyymmdd(cdsOKaward.FieldByName('AWARD_DATE').AsString,
         cdsOKaward.FieldByName('AWARD_DATE_mm').AsString,cdsOKaward.FieldByName('AWARD_DATE_dd').AsString,
         'N','Y');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26551)награда '+check_date_message_;
  //       dbedAwardDate.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(27842)Награды';
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKaward.FieldByName('AWARD_DATE_dd').AsString+'.'+
                cdsOKaward.FieldByName('AWARD_DATE_mm').AsString+'.'+
                cdsOKaward.FieldByName('AWARD_DATE').AsString,
          cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
         if ( strtodate(cdsOKaward.FieldByName('AWARD_DATE_dd').AsString+'.'+
                        cdsOKaward.FieldByName('AWARD_DATE_mm').AsString+'.'+
                        cdsOKaward.FieldByName('AWARD_DATE').AsString) >now )
         or (raznica<18)
         then begin
           er_mes:= er_mes+ '(05971)Разница Даты награждения и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
               proverka_:=proverka_+1;
         end;
       end;


      cdsOKaward.Next;

     End;

//  4: If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(27865)вкладка Научные работы';
     TabOKScientific_4Show(nil);
StatusBar.Panels[2].Text :='(27867)Научные работы';
     cdsOKScientific.first;
StatusBar.Panels[2].Text :='(27869)Научные работы';
       if (cdsOKpersonal.FieldByName('is_scientific').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_scientific').AsString='1')
         and (cdsOKScientific.recordcount=0)
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Научные работы Есть"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

     while not cdsOKScientific.eof do begin

// научные работы
//
StatusBar.Panels[2].Text :='(27886)Научные работы';
       if (cdsOKpersonal.FieldByName('is_scientific').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_scientific').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Научных работ Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKScientific.FieldByName('SCIENTIFIC_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Сведения о научной работе'+#13;
  //       dbedScientificInfo.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKScientific.FieldByName('SCIENTIFIC_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год написания (научной работы)'+#13;
  //       dbedScientificDate.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
      cdsOKScientific.next;

     End;

//  5: If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(27922)вкладка Зарубежные поездки';
     TabSheet_5Show(nil);
StatusBar.Panels[2].Text :='(27924)Зарубежные поездки';
     if (cdsOKpersonal.FieldByName('is_voyage').AsString<>'')
     then begin
       if (cdsOKpersonal.FieldByName('is_voyage').AsString='1')
       and (cdsOKVoyage.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Зарубежные поездки Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

     cdsOKVoyage.first;
     while not cdsOKVoyage.eof do begin

// зарубежные поездки 09_007
//
StatusBar.Panels[2].Text :='(27942)Зарубежные поездки';
       if (cdsOKpersonal.FieldByName('is_voyage').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_voyage').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Зарубежных поездок Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

//       if cdsOKVoyage.FieldByName('voyage_str').AsString<>''
//       then begin
//         cdsOKVoyage.FieldByName('VOYAGE_LAND').AsString:=
//           cdsOKVoyage.FieldByName('voyage_str_show').AsString;
//       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_STR').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Страна по справочнику ЦБ'+#13;
  //       DBEdit3.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
//
         if cdsOKVoyage.FieldByName('VOYAGE_STR').AsString='860'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(05975)Реквизит «Пребывание за границей страна» не должен быть равен значению «Узбекистан»'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Сведения о зарубежной поездке'+#13;
  //       DBEdit3.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKVoyage.FieldByName('VOYAGE_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год зарубежной поездки'+#13;
  //       DBEdit1.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
//
         if (cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger-strtoint(copy(    cdsokpersonal.fieldbyname('birthday').asstring      ,7,4))
            <18)
         or (cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger> strtoint(copy(bankdate,7,4)) )
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Разница даты выезда за границу и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника'+#13;
    //       DBEdit1.SetFocus;
      //     exit;
                 proverka_:=proverka_+1;
         end;
       end;


//
       check_date_message_:= check_date_yyyymmdd(cdsOKVoyage.FieldByName('VOYAGE_DATE').AsString,
         cdsOKVoyage.FieldByName('VOYAGE_DATE_mm').AsString,
         cdsOKVoyage.FieldByName('VOYAGE_DATE_dd').AsString,'N','N');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26695)зарубежной поездки '+check_date_message_;
  //       DBEdit1.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;

       if (not cdsOKVoyage.FieldByName('DATA_IN').IsNull)
       then begin
         if (cdsOKVoyage.FieldByName('DATA_IN').AsInteger<cdsOKVoyage.FieldByName('VOYAGE_DATE').Asinteger)
         or (cdsOKVoyage.FieldByName('DATA_IN').Asinteger> strtoint(copy(bankdate,7,4)) )
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Дата возвращения из-за границы не должна быть меньше даты выезда  и не должна быть больше текущей даты'+#13;
  //         exit;
               proverka_:=proverka_+1;
         end;
       end;

       if (not cdsOKVoyage.FieldByName('DATA_IN').IsNull)
       or (not cdsOKVoyage.FieldByName('DATA_IN_mm').IsNull)
       or (not cdsOKVoyage.FieldByName('DATA_IN_dd').IsNull)
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKVoyage.FieldByName('DATA_IN').AsString,
           cdsOKVoyage.FieldByName('DATA_IN_mm').AsString,
           cdsOKVoyage.FieldByName('DATA_IN_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(26722)возвращение из зарубежной поездки '+check_date_message_;
  //         DBEdit57.SetFocus;
    //       exit;
               proverka_:=proverka_+1;
         end;
       end;
      cdsOKVoyage.Next;

     End;


//  6: If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28059)вкладка Ин.яз.';
     TabSheet_6Show(nil);
StatusBar.Panels[2].Text :='(28061)Ин.яз.';
     cdsOKLanguage.first;
     if (cdsOKpersonal.FieldByName('is_language').AsString<>'')
     then begin
       if (cdsOKpersonal.FieldByName('is_language').AsString='1')
       and (cdsOKLanguage.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ин.яз. Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

     while not cdsOKLanguage.eof do begin
StatusBar.Panels[2].Text :='(28076)Ин.яз.';

// языки
//
       if (cdsOKpersonal.FieldByName('is_language').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_language').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Ин.яз. Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKLanguage.FieldByName('language_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Иностранный язык'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28098)Ин.яз.';
                z:=getsqlresultpar('select count(*) from s_langs so ,ss_ok_nci son where son.nci_id=:p_1 and so.LANG_ID=son.s_id and son.ok_id=:p_2',
                 '77',cdsOKLanguage.FieldByName('language_code').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Реквизит Иностранный язык должен соответствовать справочнику соответствия.'+#13;
  //          exit;
               proverka_:=proverka_+1;
         end;

       end;

       if (cdsOKLanguage.FieldByName('cod_lang_prim').AsString='')
       and (cdsOKLanguage.State in [dsEdit, dsInsert])
       then begin
         cdsOKLanguage.FieldByName('cod_lang_prim').AsString:=
           cdsOKLanguage.FieldByName('language_code_show').AsString;
       end;
//
       if cdsOKLanguage.FieldByName('level_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Уровень владения (иностранным языком)'+#13;
  //       DBLCBlanglevel.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28127)Ин.яз.';
                z:=getsqlresultpar('select count(*) from s_lang so ,ss_ok_nci son where son.nci_id=:p_1 and so.UROV_ID=son.s_id and son.ok_id=:p_2',
                 '78',cdsOKLanguage.FieldByName('level_code').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Реквизит Уровень владения (иностранным языком) должен соответствовать справочнику соответствия.'+#13;
  //          exit;
               proverka_:=proverka_+1;
         end;

       end;
//
      cdsOKLanguage.Next;

     End;
//  7: If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28146)вкладка Сведения о родственниках';
     TabSheet_7Show(nil);
StatusBar.Panels[2].Text :='(28148)Сведения о родственниках';
//   if cdsOKRelation.recordcount=0
//   then ErMessage  :=ErMessage  +'отсутствуют сведения о родственниках'+#13;

     cdsOKRelation.first;
     while not cdsOKRelation.eof do begin

// родственные отношения 09_002
//
StatusBar.Panels[2].Text :='(28157)Сведения о родственниках';
       if cdsOKRelation.FieldByName('RELATION_FAMILY').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Фамилия (родственник)'+#13;
  //       DBEdit701.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKRelation.FieldByName('RELATION_NAME').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Имя (родственник)'+#13;
  ///       DBEdit702.SetFocus;
     //    exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKRelation.FieldByName('RELATION_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Родственное отношение (родственник)'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
         // взять код типа родственника из справочника соответствия
StatusBar.Panels[2].Text :='(28184)Сведения о родственниках';

         v:= getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','81',cdsOKRelation.FieldByName('RELATION_CODE').AsString);
         if varisnull(v)
         then begin
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'код степени родства '+cdsOKRelation.FieldByName('RELATION_CODE').AsString+
             ' не найден в справочнике соответствия '+#13;

         end else begin
             S_ID:=vartostr(v);
             if cdsokpersonal.fieldbyname('gender_code').asstring='1' // пол мужской родственник муж ошибка
             then begin
                 if S_ID='02'   // родственник муж ошибка
                 then begin
      //             showmessag e(
               ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если пол сотрудника указан – «Мужской», то код степени родства не может принимать значение «Муж»'+#13;
        //           exit;
                     proverka_:=proverka_+1;
                 end;
             end else begin
              // пол женский родственник жена ошибка
                 if S_ID='01'   //родственник жена ошибка
                 then begin
        //           showmessag e(
               ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если пол сотрудника указан – «Женский», то код степени родства не может принимать значение «Жена»'+#13;
      //             exit;
                     proverka_:=proverka_+1;
                 end;
             end;
         end;
       end;

       if cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год рождения (родственник)'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28215)Сведения о родственниках';
         if (cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger <
               strtoint(copy( cdsOKpersonal.FieldByName('BIRTHDAY').asstring ,7,4)))
         and ((S_ID='6') or (S_ID='8') or (S_ID='9') or (S_ID='10')  )
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если родственник логически указан как младшее поколение, то год рождения родственника должен быть больше года рождения сотрудника'+#13;
  //         exit;
               proverka_:=proverka_+1;
         end;
StatusBar.Panels[2].Text :='(28225)Сведения о родственниках';
         if (  cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger >
                 strtoint( copy( cdsOKpersonal.FieldByName('BIRTHDAY').asstring ,7,4))   )
         and ( (S_ID='3') or (S_ID='4') or (S_ID='5') or (S_ID='7') or (S_ID='11') or (S_ID='12')  )
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Если родственник указан как старшее поколение, то год рождения родственника должен быть меньше года рождения сотрудника'+#13;
  //         exit;
               proverka_:=proverka_+1;
         end;
StatusBar.Panels[2].Text :='(28235)Сведения о родственниках';
         if cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger<1900
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Проверьте год рождения (родственник)'+
             cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString;
  //         exit;
               proverka_:=proverka_+1;
         end;

       end;

       if cdsOKRelation.FieldByName('COD_STR_birth').AsString=''
       then begin
         er_mes:=er_mes+'(7123) Укажите «Код страны рождения» родственника '+cdsOKRelation.FieldByName('RELATION_FAMILY').AsString+' обязательно из справочника <Страны>'+#13;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28252)Сведения о родственниках';
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKRelation.FieldByName('COD_STR_birth').AsString);
         if z<1  then er_mes:=er_mes+'(05345)Реквизит «Код страны рождения» родственника должен соответствовать справочнику <Страны и территории>'+#13;

         if cdsOKRelation.FieldByName('COD_STR_birth').AsString='860' // узбекистан то надо область и район
         then begin
           if (cdsOKRelation.FieldByName('COD_OBL_birth').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны рождения» (родственник)-  «Узбекистан», то «Код области рождения» должен быть указан обязательно из справочника <Области Узбекистана>'+#13;
                 proverka_:=proverka_+1;
           end;
           if (cdsOKRelation.FieldByName('COD_CITY_birth').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны рождения» (родственник)-  «Узбекистан», то «Код района рождения» должен быть указан обязательно из справочника <Районы Узбекистана>'+#13;
                 proverka_:=proverka_+1;
           end;
         end else begin
           if (cdsOKRelation.FieldByName('COD_OBL_birth_prim').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны рождения» (родственник)-  Не «Узбекистан», то Примечание к «Код области рождения» должен быть указан'+#13;
                 proverka_:=proverka_+1;
           end;
           if (cdsOKRelation.FieldByName('COD_CITY_birth_prim').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны рождения» (родственник)-  Не «Узбекистан», то Примечание к «Код района рождения» должен быть указан'+#13;
                 proverka_:=proverka_+1;
           end;
         end;
       end;

// проживания
StatusBar.Panels[2].Text :='(28283)Сведения о родственниках';
     if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
     and (cdsOKRelation.FieldByName('DD_DEATH').AsString='')
     and (cdsOKRelation.FieldByName('MM_DEATH').AsString='')
     then begin
       if cdsOKRelation.FieldByName('COD_STR_LIVE').AsString=''
       then begin
         er_mes:=er_mes+'(7123) Укажите «Код страны проживания» (родственник)обязательно из справочника <Страны>'+#13;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28293)Сведения о родственниках';
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKRelation.FieldByName('COD_STR_LIVE').AsString);
         if z<1  then er_mes:=er_mes+'(05345)Реквизит «Код страны проживания» родственника должен соответствовать справочнику <Страны и территории>'+#13;

         if cdsOKRelation.FieldByName('COD_STR_LIVE').AsString='860' // узбекистан то надо область и район
         then begin
           if (cdsOKRelation.FieldByName('COD_OBL_LIVE').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны проживания» (родственник)-  «Узбекистан», то «Код области проживания» должен быть указан обязательно из справочника <Области Узбекистана>'+#13;
                 proverka_:=proverka_+1;
           end;
           if (cdsOKRelation.FieldByName('COD_CITY').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны проживания» (родственник)-  «Узбекистан», то «Код района проживания» должен быть указан обязательно из справочника <Районы Узбекистана>'+#13;
                 proverka_:=proverka_+1;
           end;
         end else begin
           if (cdsOKRelation.FieldByName('COD_OBL_LIVE_prim').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны проживания» (родственник)-  Не «Узбекистан», то Примечание к «Код области проживания» должен быть указан'+#13;
                 proverka_:=proverka_+1;
           end;
           if (cdsOKRelation.FieldByName('COD_CITY_prim').AsString='')
           then begin
             er_mes:=er_mes+'Если выбран «Код страны проживания» (родственник)-  Не «Узбекистан», то Примечание к «Код района проживания» должен быть указан'+#13;
                 proverka_:=proverka_+1;
           end;
         end;
       end;

     end;

StatusBar.Panels[2].Text :='(28325)Сведения о родственниках';
       if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString<>'')
       then begin
         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsInteger <
               cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsInteger)
         or (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsInteger> strtoint(copy(bankdate,7,4)))
         then begin
  //         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Проверьте дату рождения (родственник)'+cdsOKRelation.FieldByName('RELATION_BIRTHDAY').AsString+
           ' и дату сметри '+
            cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString;
//           exit;
               proverka_:=proverka_+1;
         end;

         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKRelation.FieldByName('DD_DEATH').AsString<>'')
         and (cdsOKRelation.FieldByName('MM_DEATH').AsString<>''))
         then begin
           if (strtodate( cdsOKRelation.FieldByName('DD_DEATH').AsString+'.'+cdsOKRelation.FieldByName('MM_DEATH').AsString+'.'+cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString  ) > now)
           then begin
             er_mes:=er_mes+'Дата смерти родственников не должна быть меньше, чем дата рождения и больше текущей даты;'+#13;
               proverka_:=proverka_+1;
           end;
         end;


       end else begin
         if (cdsOKRelation.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKRelation.FieldByName('DD_DEATH').AsString<>'')
         or (cdsOKRelation.FieldByName('MM_DEATH').AsString<>''))
         then begin
           er_mes:=er_mes+'(родственник)Если год смерти не указан, то число и месяц смерти не должны указываться'+#13;
               proverka_:=proverka_+1;
         end;
       end;

      cdsOKRelation.Next;

     End;

//  8: If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
//     Then begin
//MemoTest.lines.add('*0');
StatusBar.Panels[2].Text :='(28369)вкладка Сведения о работе';
     TabSheet_8Show(nil);
StatusBar.Panels[2].Text :='(28371)Сведения о работе';

     if (not cdsOKAddInform.Active) then loaddata(cdsOKAddInform,SQL_OKAddInform);
     if (cdsOKPeriod.recordcount=0)
     then begin
       if (cdsOKAddInform.RecordCount=0)
       then begin
             ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27432)отсутствуют сведения о работе и нет доп.сведениий'+#13;
               proverka_:=proverka_+1;
       end else begin
StatusBar.Panels[2].Text :='(28381)Сведения о работе';
         try
            cdsmaxallaSpravka.Close;
            with cdsmaxallaSpravka.Params
            do begin
                clear;
                CreateParam(ftString,'p_1' ,ptInput);
                ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
                CreateParam(ftString,'p_2' ,ptInput);
                ParamByName('p_2').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
                CreateParam(ftString,'p_3' ,ptInput);
                ParamByName('p_3').Value :='4'; // 4 справка махалля
            end;
            LoadData(cdsmaxallaSpravka, 'select a.* from ok_photo a, ok_addinform b'+
              ' where a.branch=b.branch and a.ok_id=b.id and a.personal_code=b.personal_code'+
              ' and a.branch=:p_1 and a.personal_code=:p_2 and a.priznak=:p_3' );

           if (cdsmaxallaSpravka.RecordCount=0)
           and (cdsOKPeriod.recordcount=0)
           then begin
             ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27453)отсутствуют сведения о работе и нет справки в доп.сведениях'+#13;
               proverka_:=proverka_+1;
           end;
         except on e:exception
           do begin
             ErMessage  :=ErMessage  +'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27457)отсутствуют сведения о работе и нет справки или данных в доп.сведениях '+e.message+#13;
               proverka_:=proverka_+1;
           end;
         end;
       end;
     end;

     cdsOKPeriod.first;
     while not cdsOKPeriod.eof do begin

// сведения о работе
//
StatusBar.Panels[2].Text :='(28418)Сведения о работе';
       if (cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString<>'')
       then begin
         if (cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString='3')
         and (cdsOKPeriod.FieldByName('COD_BANK').AsString='')
         then begin
         // если шу банкда и код банка пусто то поставить туда текущее мфо
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'если шу банкда и код банка пусто то поставьте туда текущее мфо'+#13;
  //          cdsOKPeriod.FieldByName('COD_BANK').AsString:=branch;
                 proverka_:=proverka_+1;
         end;
       end;
//
       if cdsOKPeriod.FieldByName('OFFICE_NAME').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Наименование организации'+#13;
  //       DBEdit801.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKPeriod.FieldByName('OFFICE_ADDRESS').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Адрес организации'+#13;
  //       DBEdit802.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKPeriod.FieldByName('ESTABLISHED_POST').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Занимаемая должность'+#13;
  //       DBEd_poststring.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата поступления'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
         if (cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsDateTime<cdsOKPersonal.FieldByName('birthday').AsDateTime)
         then begin
           er_mes:=er_mes+'Реквизит «Дата начала работы в должности» должен быть обязательно заполнен,  соответствовать формату и быть больше даты рождения'+#13;
               proverka_:=proverka_+1;
         end;

StatusBar.Panels[2].Text :='(28473)Сведения о работе';
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString,cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
         if (cdsOKPeriod.FieldByName('in_office_date').AsDatetime>now)
         or (raznica<12)
         then begin
           er_mes:=er_mes+'Разница даты начала работы в должности и даты рождения сотрудника не должна быть меньше 12 лет и не должна быть больше возраста сотрудника'+#13;
               proverka_:=proverka_+1;
         end;



       end;
//
       if cdsOKPeriod.FieldByName('BASIS_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата приказа/основания'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
         if cdsOKPeriod.FieldByName('IN_OFFICE_DATE').AsString<>''
         then begin
           if (cdsOKPeriod.FieldByName('BASIS_DATE').asDateTime > cdsOKPeriod.FieldByName('IN_OFFICE_DATE').asDateTime)
           then begin
             er_mes:=er_mes+'Дата приказа-основания для начала работы в должности должна быть меньше или равна дате начала работы в этой должности'+#13;
               proverka_:=proverka_+1;
           end;
         end;
       end;

       if (cdsOKPeriod.FieldByName('date_pr_off').asstring<>'' ) and ( cdsOKPeriod.FieldByName('OUT_OFFICE_DATE').asstring<>'')
       then begin
           if (cdsOKPeriod.FieldByName('date_pr_off').asDatetime > cdsOKPeriod.FieldByName('OUT_OFFICE_DATE').AsDatetime)
           then begin
             er_mes:=er_mes+'Дата приказа-основания для прекращения работы в должности  должна быть меньше или равна дате прекращения работы в этой должности'+#13;
               proverka_:=proverka_+1;
           end;
       end;
//
       if cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Код типа стажа'+#13;
  //       DBLcbTypePeriod.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
         if (cdsOKPeriod.FieldByName('TYPE_PERIOD_CODE').AsString='1')
         and (cdsOKPeriod.FieldByName('established_post').AsString='')
         then begin
           er_mes:=er_mes+'Реквизит «Должность» должен быть обязательно заполнен, если реквизит «Признак системы» указан как «другое» (Бошка тизимида)'+#13;
               proverka_:=proverka_+1;
         end;
       end;

       if (cdsOKPeriod.FieldByName('post_CODE').AsString='')
       and (cdsOKPeriod.FieldByName('established_post').AsString='')
       then begin
         er_mes:=er_mes+'На самом деле Заполняется или код должности или Должность Одно из 2-х обязательно должно быть заполнено'+#13;
               proverka_:=proverka_+1;
       end;

//
       if cdsOKPeriod.FieldByName('BASIS_NUM').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Номер приказа/основания'+#13;
  //       DBEdit811.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//

       if (cdsOKPeriod.FieldByName('date_attest').AsString<>'')
       and (cdsOKPeriod.FieldByName('resh_attest').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата аттестации», то реквизит «Решение аттестационной комиссии» должен быть заполнен'+#13;
               proverka_:=proverka_+1;
       end;

       if (cdsOKPeriod.FieldByName('date_pr_kvl').AsString<>'')
       and (cdsOKPeriod.FieldByName('numb_pr_kvl').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата  прохождения Квалификационной комиссии Центрального банка», то реквизит «Номер протокола Квалификационной комиссии Центрального банка о соответствии должности, на которую выдвигается» должен быть заполнен'+#13;
               proverka_:=proverka_+1;
       end;

       if (cdsOKPeriod.FieldByName('date_utv_km').AsString<>'')
       and (cdsOKPeriod.FieldByName('numb_utv_km').AsString='')
       then begin
         er_mes:=er_mes+'Если указан реквизит «Дата утверждения Кабинетом Министров», то реквизит «Номер постановления Кабинета Министров об утверждении в занимаемой должности» должен быть заполнен'+#13;
               proverka_:=proverka_+1;
       end;

       if (cdsOKPeriod.FieldByName('out_office_date').AsString<>'')
       and (cdsOKPeriod.FieldByName('in_office_date').AsString<>'')
       then begin
         if (cdsOKPeriod.FieldByName('cod_pr_off').AsString='')
         and (cdsOKPeriod.FieldByName('pr_off').AsString='')
         then begin
           er_mes:=er_mes+'Если реквизит «Код причины прекращения работы в должности» не указан, то обязательно должен быть заполнен реквизит «Причина прекращения работы в должности»'+#13;
               proverka_:=proverka_+1;
         end;
StatusBar.Panels[2].Text :='(28577)Сведения о работе';
         if (cdsOKPeriod.FieldByName('out_office_date').AsDatetime>now)
         or (cdsOKPeriod.FieldByName('out_office_date').AsDatetime<cdsOKPeriod.FieldByName('in_office_date').AsDatetime)
         then begin
           er_mes:=er_mes+'Дата прекращения работы в должности не должна быть больше текущей даты и меньше даты начала работы в этой должности'+#13;
               proverka_:=proverka_+1;
         end;
       end;

      cdsOKPeriod.Next;

     End;

//  9: If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28592)вкладка Квалификация';
     Tabokrise_9Show(nil);
StatusBar.Panels[2].Text :='(28594)Квалификация';
     cdsOKRise.first;
     if (cdsOKpersonal.FieldByName('is_rise').AsString<>'')
     then begin
       if (cdsOKpersonal.FieldByName('is_rise').AsString='1')
       and (cdsOKRise.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Квалификация Есть"'+#13;
  //       exit;
               proverka_:=proverka_+1;
       end;
     end;

     while not cdsOKRise.eof do begin

// квалификация
//
StatusBar.Panels[2].Text :='(28612)Квалификация';
       if (cdsOKpersonal.FieldByName('is_rise').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_rise').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Квалификация Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKRise.FieldByName('rise_info').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Сведения о повышении (квалификации)'+#13;
  //       DBEdit12.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
StatusBar.Panels[2].Text :='(28634)Квалификация';
       check_date_message_:= check_date_yyyymmdd(cdsOKRise.FieldByName('rise_date_year').AsString,
         cdsOKRise.FieldByName('rise_date_mm').AsString,cdsOKRise.FieldByName('rise_date_dd').AsString,
         'N','N');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27649)Квалификация '+check_date_message_;
  //       DBEdit46.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;

       if cdsOKRise.FieldByName('rise_date_year').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год прохождения (квалификации)'+#13;
  //       DBEdit46.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
         if (cdsOKRise.FieldByName('rise_date_year').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKRise.FieldByName('rise_date_year').AsInteger- strtoint(copy( cdsokpersonal.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Разница даты повышения квалификации и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника'+#13;
  //         exit;
               proverka_:=proverka_+1;
         end;
         if  (cdsOKRise.FieldByName('rise_date_year').AsString<>'')
         and (cdsOKRise.FieldByName('rise_date_mm').AsString<>'')
         and (cdsOKRise.FieldByName('rise_date_dd').AsString<>'')
         then begin
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKRise.FieldByName('rise_date_dd').AsString+'.'+
                cdsOKRise.FieldByName('rise_date_mm').AsString+'.'+
                cdsOKRise.FieldByName('rise_date_year').AsString,
           cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKRise.FieldByName('rise_date_dd').AsString+'.'+
                          cdsOKRise.FieldByName('rise_date_mm').AsString+'.'+
                          cdsOKRise.FieldByName('rise_date_year').AsString) >now )
           or (raznica<18)
           then begin
             er_mes:= er_mes+ '(05982)Разница Даты повышения квалификации и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
               proverka_:=proverka_+1;
           end;

         end;
       end;
//

      cdsOKRise.Next;

     End;

// 10: If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28692)вкладка Избрание';
     TabSheet_10Show(nil);
StatusBar.Panels[2].Text :='(28694)Избрание';
     cdsOKElection.first;
       if (cdsOKpersonal.FieldByName('is_Election').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_Election').AsString='1')
         and (cdsOKElection.recordcount=0)
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Избрание Есть"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

     while not cdsOKElection.eof do begin

// избрание
//
StatusBar.Panels[2].Text :='(28712)Избрание';
       if (cdsOKpersonal.FieldByName('is_Election').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_Election').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Избрание Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKElection.FieldByName('election_post').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Должность'+#13;
  //       DBEdit48.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKElection.FieldByName('election_date_begin').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Начало(год)'+#13;
  //       DBEdit47.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
         if (cdsOKElection.FieldByName('election_date_begin').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKElection.FieldByName('election_date_begin').AsInteger- strtoint(copy( cdsokpersonal.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Разница даты избрания и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника'+#13;
  //         exit;
               proverka_:=proverka_+1;
         end;
         if  (cdsOKElection.FieldByName('election_date_begin').AsString<>'')
         and (cdsOKElection.FieldByName('election_date_begin_mm').AsString<>'')
         and (cdsOKElection.FieldByName('election_date_begin_dd').AsString<>'')
         then begin
StatusBar.Panels[2].Text :='(28754)Избрание';
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKElection.FieldByName('election_date_begin_dd').AsString+'.'+
                cdsOKElection.FieldByName('election_date_begin_mm').AsString+'.'+
                cdsOKElection.FieldByName('election_date_begin').AsString,
           cdsOKPersonal.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKElection.FieldByName('election_date_begin_dd').AsString+'.'+
                          cdsOKElection.FieldByName('election_date_begin_mm').AsString+'.'+
                          cdsOKElection.FieldByName('election_date_begin').AsString) >now )
           or (raznica<18)
           then begin
             er_mes:= er_mes+ '(05974)Разница Даты избрания и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника'+#13;
               proverka_:=proverka_+1;
           end;

         end;

       end;
//
//
       if cdsOKElection.FieldByName('election_date_end').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Завершение(год)'+#13;
  //       DBEdit14.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKElection.FieldByName('election_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Исполнительный орган'+#13;
//         DBLCBelection.SetFocus;
  //       exit;
               proverka_:=proverka_+1;
       end;
//
StatusBar.Panels[2].Text :='(28793)Избрание';
       check_date_message_:= check_date_yyyymmdd(cdsOKElection.FieldByName('election_date_begin').AsString,
         cdsOKElection.FieldByName('election_date_begin_mm').AsString,cdsOKElection.FieldByName('election_date_begin_dd').AsString,
         'N','N');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27785)Избрание '+check_date_message_;
  //       DBEdit47.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;


       if not cdsOKElection.FieldByName('election_date_end').isnull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKElection.FieldByName('election_date_end').AsString,
           cdsOKElection.FieldByName('election_date_end_mm').AsString,
           cdsOKElection.FieldByName('election_date_end_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
//           showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(27800)Избрание-завершение '+check_date_message_;
  //         DBEdit14.SetFocus;
    //       exit;
               proverka_:=proverka_+1;
         end;
       end;
      cdsOKElection.next;

     End;

// 11: If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28829)вкладка Гос премии';
     TabSheet_11Show(nil);
StatusBar.Panels[2].Text :='(28831)Гос премии';

       if (cdsOKpersonal.FieldByName('is_Premium').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_Premium').AsString='1')
         and (cdsOKPremium.RecordCount=0)
         then begin
    //       showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Гос премии Есть"'+#13;
  //         exit;
                 proverka_:=proverka_+1;
         end;
       end;

     cdsOKPremium.first;

     while not cdsOKPremium.eof do begin

// гос премии
//
       if (cdsOKpersonal.FieldByName('is_Premium').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_Premium').AsString='2'
         then begin
    //       showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Гос премии Нет"'+#13;
  //         exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKPremium.FieldByName('premium_name').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Наименование'+#13;
  //       dbedit15.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKPremium.FieldByName('premium_date').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год получения'+#13;
//         dbedit16.SetFocus;
  //       exit;
               proverka_:=proverka_+1;
       end;
//
      cdsOKPremium.next;

     End;

  if (HeadBranch_='09049') and (rukovod_=0)
  then begin
    // 25.02.2014 если капитал банк и НЕруководящий то армию не проверять
  end else begin
// 12: If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(28887)вкладка Армия';
     TabSheet_12Show(nil);
StatusBar.Panels[2].Text :='(28889)Армия';
       if (cdsOKpersonal.FieldByName('is_Army').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_Army').AsString='1')
         and (cdsOKArmy.recordcount=0)
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Армия Есть"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

     cdsOKArmy.first;
     while not cdsOKArmy.eof do begin

// воинская служба
//
       if (cdsOKpersonal.FieldByName('is_Army').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_Army').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Армия Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKArmy.FieldByName('army_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Отношение'+#13;
//         DBLookupComboBox7.SetFocus;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
         if cdsOKArmy.Fields.FieldByName('army_code').AsString='1'
         then begin
    //
           if cdsOKArmy.FieldByName('fitness_army_CODE').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Годность'+#13;
      //       DBLookupComboBox6.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('staff_code').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Вид состава'+#13;
      //       DBLcbStaff.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('type_force_code').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Род войск'+#13;
      //       DBLCBtypeforce.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('army_group_code').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Группа учета'+#13;
      //       DBLCBtypeforce.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('category_army_code').AsString=''
           then begin
        //     showmessag e (
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Категория учета'+#13;
    //         DBLCBcategoryarmy.SetFocus;
      //       exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('special_army').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'В/Специальность'+#13;
      //       dbedit52.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('number_vus').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Номер ВУС'+#13;
      //       dbedit50.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('military_rank_code').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'В/Звание'+#13;
      //       DBLCBmilitaryrank.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('code_army_post').AsString=''
           then begin
        //     showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Код должности и особые признаки в/службы'+#13;
    //         dbedit18.SetFocus;
      //       exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('name_army_office').AsString=''
           then begin
        //     showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Военкомат'+#13;
    //         dbedit55.SetFocus;
      //       exit;
                   proverka_:=proverka_+1;
           end;
    //
    //
           if cdsOKArmy.FieldByName('specreg_number').AsString=''
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Спец.учет N'+#13;
      //       dbedit53.SetFocus;
        //     exit;
                   proverka_:=proverka_+1;
           end;
    //

         end;
       end;

       cdsOKArmy.Next;

     End;
   END; // если капитал и не рукводящий

// 13: If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(29051)вкладка Партия';
     TabSheet_13Show(nil);
StatusBar.Panels[2].Text :='(29053)Партия';
     cdsOKParty.first;

       if (cdsOKpersonal.FieldByName('is_Party').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_Party').AsString='1')
         and (cdsOKParty.recordcount=0)
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Партия Есть"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;
     while not cdsOKParty.eof do begin

// партии
//
StatusBar.Panels[2].Text :='(29071)Партия';
       if (cdsOKpersonal.FieldByName('is_Party').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_Party').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'В Сведениях для ИИАС указано "Партия Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKParty.FieldByName('party_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Партия'+#13;
  //       DBLCBparty.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end else begin
//
//       if cdsOKParty.FieldByName('code_partii_prim').AsString=''
//       then begin
//         cdsOKParty.FieldByName('code_partii_prim').AsString :=
//           cdsOKParty.FieldByName('party_code_show').AsString;
//       end;
//

         if (uppercase(cdsOKParty.FieldByName('party_code_show').AsString)='ПАРТИЯСИЗ')
         or (uppercase(cdsOKParty.FieldByName('party_code_show').AsString)='БЕСПАРТИЙНЫЙ')
         or ((cdsOKParty.FieldByName('party_code_show').AsString)='Партиясиз')
         or ((cdsOKParty.FieldByName('party_code_show').AsString)='Беспартийный')
         or ((cdsOKParty.FieldByName('party_code_show').AsString)='партиясиз')
         or ((cdsOKParty.FieldByName('party_code_show').AsString)='беспартийный')
         then begin
         // беспартийный
         end else begin
             if cdsOKParty.FieldByName('party_date').AsString=''
             then begin
      //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Год вступления в партию'+#13;
  //             dbedit73.SetFocus;
    //           exit;
                 proverka_:=proverka_+1;
             end;
      //
             if (cdsOKParty.FieldByName('party_date').AsInteger<1917)
             or (cdsOKParty.FieldByName('party_date').AsInteger>strtoint(copy(bankdate,7,4) ) )
             then begin
      //         showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Неправильный='+cdsOKParty.FieldByName('party_date').AsString+' Год вступления в партию'+#13;
  //             dbedit73.SetFocus;
    //           exit;
                 proverka_:=proverka_+1;
             end;
      //
      //
             if cdsOKParty.FieldByName('punishment_motive').AsString<>''
             then begin
               if cdsOKParty.FieldByName('punishment_date').AsString=''
               then begin
      //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Вы ввели Причину партийного наказания,'+#13+
                   cdsOKParty.FieldByName('punishment_motive').AsString+#13+
                   'но Не заполнили поле '+#13+
                   'Год парт.наказания'+#13;
  //               dbed_gpn.SetFocus;
    //             exit;
                 proverka_:=proverka_+1;
               end;
             end;

             if  cdsOKParty.FieldByName('punishment_date').AsString<>''
             then begin
               if cdsOKParty.FieldByName('punishment_motive').AsString=''
               then begin
      //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Вы ввели Год парт.наказания,'+#13+
                   cdsOKParty.FieldByName('punishment_date').AsString+#13+
                   'но Не заполнили поле '+#13+
                   'Причина парт.наказания'+#13;
  //               DBEd_ppn.SetFocus;
    //             exit;
                 proverka_:=proverka_+1;
               end;
             end;
      //
      //
             if  cdsOKParty.FieldByName('out_party').AsString<>''
             then begin
               if cdsOKParty.FieldByName('party_outdate').AsString=''
               then begin
      //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Вы ввели Причину выхода из партии,'+#13+
                   cdsOKParty.FieldByName('out_party').AsString+#13+
                   'но Не заполнили поле '+#13+
                   'Год выхода из партии'+#13;
  //               dbed_gvp.SetFocus;
    //             exit;
                 proverka_:=proverka_+1;
               end;
             end;
      //
             if cdsOKParty.FieldByName('party_outdate').AsString<>''
             then begin
               if cdsOKParty.FieldByName('out_party').AsString=''
               then begin
      //           showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Вы ввели Год выхода из партии,'+#13+
                   cdsOKParty.FieldByName('party_outdate').ASstring +#13+
                   'но Не заполнили поле '+#13+
                   'Причина выхода из партии'+#13;
  //               dbed_pvp.SetFocus;
    //             exit;
                 proverka_:=proverka_+1;
               end;
             end;
      //
         end;
       end;

      cdsOKParty.next;

     End;

// 15: If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(29198)вкладка Отпуска';
     TabSheet_16Show(nil);
StatusBar.Panels[2].Text :='(29200)Отпуска';
     cdsOKLeave.first;
     while not cdsOKLeave.eof do begin

// отпуска
//
StatusBar.Panels[2].Text :='(29206)Отпуска';
       if cdsOKLeave.FieldByName('leave_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Вид отпуска'+#13;
//         DBLookupComboBox13.SetFocus;
  //       exit;
               proverka_:=proverka_+1;
       end else begin
         if    (cdsOKLeave.FieldByName('leave_CODE').AsString<>'4')
           and (cdsOKLeave.FieldByName('leave_CODE').AsString<>'7')
         then begin
             if cdsOKLeave.FieldByName('date_in_leave').AsString=''
             then begin
  //             showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата выхода в отпуск'+#13;
    //           DBEDdate_in_leave.SetFocus;
      //         exit;
                 proverka_:=proverka_+1;
             end;
             if cdsOKLeave.FieldByName('date_out_leave').AsString=''
             then begin
  //             showmessag e(
           ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Дата выхода из отпуска'+#13;
    //           dbedit26.SetFocus;
      //         exit;
                 proverka_:=proverka_+1;
             end;
         end;
       end;
//
//
       if cdsOKLeave.FieldByName('period_leave').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Кол-во дней отпуска'+#13;
  //       dbedit63.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKLeave.FieldByName('num_basis').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Номер приказа'+#13;
  //       dbedit62.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
       if cdsOKLeave.FieldByName('begin_year').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Рабочий год- начало'+#13;
//         dbedit60.SetFocus;
  //       exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKLeave.FieldByName('end_year').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(Таб.номер='+cdsOKPersonal.fieldbyname('TABNO').asstring+')'+'Не заполнено поле '+'Р/ год- окончание'+#13;
  //       dbedit61.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
//

      cdsOKLeave.Next;

     End;

// 16: If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
//     Then begin
StatusBar.Panels[2].Text :='(29285)вкладка Судимость';
     TabSheet_17Show(nil);
StatusBar.Panels[2].Text :='(29287)Судимость';

       if (cdsOKpersonal.FieldByName('is_Convictions').AsString<>'')
       then begin
         if (cdsOKpersonal.FieldByName('is_Convictions').AsString='1')
         and (cdsOKConvictions.recordcount=0)
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'В Сведениях для ИИАС указано "Судимость Есть"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

     cdsOKConvictions.first;
     while not cdsOKConvictions.eof do begin

// судимости
//
       if (cdsOKpersonal.FieldByName('is_Convictions').AsString<>'')
       then begin
         if cdsOKpersonal.FieldByName('is_Convictions').AsString='2'
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'В Сведениях для ИИАС указано "Судимости Нет"'+#13;
    //       exit;
                 proverka_:=proverka_+1;
         end;
       end;

       if cdsOKConvictions.FieldByName('convictions_motive').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Причина'+#13;
  //       dbedit27.SetFocus;
    //     exit;
               proverka_:=proverka_+1;
       end;
//
//
       if cdsOKConvictions.FieldByName('convictions_date').AsString=''
       then begin
//         showmessag e('Не заполнено поле '+'год');
  //       dbedit28.SetFocus;
    //     exit;
         ErMessage := ErMessage+'Не заполнено поле '+'год'+#13;
               proverka_:=proverka_+1;
       end;
//
//
      cdsOKConvictions.next;

     end;

/////////////////////--------\\\\\\\\\\\\\\\\\\\\\\

  if er_mes<>'' then  ErMessage := ErMessage+#13+er_mes;

  StatusBar.Panels[2].Text :=' ';
  if ErMessage <> '' then
  begin
               proverka_:=proverka_+1;
    ShowMessage( ErMessage);
////
    if 1=1  // не связано с подтв. в ГО
    then begin
      If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
      If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');      If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');
      try
        if num_=0
        then begin
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_okN.txt');
          System.Append(text_f);
        end else begin
          System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok3.txt');
          System.Rewrite(text_f);
        end;

        Try
          System.Writeln(text_f,ErMessage);
        Finally
          System.CloseFile(text_f);
        End;
      except
        showmessage('(28075)Не удалось сохранить данные в файл');        raise;
      end;

      if num_=0
      then begin
          try
            WinExec('notepad C:\NCI Bank\OK\Temp\err_okN.txt', SW_MAXIMIZE);
          except
            showmessage('(28084)Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_okN.txt"');          end;
      end else begin
        try
          WinExec('notepad C:\NCI Bank\OK\Temp\err_ok3.txt', SW_MAXIMIZE);
        except
          showmessage('(28090)Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok3.txt"');        end;
      end;
    end;
////
    exit;
  end else begin
        if num_=0 then begin
          try
              System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_okN.txt');
              System.append(text_f);
              Try
                System.Writeln(text_f,'ошибок нет');
              Finally
                System.CloseFile(text_f);
              End;
              WinExec('notepad C:\NCI Bank\OK\Temp\err_okN.txt', SW_MAXIMIZE);
          except
            showmessage('(28110)Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_okN.txt"');          end;
          showmessage('Готово. Ошибок нет. Введите новый отдел-должность и нажмите "Заявка".');
        end;

  end;

  StatusBar.Panels[2].Text :=' ';

end;

procedure TBOKForm.Button14Click(Sender: TObject);
var ss, ss1, s:string; // , id
k, i:Integer;
begin
  if (cdsOKAddInform.FieldByName('branch').AsString='')
  or (cdsOKAddInform.FieldByName('id').AsString='')
  or (cdsOKAddInform.FieldByName('personal_code').AsString='')
  or (cdsOKAddInform.FieldByName('addinform_code').AsString='')
  then begin
    showmessage('(29524) Прежде чем прикрепить файлы укажите основные дополнительные сведения.');
  end else begin

      with TOpenDialog.Create(Self) do
       try
         if Execute then
         begin
           s:=FileName;
           k:=0;
           for i:=length(s) downto 1 do
           begin
            k:=k+1;
             if s[i]='\' then
             begin
              ss:=copy(s,length(s)-k+2,k-1);
              ss1:=ss;
              Break;
             end;
           end;

           if  (copy(FileName,Length(FileName)-3,4) <>'.JPG')
           and (copy(FileName,Length(FileName)-3,4) <>'.jpg')
           and (copy(FileName,Length(FileName)-3,4) <>'.PDF')
           and (copy(FileName,Length(FileName)-3,4) <>'.pdf')
           then begin
             showmessage('(29883)Требуется файл формата .pdf или .jpg а не '+copy(FileName,Length(FileName)-3,4));
           end else begin
  //            EditFileNamemaxallaSpravka.Text:=FileName;

              cdsmaxallaSpravka.Close;
              with cdsmaxallaSpravka.Params
              do begin
                  clear;
                  CreateParam(ftString,'p_1' ,ptInput);
                  ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
                  CreateParam(ftString,'p_2' ,ptInput);
                  ParamByName('p_2').Value := cdsOKAddInform.FieldByName('id').AsString;
                  CreateParam(ftString,'p_3' ,ptInput);
                  ParamByName('p_3').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
            CreateParam(ftString,'p_4' ,ptInput);
            ParamByName('p_4').Value :=cdsOKAddInform.FieldByName('addinform_code').AsString; // 4 справка махалля
              end;
              LoadData(cdsmaxallaSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4' );

             if cdsmaxallaSpravka.RecordCount=0
             then begin
               cdsmaxallaSpravka.Insert;
             end else begin
               cdsmaxallaSpravka.Edit;
             end;

             cdsmaxallaSpravka.FieldByName('ok_id').Value:=cdsOKAddInform.FieldByName('id').AsString;
             cdsmaxallaSpravka.FieldByName('priznak').Value:=cdsOKAddInform.FieldByName('addinform_code').AsString; // '4';
             cdsmaxallaSpravka.FieldByName('personal_code').Value:=cdsOKAddInform.FieldByName('personal_code').AsString;
             cdsmaxallaSpravka.FieldByName('FILE_NAME').Value:=ss1;
             cdsmaxallaSpravka.FieldByName('branch').Value:=cdsOKAddInform.FieldByName('branch').AsString;
             (cdsmaxallaSpravka.FieldByName('photo') as TBlobField).LoadFromFile(FileName);

             cdsmaxallaSpravka.post;
           end;

         end;
       finally
         Free;
       end;

  end;

  if cdsmaxallaSpravka.Active
  then cdsmaxallaSpravka.Refresh;

end;

procedure TBOKForm.BitBtn185Click(Sender: TObject);
begin
      cdsmaxallaSpravka.Close;
      with cdsmaxallaSpravka.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKAddInform.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :=cdsOKAddInform.FieldByName('addinform_code').AsString; //'4'; // 4-справка махалля
      end;

       LoadData(cdsmaxallaSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

end;

procedure TBOKForm.BitBtn187Click(Sender: TObject);
var dbName:string;
begin
      cdsmaxallaSpravka.Close;
      with cdsmaxallaSpravka.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKAddInform.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :=cdsOKAddInform.FieldByName('addinform_code').AsString; //'4'; // 4-справка махалла
      end;

       LoadData(cdsmaxallaSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

     if cdsmaxallaSpravka.RecordCount=0
     then begin
       showmessage('нет данных');
     end else begin
       if not DirectoryExists(ROOT_DIR+'OK\TEMP') then
       begin
         CreateDir(ROOT_DIR+'OK\TEMP');
       end;

       cdsmaxallaSpravka.First;
       dbName:=ROOT_DIR+'OK\TEMP\'+cdsmaxallaSpravka.FieldByName('file_name').AsString;
//showmessage(dbName);
       TBlobField(cdsmaxallaSpravka.FieldByName('photo')).SaveToFile(dbName);

       OpenDlFile.FileName:=dbName;
       if OpenDlFile.Execute then
       begin
         ShellExecute(0, 'open', PChar(dbName), '', '', SW_SHOW);
       end;
     end;

end;

procedure TBOKForm.BitBtn186Click(Sender: TObject);
begin
      cdsmaxallaSpravka.Close;
      with cdsmaxallaSpravka.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOKAddInform.FieldByName('id').AsString;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value :=cdsOKAddInform.FieldByName('addinform_code').AsString; //'4'; // 4-справка махалля
      end;

       LoadData(cdsmaxallaSpravka, 'select * from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3 and priznak=:p_4');

end;

procedure TBOKForm.cdsMaxallaSpravkaAfterOpen(DataSet: TDataSet);
begin
  If dsOKAddInform.DataSet.Active Then
  Begin
    cdsMAXALLASpravka.MasterSource    := dsOKConvictions;
    cdsMAXALLASpravka.IndexFieldNames := 'branch;personal_code;ok_id';
    cdsMAXALLASpravka.MasterFields    := 'branch;personal_code;id';
  End;

end;

procedure TBOKForm.BitBtn188Click(Sender: TObject);
begin
  If  (not cdsOK_diplom.IsEmpty) Then
         Begin
           cdsOK_diplom.Delete;
           cdsOK_AfterPost(dsOK_diplom.DataSet);
         end;
end;

procedure TBOKForm.bbSudDel3Click(Sender: TObject);
begin
  If  (not cdsSpravka.IsEmpty) Then
         Begin
           cdsSpravka.Delete;
           cdsOK_AfterPost(dsSpravka.DataSet);
         end;

end;

procedure TBOKForm.BitBtn180Click(Sender: TObject);
begin
  If  (not cdsMAXALLASpravka.IsEmpty) Then
         Begin
           cdsMAXALLASpravka.Delete;
           cdsOK_AfterPost(dsMAXALLASpravka.DataSet);
         end;

end;

procedure TBOKForm.BitBtn173Click(Sender: TObject);
var
// old - филиал откуда копируем сотрудника
// new - филиал куда копируем сотрудника, т.е. текущий
  old_personal_code_, old_filial_schema_, old_family_,old_branch_, old_nps_id_ : string;
  new_personal_code_, new_tabno_ : string;
  r_line_ : string;
  v_ : variant;
  tabno_count_ : integer;
const old_status_code_='4'; // уволен
      new_status_code_='1'; // новый
begin
// проверить что новый таб.номер не занят в текущем филиале
  old_branch_   := edCopyMfo.text;
  old_nps_id_ :=  edCopyNPS_ID.text;
  old_family_ := edCopyFamily.text;
  new_tabno_ := edCopyNewTabno.text;
  tabno_count_:=getsqlresultpar('select count(tabno) from ok_personal'+
    ' where branch=:p_1'+
    ' and tabno=:p_2', branch, new_tabno_);
  if tabno_count_<>0
  then begin
    showmessage('(29689)Таб.номер '+new_tabno_+' уже используется в текущем филиале '+branch);
  end else begin
    v_:=getsqlresultpar('select USER_NAME from ss_dblink_branch where branch=:p_1',old_branch_ );
    if varisnull(v_)
    then begin
      old_filial_schema_:='';
    end else begin
      old_filial_schema_:=v_;
    end;

    if old_filial_schema_=''
    then begin
      showmessage('(29701)нет доступа или не найдено мфо "'+old_branch_+'" в таблице ss_dblink_branch');
    end else begin
  // проверить наличие в том филиале
      tabno_count_:=getsqlresultpar('select count(nps_id) from '+old_filial_schema_+'.ok_personal'+
            ' where branch=:p_1'+
            ' and nps_id=:p_2'+
            ' and upper(family)=upper(:p_3)'+
            ' and status_code=:p_4', old_branch_,old_nps_id_,old_family_,old_status_code_ );
      if tabno_count_=0
      then begin
        showmessage('(29639)Уволенный Сотрудник не найден в филиале '+old_branch_+#13+
          ' Фамилия '+old_family_+'   НПС '+old_nps_id_);
      end else begin

  // скопировать но с текущим мфо и другими id и новым таб.номером
        old_personal_code_ := getsqlresultpar('select personal_code'+
        ' from '+old_filial_schema_+'.ok_personal'+
            ' where branch=:p_1'+
            ' and nps_id=:p_2'+
            ' and upper(family)=upper(:p_3)'+
            ' and status_code=:p_4', old_branch_,old_nps_id_,old_family_,old_status_code_ );

        v_ := getsqlresult('select max(personal_code)+1 from ok_personal');
        if varisnull(v_)
        then begin
          new_personal_code_:='1';
        end else begin
          new_personal_code_:=v_;
        end;

        try
          r_line_:='29732';
          execsqlpar('insert into ok_personal (ID,STATUS_CODE,PERSONAL_CODE,TABNO,EMP_CODE,'+
            'INS_DATE,BRANCH,SALARY_CODE,FAMILY,FIRST_NAME,PATRONYMIC,GENDER_CODE,BIRTHDAY,REGION_ID,DISTR,'+
            'NATIONALITY_CODE,FAMILY_STATUS_CODE,REG_TYPE_CODE,HOME_ADDRESS,HOME_ADDRESSFACT,'+
            'PASS_SERIYA,PASS_NUM,PASS_DATE,PASS_REG,RECORD_BOOK_NUMBER,RECORD_BOOK_SERIES,TELEFON,'+
            'PROFMEMBER,EDUCATION_TITLE_CODE,BIRTHPLACE,BASIS_NUM,BASIS_DATE,LEAVE_CODE,NPS_ID,SPECIAL_CODE,'+
            'COD_DISTR_UVD,COD_DISTR_PRIM,COD_STR_BIRTH,COD_OBL_PRIM,COD_PLACE_BIRTH_PRIM,COD_SITIZENT,'+
            'COD_STR_SITIZENT,COD_STR_LIVE,COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_DISTR_LIVE,COD_DISTR_LIVE_PRIM,'+
            'CODE_NACI_PRIM,CHECK_KFS,IS_BOSS,BANK_SPEC,NOTICE,INN,HOME_ADDRESSFACT_REGION_ID,'+
            'HOME_ADDRESSFACT_DISTR,HOME_ADDRESS_REGION_ID,HOME_ADDRESS_DISTR,PASSPORT_TYPE_CODE,REGPLACE_CODE,'+
            'PASS_DATE_END,LIVE_PLACE,BIRTHPLACE_POINT,MAIDEN_FAMILY,SPEC_IKKI,REG_DATE_END,TRUD_SOGL,'+
            'APPLICATION_DATE,REPLY_DATE,IS_PARTY,IS_ACADEMIC,IS_DEGREE,IS_AWARD,IS_SCIENTIFIC,IS_VOYAGE,'+
            'IS_CONVICTIONS,IS_LANGUAGE,IS_RISE,IS_ELECTION,IS_PREMIUM,IS_ARMY'+
                ') select '+ //(все поля кроме id)
            'SEQ_OK_personal.Nextval,:p_1 ,:p_2 ,:p_3 ,:p_4 ,'+
            'sysDATE,info.getBRANCH,SALARY_CODE,FAMILY,FIRST_NAME,PATRONYMIC,GENDER_CODE,BIRTHDAY,REGION_ID,DISTR,'+
            'NATIONALITY_CODE,FAMILY_STATUS_CODE,REG_TYPE_CODE,HOME_ADDRESS,HOME_ADDRESSFACT,'+
            'PASS_SERIYA,PASS_NUM,PASS_DATE,PASS_REG,RECORD_BOOK_NUMBER,RECORD_BOOK_SERIES,TELEFON,'+
            'PROFMEMBER,EDUCATION_TITLE_CODE,BIRTHPLACE,BASIS_NUM,BASIS_DATE,LEAVE_CODE,NPS_ID,SPECIAL_CODE,'+
            'COD_DISTR_UVD,COD_DISTR_PRIM,COD_STR_BIRTH,COD_OBL_PRIM,COD_PLACE_BIRTH_PRIM,COD_SITIZENT,'+
            'COD_STR_SITIZENT,COD_STR_LIVE,COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_DISTR_LIVE,COD_DISTR_LIVE_PRIM,'+
            'CODE_NACI_PRIM,CHECK_KFS,IS_BOSS,BANK_SPEC,NOTICE,INN,HOME_ADDRESSFACT_REGION_ID,'+
            'HOME_ADDRESSFACT_DISTR,HOME_ADDRESS_REGION_ID,HOME_ADDRESS_DISTR,PASSPORT_TYPE_CODE,REGPLACE_CODE,'+
            'PASS_DATE_END,LIVE_PLACE,BIRTHPLACE_POINT,MAIDEN_FAMILY,SPEC_IKKI,REG_DATE_END,TRUD_SOGL,'+
            'APPLICATION_DATE,REPLY_DATE,IS_PARTY,IS_ACADEMIC,IS_DEGREE,IS_AWARD,IS_SCIENTIFIC,IS_VOYAGE,'+
            'IS_CONVICTIONS,IS_LANGUAGE,IS_RISE,IS_ELECTION,IS_PREMIUM,IS_ARMY'+
            ' from '+old_filial_schema_+'.ok_personal'+
                ' where branch=:p_5'+
                ' and personal_code=:p_6',
                '1',new_personal_code_ ,new_tabno_ ,UserId,
                old_branch_,old_personal_code_ );

//вставка дополнительных сведений со всех таблиц
{
OK_ACADEMIC
OK_ADDINFORM
OK_ARMY
OK_ATTESTATION
OK_AWARD
OK_BUSINESS_VOYAGE

OK_CHANGE_FIO

OK_CONVICTIONS

OK_DEGREE

OK_EDUCATION

OK_ELECTION

OK_HOSPITAL

OK_INCREASE

OK_KURS

OK_LANGUAGE

OK_LEAVE

OK_PARTY

OK_PENALTY

OK_PERIOD

OK_POST

OK_PREMIUM

OK_PRIVILEGE

OK_RELATION

OK_RISE

OK_SCIENTIFIC

OK_VOYAGE

OK_YOUTH
}
          r_line_:='29815 (* Ученые звания)';
            execsqlpar('insert into ok_academic (BRANCH,PERSONAL_CODE,ACADEMIC_CODE,ACADEMIC_DATE,STATE,EMP_CODE,INS_DATE) select'+
              ' info.getBRANCH,:p_1,ACADEMIC_CODE,ACADEMIC_DATE,STATE,:p_2,sysdate'+
              ' from '+old_filial_schema_+'.ok_academic'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29824 (Дополнительные сведения)';
            execsqlpar('insert into OK_ADDINFORM (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE, ADDINFORM_DATE,CHARACTER_ADDINFORM,ESTIMATION) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, ADDINFORM_DATE,CHARACTER_ADDINFORM,ESTIMATION'+
              ' from '+old_filial_schema_+'.OK_ADDINFORM'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29833 (* Воинская служба)';
            execsqlpar('insert into OK_ARMY (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'ARMY_CODE,FITNESS_ARMY_CODE,SPECIAL_ARMY,NUMBER_VUS,CODE_ARMY_POST,NAME_ARMY_OFFICE,SPECREG_NUMBER,'+
              'ARMY_GROUP_CODE,CATEGORY_ARMY_CODE,MILITARY_RANK_CODE,STAFF_CODE,TYPE_FORCE_CODE'+
              ') select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'ARMY_CODE,FITNESS_ARMY_CODE,SPECIAL_ARMY,NUMBER_VUS,CODE_ARMY_POST,NAME_ARMY_OFFICE,SPECREG_NUMBER,'+
              'ARMY_GROUP_CODE,CATEGORY_ARMY_CODE,MILITARY_RANK_CODE,STAFF_CODE,TYPE_FORCE_CODE'+
              ' from '+old_filial_schema_+'.OK_ARMY'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

{          r_line_:='29847 нигде не используется?';
            execsqlpar('insert into OK_ATTESTATION (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'DATE_ATTESTATION,NUM_ATTESTATION'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'DATE_ATTESTATION,NUM_ATTESTATION'+
              ' from '+old_filial_schema_+'.OK_ATTESTATION'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );
}
          r_line_:='29859 (* Награды)';
            execsqlpar('insert into OK_AWARD (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'AWARD_DATE,AWARD_INFO,AWARD_DATE_MM,AWARD_DATE_DD'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'AWARD_DATE,AWARD_INFO,AWARD_DATE_MM,AWARD_DATE_DD'+
              ' from '+old_filial_schema_+'.OK_AWARD'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29871 (Командировки)';
            execsqlpar('insert into OK_BUSINESS_VOYAGE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'CITY_CODE,KV_KURS_CODE,DATE_OPEN,DATE_CLOSE,NUMBER_DAY,ORG_BUSINESS_VOYAGE_CODE,'+
              'THEME_BUSINESS_VOYAGE_CODE,CODE_STR,ORDER_NUM,ORDER_DATE,PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'CITY_CODE,KV_KURS_CODE,DATE_OPEN,DATE_CLOSE,NUMBER_DAY,ORG_BUSINESS_VOYAGE_CODE,'+
              'THEME_BUSINESS_VOYAGE_CODE,CODE_STR,ORDER_NUM,ORDER_DATE,PRIM'+
              ' from '+old_filial_schema_+'.OK_BUSINESS_VOYAGE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29885 (Сведения об изменении ФИО)';
            execsqlpar('insert into OK_CHANGE_FIO (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'FAMILY,FIRST_NAME,PATRONYMIC,CHANGE_DATE,CHANGE_MOTIVE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'FAMILY,FIRST_NAME,PATRONYMIC,CHANGE_DATE,CHANGE_MOTIVE'+
              ' from '+old_filial_schema_+'.OK_CHANGE_FIO'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29897 (* Судимости)';
            execsqlpar('insert into OK_CONVICTIONS (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'CONVICTIONS_DATE,CONVICTIONS_MOTIVE,F1_FIO,F2_KIMNING,F3_SANA,F4_SABAB1,F4_SABAB2,'+
              'F4_SABAB3,F5_NATIJA1,F5_NATIJA2,F5_NATIJA3,F6_CHORA,F7_MALUMOT1,F7_MALUMOT2,CONVICTIONS_SANA'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'CONVICTIONS_DATE,CONVICTIONS_MOTIVE,F1_FIO,F2_KIMNING,F3_SANA,F4_SABAB1,F4_SABAB2,'+
              'F4_SABAB3,F5_NATIJA1,F5_NATIJA2,F5_NATIJA3,F6_CHORA,F7_MALUMOT1,F7_MALUMOT2,CONVICTIONS_SANA'+
              ' from '+old_filial_schema_+'.OK_CONVICTIONS'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29911 (* Ученые степени)';
            execsqlpar('insert into OK_DEGREE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'DEGREE_CODE,DEGREE_DATE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'DEGREE_CODE,DEGREE_DATE'+
              ' from '+old_filial_schema_+'.OK_DEGREE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29923 (* Образование)';
            execsqlpar('insert into OK_EDUCATION (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'EDUCATION_CODE,BASIS_CODE,INSTITUTION_CODE,BEGIN_DATE,END_DATE,PROFESSION_PERSONAL,'+
                'QUALIFICATION_CODE,DIPLOM_NUM,COD_VUZ_PRIM,CURS,FAKULTET,NOSTRA,NOSTRA_SERIES,NOSTRA_NUMBER,'+
                'NOSTRA_DATE,DIPLOM_DATE,BEGIN_DATE_MM,BEGIN_DATE_DD,'+
                'END_DATE_MM,END_DATE_DD,EDUCATION_END,EDUCATION_CITY,EDUCATION_COUNT_CODE,VID_EDUCATION_CODE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'EDUCATION_CODE,BASIS_CODE,INSTITUTION_CODE,BEGIN_DATE,END_DATE,PROFESSION_PERSONAL,'+
                'QUALIFICATION_CODE,DIPLOM_NUM,COD_VUZ_PRIM,CURS,FAKULTET,NOSTRA,NOSTRA_SERIES,NOSTRA_NUMBER,'+
                'NOSTRA_DATE,DIPLOM_DATE,BEGIN_DATE_MM,BEGIN_DATE_DD,'+
                'END_DATE_MM,END_DATE_DD,EDUCATION_END,EDUCATION_CITY,EDUCATION_COUNT_CODE,VID_EDUCATION_CODE'+
              ' from '+old_filial_schema_+'.OK_EDUCATION'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29941 (* Избрание)';
            execsqlpar('insert into OK_ELECTION (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'ELECTION_CODE,ELECTION_POST,ELECTION_DATE_BEGIN,ELECTION_DATE_END,ELECTION_ADDRESS,'+
              'ELECTION_NAME,ELECTION_DATE_BEGIN_MM,ELECTION_DATE_BEGIN_DD,ELECTION_DATE_END_MM,ELECTION_DATE_END_DD'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'ELECTION_CODE,ELECTION_POST,ELECTION_DATE_BEGIN,ELECTION_DATE_END,ELECTION_ADDRESS,'+
              'ELECTION_NAME,ELECTION_DATE_BEGIN_MM,ELECTION_DATE_BEGIN_DD,ELECTION_DATE_END_MM,ELECTION_DATE_END_DD'+
              ' from '+old_filial_schema_+'.OK_ELECTION'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29955';
            execsqlpar('insert into OK_HOSPITAL (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'HOSPITAL_CODE,HOSPITAL_DOC,DATE_OPEN,DATE_CLOSE,NUMBER_DAY,WORK_PERIOD,PERCENTAGE,'+
              'DIAGNOSIS,DATE_HOSPITAL,PRIM_HOSPITAL,SHIFR,PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'HOSPITAL_CODE,HOSPITAL_DOC,DATE_OPEN,DATE_CLOSE,NUMBER_DAY,WORK_PERIOD,PERCENTAGE,'+
              'DIAGNOSIS,DATE_HOSPITAL,PRIM_HOSPITAL,SHIFR,PRIM'+
              ' from '+old_filial_schema_+'.OK_HOSPITAL'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29969';
            execsqlpar('insert into OK_INCREASE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'INCREASE_CODE,INCREASE_VIEW,INCREASE_PERCENTAGE,RAZN,DATE_OPEN,DATE_CLOSE,'+
              'ORDER_NUM,ORDER_DATE,PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'INCREASE_CODE,INCREASE_VIEW,INCREASE_PERCENTAGE,RAZN,DATE_OPEN,DATE_CLOSE,'+
              'ORDER_NUM,ORDER_DATE,PRIM'+
              ' from '+old_filial_schema_+'.OK_INCREASE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29983 (Курсы)';
            execsqlpar('insert into OK_KURS (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'FIO,KV_KURS_CODE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'FIO,KV_KURS_CODE'+
              ' from '+old_filial_schema_+'.OK_KURS'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='29995 (* Языки)';
            execsqlpar('insert into OK_LANGUAGE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'LANGUAGE_CODE,LEVEL_CODE,STATE,COD_LANG_PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'LANGUAGE_CODE,LEVEL_CODE,STATE,COD_LANG_PRIM'+
              ' from '+old_filial_schema_+'.OK_LANGUAGE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

{          r_line_:='30007 (Отпуска же не надо копировать)';
            execsqlpar('insert into OK_LEAVE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'LEAVE_CODE,BEGIN_YEAR,END_YEAR,PERIOD_LEAVE,DATE_IN_LEAVE,DATE_OUT_LEAVE,'+
              'MOTIVE_LEAVE,NUM_BASIS,DATE_BASIS,DATE_RECALL_BEGIN,DATE_RECALL_END,DATE_ORDER_RECALL'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'LEAVE_CODE,BEGIN_YEAR,END_YEAR,PERIOD_LEAVE,DATE_IN_LEAVE,DATE_OUT_LEAVE,'+
              'MOTIVE_LEAVE,NUM_BASIS,DATE_BASIS,DATE_RECALL_BEGIN,DATE_RECALL_END,DATE_ORDER_RECALL'+
              ' from '+old_filial_schema_+'.OK_LEAVE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );
}
          r_line_:='30021 (* Партии)';
            execsqlpar('insert into OK_PARTY (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'PARTY_CODE,OUT_PARTY,PARTY_DATE,PARTY_OUTDATE,PUNISHMENT_MOTIVE,PUNISHMENT_DATE,CODE_PARTII_PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'PARTY_CODE,OUT_PARTY,PARTY_DATE,PARTY_OUTDATE,PUNISHMENT_MOTIVE,PUNISHMENT_DATE,CODE_PARTII_PRIM'+
              ' from '+old_filial_schema_+'.OK_PARTY'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30033 (Сведения о взысканиях)';
            execsqlpar('insert into OK_PENALTY (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+ 
              'PENALTY_CODE,PENALTY_MOTIVE,PENALTY_DATE,PENALTY_NUM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'PENALTY_CODE,PENALTY_MOTIVE,PENALTY_DATE,PENALTY_NUM'+
              ' from '+old_filial_schema_+'.OK_PENALTY'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30045 (* Сведения о работе (МЕХНАТ ФАОЛИЯТИ))';
            execsqlpar('insert into OK_PERIOD (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'IN_OFFICE_DATE,OUT_OFFICE_DATE,OFFICE_NAME,OFFICE_ADDRESS,ESTABLISHED_POST,'+
              'ESTABLISHED_DEPARTMENT,BASE_MOVE_CODE,TYPE_PERIOD_CODE,ARTICLE_CODE,BASIS_NUM,BASIS_DATE,PRIZ_SYSTEM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'IN_OFFICE_DATE,OUT_OFFICE_DATE,OFFICE_NAME,OFFICE_ADDRESS,ESTABLISHED_POST,'+
              'ESTABLISHED_DEPARTMENT,BASE_MOVE_CODE,TYPE_PERIOD_CODE,ARTICLE_CODE,BASIS_NUM,BASIS_DATE,PRIZ_SYSTEM'+
              ' from '+old_filial_schema_+'.OK_PERIOD'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30059 (* Гос премии)';
            execsqlpar('insert into OK_PREMIUM (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'PREMIUM_DATE,PREMIUM_NAME'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'PREMIUM_DATE,PREMIUM_NAME'+
              ' from '+old_filial_schema_+'.OK_PREMIUM'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30071 (Льготы)';
            execsqlpar('insert into OK_PRIVILEGE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'PRIVILEGE_CODE,PRIVILEGE_DOC,DATE_OPEN,DATE_CLOSE,PRIM'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'PRIVILEGE_CODE,PRIVILEGE_DOC,DATE_OPEN,DATE_CLOSE,PRIM'+
              ' from '+old_filial_schema_+'.OK_PRIVILEGE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30083 (* Родственные отношения)';
            execsqlpar('insert into OK_RELATION (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'COD_OBL_BIRTH_PRIM,COD_CITY_BIRTH,COD_CITY_BIRTH_PRIM,DD,MM,DD_DEATH,MM_DEATH,RELATION_CODE,'+
              'RELATION_FAMILY,RELATION_NAME,RELATION_PATRONYMIC,RELATION_BIRTHDAY,RELATION_DEATHDAY,'+//RELATION_BIRTHPLACE,'+
              'RELATION_OFFICE,RELATION_POST,RELATION_HOME_ADDRESS,COD_STR_LIVE,COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_CITY,'+
              'COD_CITY_PRIM,COD_STR_LIVE_PRIM,COD_STR_BIRTH,COD_STR_BIRTH_PRIM,COD_OBL_BIRTH'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'COD_OBL_BIRTH_PRIM,COD_CITY_BIRTH,COD_CITY_BIRTH_PRIM,DD,MM,DD_DEATH,MM_DEATH,RELATION_CODE,'+
              'RELATION_FAMILY,RELATION_NAME,RELATION_PATRONYMIC,RELATION_BIRTHDAY,RELATION_DEATHDAY,'+//RELATION_BIRTHPLACE,'+
              'RELATION_OFFICE,RELATION_POST,RELATION_HOME_ADDRESS,COD_STR_LIVE,COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_CITY,'+
              'COD_CITY_PRIM,COD_STR_LIVE_PRIM,COD_STR_BIRTH,COD_STR_BIRTH_PRIM,COD_OBL_BIRTH'+
              ' from '+old_filial_schema_+'.OK_RELATION'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30101 (* Квалификация)';
            execsqlpar('insert into OK_RISE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'RISE_DATE_YEAR,RISE_INFO,RISE_DATE_MM,RISE_DATE_DD'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'RISE_DATE_YEAR,RISE_INFO,RISE_DATE_MM,RISE_DATE_DD'+
              ' from '+old_filial_schema_+'.OK_RISE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30113 (* Научные работы)';
            execsqlpar('insert into OK_SCIENTIFIC (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'SCIENTIFIC_INFO,SCIENTIFIC_DATE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'SCIENTIFIC_INFO,SCIENTIFIC_DATE'+
              ' from '+old_filial_schema_+'.OK_SCIENTIFIC'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30125 (* Зарубежные поездки)';
            execsqlpar('insert into OK_VOYAGE (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'VOYAGE_DATE,VOYAGE_LAND,VOYAGE_INFO,VOYAGE_STR,DATA_IN,VOYAGE_DATE_MM,VOYAGE_DATE_DD,DATA_IN_MM,DATA_IN_DD'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'VOYAGE_DATE,VOYAGE_LAND,VOYAGE_INFO,VOYAGE_STR,DATA_IN,VOYAGE_DATE_MM,VOYAGE_DATE_DD,DATA_IN_MM,DATA_IN_DD'+
              ' from '+old_filial_schema_+'.OK_VOYAGE'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

          r_line_:='30137 (Молодежные организации)';
            execsqlpar('insert into OK_YOUTH (BRANCH,PERSONAL_CODE,EMP_CODE,INS_DATE,'+
              'YOUTH_CODE,IN_DATE,OUT_DATE'+
              ' ) select'+
              ' info.getBRANCH,:p_1,:p_2,sysdate, '+
              'YOUTH_CODE,IN_DATE,OUT_DATE'+
              ' from '+old_filial_schema_+'.OK_YOUTH'+
                ' where branch=:p_3'+
                ' and personal_code=:p_4',
                 new_personal_code_ ,UserId,
                 old_branch_,old_personal_code_ );

            execsql('commit');
        except on e:exception
          do begin
            execsql('rollback');
            showmessage('('+r_line_+')Не удалось скопировать данные сотрудника'+#13+e.message);
          end;
        end;


      end;

    end;

  // перейти к новому сотруднику
////////////////////////////////
    cdsOKPersonal.BeforePost := nil;
    cdsOKPersonal.DisableControls;

//showmessage('cdsOKPersonal '  +SQL_OKPersonal + w);
    cdsOKPersonal.Close;
    with cdsOKPersonal.params
    do begin
          clear;
          CreateParam(ftString,'P_BRANCH' ,ptInput);
          ParamByName('P_BRANCH').Value := curBranch;

          CreateParam(ftInteger,'P_ID' ,ptInput);
          ParamByName('P_ID').Value := new_personal_code_;
    end;
    LoadData(cdsOKPersonal,  SQL_OKPersonal + ' where p.branch=:P_BRANCH and personal_code=:P_ID');
    cdsOKPersonal.Close;

    loaddata(cdsSS_OK_GOSUBMIT,'select * from SS_OK_GOSUBMIT');
// добавление смотрящих-выше-полей
    addLookUpField_OkPersonal;


    cdsOKPersonal.Open;
    cdsOKPersonal.EnableControls;

    cdsOKPersonal.BeforePost := cdsOK_BeforePost;



  actNew.Checked     := False ;
  actTable.Checked   := True;
  actForm.Checked    := False;
  actRef.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked   := False;

  actUndoChanges.Enabled := False;
  actNew.Enabled     := True;
  actTable.Enabled   := True;
  actForm.Enabled    := True;
  actRef.Enabled     := True;
  actDetails.Enabled := True;
  actReAccept.Enabled   := True;
  actFilter.Enabled  := True;

////////////////////////////////
  actFormExecute(nil);

  end;

end;

procedure TBOKForm.actProverkafilialExecute(Sender: TObject);
var rukovod_,z, z2: integer;
  education_title_code_, dd_end,mm_end,dd_,mm_, party_code_show, S_ID,check_date_message_,  sql_,ErMessage: string;
  QuantityPost_ , QuantityPostReal_ : integer; // ошибка в 28393 строке - а прыгает на 28370 глючит дельфи...
// text_f : TextFile;
    raznica:double;
    v:variant;
  cdsOKTEMP1,
  cdsOKTEMP2,
  cdsOKTEMP3,
  cdsOKTEMP4,
  cdsOKTEMP5,
  cdsOKTEMP6,
  cdsOKTEMP7,
  cdsOKTEMP8,
  cdsOKTEMP9,
  cdsOKTEMP10,
  cdsOKTEMP11,
  cdsOKTEMP12,
  cdsOKTEMP13,
  cdsOKTEMP14,
  cdsOKTEMP15,
  cdsOKTEMP16  : TClientDataSet;

begin
//
  memotest.LineS.Clear;
  MemoTest.lines.add(datetostr(now)+' '+TimeToStr(Time));

  cdsOKTEMP1:=tclientdataset.Create(Self);
  cdsOKTEMP2:=tclientdataset.Create(Self);
  cdsOKTEMP3:=tclientdataset.Create(Self);
  cdsOKTEMP4:=tclientdataset.Create(Self);
  cdsOKTEMP5:=tclientdataset.Create(Self);
  cdsOKTEMP6:=tclientdataset.Create(Self);
  cdsOKTEMP7:=tclientdataset.Create(Self);
  cdsOKTEMP8:=tclientdataset.Create(Self);
  cdsOKTEMP9:=tclientdataset.Create(Self);
  cdsOKTEMP10:=tclientdataset.Create(Self);
  cdsOKTEMP11:=tclientdataset.Create(Self);
  cdsOKTEMP12:=tclientdataset.Create(Self);
  cdsOKTEMP13:=tclientdataset.Create(Self);
  cdsOKTEMP14:=tclientdataset.Create(Self);
  cdsOKTEMP15:=tclientdataset.Create(Self);
  cdsOKTEMP16:=tclientdataset.Create(Self);

     cdsOKTEMP1.close;
      with cdsOKTEMP1.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP1, SQL_OKEducation+' where branch=:p_1');

      cdsOKTEMP2.close;
      with cdsOKTEMP2.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP2, SQL_OKacademic+' where branch=:p_1');

      cdsOKTEMP3.close;
      with cdsOKTEMP3.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP3, SQL_OKDegree+' where branch=:p_1');

      cdsOKTEMP4.close;
      with cdsOKTEMP4.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP4, SQL_OKaward+' where branch=:p_1');

      cdsOKTEMP5.close;
      with cdsOKTEMP5.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP5, SQL_OKScientific+' where branch=:p_1');

      cdsOKTEMP6.close;
      with cdsOKTEMP6.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP6, SQL_OKvoyage+' where branch=:p_1');

      cdsOKTEMP7.close;
      with cdsOKTEMP7.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP7, SQL_OKlanguage+' where branch=:p_1');

      cdsOKTEMP8.close;
      with cdsOKTEMP8.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP8, SQL_OKrelation+' where branch=:p_1');

      cdsOKTEMP9.close;
      with cdsOKTEMP9.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP9, SQL_OKperiod+' where branch=:p_1');

      cdsOKTEMP10.close;
      with cdsOKTEMP10.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP10, SQL_OKrise+' where branch=:p_1');

      cdsOKTEMP11.close;
      with cdsOKTEMP11.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP11, SQL_OKElection+' where branch=:p_1');

      cdsOKTEMP12.close;
      with cdsOKTEMP12.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP12, SQL_OKPremium+' where branch=:p_1');

      cdsOKTEMP13.close;
      with cdsOKTEMP13.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP13, SQL_OKArmy+' where branch=:p_1');

      cdsOKTEMP14.close;
      with cdsOKTEMP14.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP14, SQL_OKParty+' where branch=:p_1');

      cdsOKTEMP15.close;
      with cdsOKTEMP15.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP15, SQL_OKleave+' where branch=:p_1');

      cdsOKTEMP16.close;
      with cdsOKTEMP16.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
      end;
      LoadData(cdsOKTEMP16, SQL_OKConvictions+' where branch=:p_1');
///////////////



      cdsOkPersonalcopy.Close;
      with cdsOkPersonalcopy.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := '2';
          CreateParam(ftString,'p_5' ,ptInput);
          ParamByName('p_5').Value := '5';
      end;

  loaddata(cdsOkPersonalcopy,'select * from ok_personal'+
    ' where branch=:p_1'+
    ' and status_code in (:p_2,:p_5)'+
    ' order by post_code'
  );

  cdsOkPersonalcopy.first;

  while not cdsOkPersonalcopy.eof
  do begin
        rukovod_ :=0;
        if cdsOkPersonalcopy.fieldbyname('POST_CODE_NEW').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                 '79',cdsOkPersonalcopy.fieldbyname('POST_CODE_NEW').asstring);
        if cdsOkPersonalcopy.fieldbyname('POST_CODE').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                '79',cdsOkPersonalcopy.fieldbyname('POST_CODE').asstring);


    //////// проверка лист Подробности ////////
// проверка полей со страницы Form
        ErMessage := 'Таб.номер "'+cdsOkPersonalcopy.fieldbyname('tabno').asstring +'" '+ cdsOkPersonalcopy.fieldbyname('family').asstring;
        memotest.lines.add(ErMessage); ErMessage:='';

        if cdsOkPersonalcopy.FieldByName('ZP_RATE_CODE').AsString=''
        then begin ErMessage := ErMessage+' "Ставка"-пусто ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('TRUD_SOGL').AsString=''
        then begin ErMessage := ErMessage+' "По трудовому соглашению"-пусто ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('Reg_Type_code').AsString=''
        then begin ErMessage := ErMessage+' "Тип прописки" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('PASS_DATE').AsString=''
        then begin ErMessage := ErMessage+' "Дата выдачи паспорта" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('PASS_NUM').AsString=''
        then begin ErMessage := ErMessage+' "Номер паспорта" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('PASS_SERIYA').AsString=''
        then begin ErMessage := ErMessage+' "Серия паспорта" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        if cdsOkPersonalcopy.FieldByName('profmember').AsString=''
        then begin ErMessage := ErMessage+' "Профсоюз" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

  if  ( cdsOkPersonalcopy.FieldByName('gender_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Пол" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('nationality_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Национальность" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('family_status_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Семейное положение" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('FAMILY').AsString='')
  then begin
    ErMessage := ErMessage+' " * Фамилия" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('FIRST_NAME').AsString='')
  then begin
    ErMessage := ErMessage+' " * Имя" ';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

    sql_ := 'select count(id) from ok_personal where branch=:p_1'+ //cdsOkPersonalcopy.FieldByName('branch').AsString+
        ' and tabno=:p_2'+ //cdsOkPersonalcopy.FieldByName('tabno').AsString+
        ' and personal_code<>:p_3'; //+cdsOkPersonalcopy.FieldByName('personal_code').AsString;

      z := getSQLresultpar(sql_,cdsOkPersonalcopy.FieldByName('branch').AsString,
          cdsOkPersonalcopy.FieldByName('tabno').AsString,
          cdsOkPersonalcopy.FieldByName('personal_code').AsString
      );
      if (z<>0)
      then begin
        ErMessage := ErMessage+ 'Табельный номер '+cdsOkPersonalcopy.FieldByName('tabno').AsString+' уже используется! Измените табельный номер и сохраните данные.';
        memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end;


  if cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if cdsOkPersonalcopy.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'+ //cdsOKPERSONAL.FieldByName('nps_id').AsString+
        ' and personal_code<>:p_2'; //+cdsOKPERSONAL.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOKPERSONALcopy.FieldByName('nps_id').AsString,
                cdsOKPERSONALcopy.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+'Пенсионный ИН '+cdsOKPERSONALcopy.FieldByName('nps_id').AsString+' уже используется!'+' Измените Пенсионный ИН и сохраните данные.';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;
      except on e:exception
        do begin
//          showmessage('10333)нпс='+cdsOKPERSONALcopy.FieldByName('nps_id').AsString+' код сотрудника='+
  //              cdsOKPERSONALcopy.FieldByName('personal_code').AsString+
    //        e.message);

          ErMessage:='нпс='+cdsOKPERSONALcopy.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOKPERSONALcopy.FieldByName('personal_code').AsString+
            e.message;
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';


        end;
      end;


      z := length(cdsOkPersonalcopy.FieldByName('inn').AsString);
      if (z<>9) //and (z<>0)
      then begin
        ErMessage:=ErMessage+'поле ИНН должно содержать 9 цифр'+
          'вы ввели ИНН='+cdsOkPersonalcopy.FieldByName('inn').AsString+
          'только '+IntToStr(z)+' символов';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end;

      z := length(cdsOkPersonalcopy.FieldByName('nps_id').AsString);
      if (z<>14) //and (z<>0)
      then begin
        ErMessage:=ErMessage+'поле Пенсионный ИН должно содержать 14 цифр'+
          'вы ввели ИН='+cdsOkPersonalcopy.FieldByName('nps_id').AsString+
          'только '+IntToStr(z)+' символов';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end;
    end;
  end;

  if  ( cdsOkPersonalcopy.FieldByName('reg_type_code').AsString='2')
  and (   cdsOkPersonalcopy.FieldByName('REG_DATE_END').AsString='')
  then begin
    ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if (cdsOkPersonalcopy.FieldByName('status_code').AsString<>'2')
  then begin
//    cdsOkPersonalcopy.FieldByName('special_code').AsString:='';
  end else begin
   if HeadBranch_<>'09006' // временно(т.е. навсегда) отключено в халке   // не связано с подтв. в ГО
   then begin
    QuantityPost_     :=-1;
    QuantityPostReal_ :=-1;

    try
    sql_ :=  'select ok_service.get_QuantityPost(:p_1,:p_2,:p_3,:p_4) from dual'   ;
    QuantityPost_ := GetSQLResultpar(sql_,
      cdsOkPersonalcopy.FieldByName('branch').AsString ,
      cdsOkPersonalcopy.FieldByName('department_code').AsString ,
      cdsOkPersonalcopy.FieldByName('post_code').AsString ,
      cdsOkPersonalcopy.FieldByName('special_code').AsString
    );

    sql_ := 'select ok_service.get_QuantityPostReal(:p_1,:p_2,:p_3,:p_4) from dual'   ;

    QuantityPostReal_ := GetSQLResultpar(sql_,
      cdsOkPersonalcopy.FieldByName('branch').AsString ,
      cdsOkPersonalcopy.FieldByName('department_code').AsString ,
      cdsOkPersonalcopy.FieldByName('post_code').AsString ,
      cdsOkPersonalcopy.FieldByName('special_code').AsString
    );

    except on e:exception
      do begin
        ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!'+
          e.message;
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end;
    end;

    if QuantityPost_ =-1 then
    begin
      ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;



    if (QuantityPostReal_ >QuantityPost_)
    and (OldSpecial<>cdsOkPersonalcopy.FieldByName('special_code').AsString)
    then begin
      ErMessage := ErMessage+'В штатном расписании указано '+inttostr(QuantityPost_)+
        ' рабочих мест по указанной специализации. Фактически назначено '+
          inttostr(QuantityPostReal_)+' сотрудников.';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;
   end;
  end;

      if (headbranch_='09006')  // не связано с подтв. в ГО
      then begin
        if cdsOkPersonalcopy.FieldByName('telefon').AsString=''
        then begin
          ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;

        try
          strtoint64(cdsOkPersonalcopy.FieldByName('telefon').AsString);
        except on e:exception
          do begin
            ErMessage := ErMessage+' "Телефон '+cdsOkPersonalcopy.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
            memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
          end;
        end;

        if length(cdsOkPersonalcopy.FieldByName('telefon').AsString)<>11
        then begin
          ErMessage := ErMessage+' "в Телефоне должно быть всегда 11 цифр в Халк банке" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;
        if (cdsOkPersonalcopy.fieldbyname('regplace_code').asstring='')
        and (cdsOkPersonalcopy.fieldbyname('PASS_REG').asstring='')
        then begin
          ErMessage := ErMessage+' "Укажите * *Место Регистрации (паспорт) по справочнику или примечание" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;
      end;

          if  ( cdsOkPersonalcopy.FieldByName('HOME_ADDRESS_REGION_ID').AsString='')
          and  ( cdsOkPersonalcopy.FieldByName('HOME_ADDRESS_DISTR').AsString='')
          and  ( cdsOkPersonalcopy.FieldByName('Home_Address').AsString='')
          then begin
//            ErMessage := ErMessage+' "Где прописан- район,обл,адрес" ';
            ErMessage := ErMessage+' "'+lbGdePropisan2.caption+' '+lbGdePropisan2_.caption+'- район,обл,адрес" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
          end;

    if  ( cdsOkPersonalcopy.FieldByName('Education_Title_CODE').AsString='')
    then begin
      ErMessage := ErMessage+' "Образование сотрудника (Наименование)" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end else begin
      z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
               '74',cdsOkPersonalcopy.FieldByName('Education_Title_CODE').AsString
        );
      if z=0
      then begin
        ErMessage := ErMessage+' "Реквизит «Образование» должен соответствовать справочнику соответствия <Образование>" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end;
    end;

    if  ( cdsOkPersonalcopy.FieldByName('inn').AsString='')
    then begin
      ErMessage := ErMessage+' "ИНН" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;

  if cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if  ( cdsOkPersonalcopy.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;
  end;

  if  ( cdsOkPersonalcopy.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('PASS_DATE').AsString<>'')
  and (cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString<>'')
  then begin
    raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
      cdsOkPersonalcopy.FieldByName('PASS_DATE').AsString,cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16)
    then begin
      ErMessage := ErMessage+'"Разница Дата получения паспорта и Даты рождения не должна быть меньше 16" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;
  end;

  if (cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString='')
  then begin ErMessage := ErMessage+' "Дата рождения" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
  end else begin
    if ( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,7,4))
          <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
    or (( strtoint(copy(datetostr(now),7,4))-
          strtoint(copy(cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,7,4))
          =45) and (now< strtodate(copy(cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
    )
    then begin
      if (cdsOkPersonalcopy.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
      then begin
        ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsOkPersonalcopy.FieldByName('PASS_DATE_END').AsString+'" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
      end else begin
        if (cdsOkPersonalcopy.FieldByName('PASS_DATE_END').AsDateTime < now)
        then begin
          ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsOkPersonalcopy.FieldByName('PASS_DATE_END').AsString+'" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
        end;
      end;
    end;

    raznica:=getsqlresultpar('select trunc(months_between(sysdate,:p_1)/:p_2) from dual',cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
    if (raznica<16) or (raznica>90)
    then begin
      ErMessage := ErMessage+'"Разница Даты текущей и Даты рождения не должна быть меньше 16 и больше 90" ';
          memotest.lines.add('"Форма"'+ErMessage); ErMessage:='';
    end;
  end;

    ////////////////////////////////////
    //////// проверка лист ИИАС ////////
// проверка полей со страницы ИИАС
  if  ( cdsOkPersonalcopy.FieldByName('spec_ikki').AsString='')
  then begin
    ErMessage := ErMessage+' "* Наличие второй специальности" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end else begin

  end;

  if  ( cdsOkPersonalcopy.FieldByName('nationality_code').AsString='')
  then begin
    ErMessage := ErMessage+' " * Национальность" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('cod_distr_uvd').AsString='')
  AND  ( cdsOkPersonalcopy.FieldByName('cod_distr_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "* Код района, подразделением УВД которого выдан паспорт" или примечание ';
          memotest.lines.add('(29056)"ИИАС"'+ErMessage); ErMessage:='';
  end;

    sql_ := 'select count(id) from ok_personal where branch=:p_1'+ //cdsOkPersonalcopy.FieldByName('branch').AsString+
        ' and tabno=:p_2'+ //cdsOkPersonalcopy.FieldByName('tabno').AsString+
        ' and personal_code<>:p_3'; //+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
    try
      z := getSQLresultpar(sql_,cdsOkPersonalcopy.FieldByName('branch').AsString,
          cdsOkPersonalcopy.FieldByName('tabno').AsString,
          cdsOkPersonalcopy.FieldByName('personal_code').AsString
      );
      if (z<>0)
      then begin
        ErMessage := ErMessage+'Табельный номер '+cdsOkPersonalcopy.FieldByName('tabno').AsString+' уже используется!'+' Измените табельный номер и сохраните данные.';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
//        Showmessage(ErMessage);
//        exit;
      end;
    except
      ErMessage:='Для ввода нового сотрудника перейдите в режим "Таблица" и нажмите кнопку "Новый". ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
//      cdsOkPersonalcopy.cancel;
  //    exit;
    end;


// проверка полей со страницы ИИАС
  if (cdsOkPersonalcopy.FieldByName('status_code').AsString<>'2')
  then begin
//    cdsOkPersonalcopy.FieldByName('special_code').AsString:='';
  end else begin
   if HeadBranch_<>'09006' // временно(т.е. навсегда) отключено в халке  // не связано с подтв. в ГО
   then begin
    QuantityPost_     :=-1;
    QuantityPostReal_ :=-1;

    try
    sql_ :=  'select ok_service.get_QuantityPost(:p_1,:p_2,:p_3,:p_4) from dual'   ;
    QuantityPost_ := GetSQLResultpar(sql_,
      cdsOkPersonalcopy.FieldByName('branch').AsString ,
      cdsOkPersonalcopy.FieldByName('department_code').AsString ,
      cdsOkPersonalcopy.FieldByName('post_code').AsString ,
      cdsOkPersonalcopy.FieldByName('special_code').AsString
    );

    sql_ := 'select ok_service.get_QuantityPostReal(:p_1,:p_2,:p_3,:p_4) from dual'   ;

    QuantityPostReal_ := GetSQLResultpar(sql_,
      cdsOkPersonalcopy.FieldByName('branch').AsString ,
      cdsOkPersonalcopy.FieldByName('department_code').AsString ,
      cdsOkPersonalcopy.FieldByName('post_code').AsString ,
      cdsOkPersonalcopy.FieldByName('special_code').AsString
    );

    except on e:exception
      do begin
        ErMessage:= ErMessage+' Указанная специализация не найдена.'+
        sql_+e.message;
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
      end;
    end;

    if QuantityPost_ =-1 then
    begin
      ErMessage:= ErMessage+' Указанная специализация не найдена. Операция прервана!';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;

    if (QuantityPostReal_ >QuantityPost_)
    and (OldSpecial<>cdsOkPersonalcopy.FieldByName('special_code').AsString)
    then begin
      ErMessage := ErMessage+ ' В штатном расписании указано '+inttostr(QuantityPost_)+
        ' рабочих мест по указанной специализации. Фактически назначено '+
          inttostr(QuantityPostReal_)+' сотрудников. ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
   end;
  end;

  if (headbranch_<>'09049') and ( cdsOkPersonalcopy.FieldByName('Education_Title_CODE').AsString='')
  then begin
    ErMessage := ErMessage+' "* Образование  Сотрудника" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('bank_spec').AsString='')
  then begin
    ErMessage := ErMessage+' "Наличие банковской специальности *" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;


  if  ( cdsOkPersonalcopy.FieldByName('is_boss').AsString='')
  then begin
    ErMessage := ErMessage+' "Входит в руководящий состав *" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString='')
  then begin
    ErMessage := ErMessage+' "Гражданство" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна Гражданство '+cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString+' нет в справочнике" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
    if  ( cdsOkPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString='860')
    then begin
      if  ( cdsOkPersonalcopy.FieldByName('cod_distr_uvd').AsString='')
      then begin
        ErMessage := ErMessage+' "* Код района, подразделением УВД которого выдан паспорт" ';
          memotest.lines.add('"(29167)ИИАС"'+ErMessage); ErMessage:='';
      end;
    end else begin
      if  ( cdsOkPersonalcopy.FieldByName('cod_distr_prim').AsString='')
      then begin
        ErMessage := ErMessage+' "* Примечание к Код района, подразделением УВД которого выдан паспорт" ';
          memotest.lines.add('"(29173)ИИАС"'+ErMessage); ErMessage:='';
      end;
    end;
  end;


  if  ( cdsOkPersonalcopy.FieldByName('PASS_DATE').AsString='')
  then begin
    ErMessage := ErMessage+' "Дата получения паспорта" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('cod_str_birth').AsString='')
  then begin
    ErMessage := ErMessage+' "Страна рождения" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOkPersonalcopy.FieldByName('cod_str_birth').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна рождения '+cdsOkPersonalcopy.FieldByName('cod_str_birth').AsString+' нет в справочнике" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end;

  if (cdsOkPersonalcopy.FieldByName('cod_str_birth').AsString='860')
  then begin
    if ( cdsOkPersonalcopy.FieldByName('region_id').AsString='')
    Then begin ErMessage := ErMessage+' "Место рождения сотрудника (область)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
    If ( cdsOkPersonalcopy.FieldByName('distr').AsString=''    )
    Then begin ErMessage := ErMessage+' "Место рождения сотрудника (район/город)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end else begin
    if ( cdsOkPersonalcopy.FieldByName('cod_obl_prim').AsString='')
    Then begin ErMessage := ErMessage+' "Место рождения сотрудника (область-примечание)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
    If ( cdsOkPersonalcopy.FieldByName('cod_place_birth_prim').AsString=''    )
    Then begin ErMessage := ErMessage+' "Место рождения сотрудника (район/город-примечание)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end;

  if  ( cdsOkPersonalcopy.FieldByName('cod_str_live').AsString='')
  then begin
    ErMessage := ErMessage+' " * Страна проживания" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end else begin
    if getsqlresultpar('select count(*) from s_str where code_str=:p_1 and act=:p_2',cdsOkPersonalcopy.FieldByName('cod_str_live').AsString,'A')=0
    then begin
      ErMessage := ErMessage+' " * Страна проживания '+cdsOkPersonalcopy.FieldByName('cod_str_live').AsString+' нет в справочнике" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end;

  if (cdsOkPersonalcopy.FieldByName('cod_str_live').AsString='860')
  then begin
    if ( cdsOkPersonalcopy.FieldByName('cod_obl_live').AsString='')
    Then begin ErMessage := ErMessage+' "Место проживания сотрудника (область)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
    If ( cdsOkPersonalcopy.FieldByName('cod_distr_live').AsString=''    )
    Then begin ErMessage := ErMessage+' "Место проживания сотрудника (район/город)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end else begin
    if ( cdsOkPersonalcopy.FieldByName('cod_obl_live_prim').AsString='')
    Then begin ErMessage := ErMessage+' "Место проживания сотрудника (область-примечание)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
    If ( cdsOkPersonalcopy.FieldByName('cod_distr_live_prim').AsString=''    )
    Then begin ErMessage := ErMessage+' "Место проживания сотрудника (район/город-примечание)" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end;

  if  ( cdsOkPersonalcopy.FieldByName('check_kfs').AsString='')
  then begin
    ErMessage := ErMessage+' "Резерв руководящего состава *" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if (cdsOkPersonalcopy.fieldbyname('gender_code').asstring='1')
  and (not cdsOkPersonalcopy.fieldbyname('maiden_family').IsNull)
  then begin
    ErMessage := ErMessage+' "Нельзя ввести девичью фамилию - вы ввели пол Мужской" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('region_id').AsString='')
  and ( cdsOkPersonalcopy.FieldByName('cod_obl_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Область рождения или Примечание" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if  ( cdsOkPersonalcopy.FieldByName('distr').AsString='')
  and ( cdsOkPersonalcopy.FieldByName('cod_place_birth_prim').AsString='')
  then begin
    ErMessage := ErMessage+' "Район/город рождения или Примечание" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
  end;

  if cdsOKPersonalcopy.FieldByName('COD_STR_SITIZENT').AsString='860'
  then begin
    if cdsOkPersonalcopy.FieldByName('nps_id').AsString <> ''
    then begin
      sql_ := 'select count(id) from ok_personal'+
        ' where nps_id=:p_1'+ //cdsOkPersonalcopy.FieldByName('nps_id').AsString+
        ' and personal_code<>:p_2'; //+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      try
        z:=getSQLresultpar(sql_,cdsOkPersonalcopy.FieldByName('nps_id').AsString,
                cdsOkPersonalcopy.FieldByName('personal_code').AsString
        );
        if (z<>0)
        then begin
          ErMessage:=ErMessage+'Пенсионный ИН '+cdsOkPersonalcopy.FieldByName('nps_id').AsString+' уже используется!'+' Измените Пенсионный ИН и сохраните данные.';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
//          Showmessage(ErMessage);
//          exit;
        end;
      except on e:exception
        do begin
          ErMessage:='28985)нпс='+cdsOkPersonalcopy.FieldByName('nps_id').AsString+' код сотрудника='+
                cdsOkPersonalcopy.FieldByName('personal_code').AsString+' * '+
            sql_+' * '+e.message;
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';

//          exit;
        end;
      end;
// глчит дебаг, показывает строку 28964 вместо   28985


    end;

    z := length(cdsOkPersonalcopy.FieldByName('nps_id').AsString);
    if (z<>14) and (z<>0)
    then begin
        ErMessage:=ErMessage+'поле Пенсионный ИН должно содержать 14 цифр'+
          'вы ввели ИН='+cdsOkPersonalcopy.FieldByName('nps_id').AsString+
          'только '+IntToStr(z)+' символов';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;

    if  ( cdsOkPersonalcopy.FieldByName('nps_id').AsString='')
    then begin
      ErMessage := ErMessage+' "Пенсионный ИН *" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;
  end;

    if cdsOkPersonalcopy.FieldByName('cod_str_sitizent').asstring='860'
    then begin
      try
        strtoint64(cdsOkPersonalcopy.FieldByName('nps_id').AsString);
      except
        ErMessage:=ErMessage+'поле Пенсионный ИН для резидентов должно быть 14 цифр'+
          'вы ввели ИН='+cdsOkPersonalcopy.FieldByName('nps_id').AsString+
          'только '+IntToStr(z)+' символов';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
      end;
    end;

    z := length(cdsOkPersonalcopy.FieldByName('inn').AsString);
    if (z<>9) and (z<>0)
    then begin
        ErMessage:=ErMessage+'поле ИНН должно содержать 9 цифр'+
          'вы ввели ИНН='+cdsOkPersonalcopy.FieldByName('inn').AsString+
          'только '+IntToStr(z)+' символов';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;

    if  ( cdsOkPersonalcopy.FieldByName('inn').AsString='')
    then begin
      ErMessage := ErMessage+' "ИНН" ';
          memotest.lines.add('"ИИАС"'+ErMessage); ErMessage:='';
    end;

    //////// проверка доп.сведений ////////


  //  берется сотрудник из ok_personal
  // и пробегаются проверки по его дополнительным данным
// переделать на пробег по всем записям в доп.таблицах о сотруднике
        ErMessage  :='';
   if (headbranch_='09049') and (rukovod_=0)
   then begin

   end else begin
     z := getsqlresultpar('select count(*) from ok_photo where branch=:p_1'+
                  ' AND personal_code=:p_2 and (priznak is null or priznak=:p_3)',
           cdsOkPersonalcopy.FieldByName('branch').AsString,cdsOkPersonalcopy.FieldByName('personal_code').AsString,'1');
     if z=0
     then begin ErMessage  :=ErMessage  +'(26115)отсутствует фото';
          memotest.lines.add('"Доп.сведения"'+ErMessage); ErMessage:='';
     end;

     cdsOKTEMP1.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP1.filtered:=true;

     if cdsOKTEMP1.recordcount=0
     then begin
       ErMessage  :=ErMessage  +'отсутствуют сведения об образовании';
            memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
     end;

//

    if  ( cdsOkPersonalcopy.FieldByName('spec_ikki').AsString='')
    then begin
      ErMessage := ErMessage+' "* Наличие второй специальности" ';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
    end else begin
      if ( cdsOkPersonalcopy.FieldByName('spec_ikki').AsString='1')
      then begin
        z:= getsqlresultpar('select count(*) from ok_education where branch=:p_1 and personal_code=:p_2 '+
           ' and education_count_CODE=:p_3',
           cdsOkPersonalcopy.FieldByName('branch').AsString,
           cdsOkPersonalcopy.FieldByName('personal_code').AsString, '2'
        );
        if z=0
        then begin
          ErMessage  :=ErMessage  +'отсутствует второе образование(* Наличие второй специальности)';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
        end;
      end;
    end;

     cdsOKTEMP1.first;
     while not cdsOKTEMP1.eof do begin
// образование
//
        if not (cdsOKTEMP1.FieldByName('nostra_date').IsNull)
        then begin
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKTEMP1.FieldByName('nostra_date').AsString,cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
          if (cdsOKTEMP1.FieldByName('nostra_date').asdatetime < cdsOkPersonalcopy.fieldbyname('birthday').asdatetime)
          or (raznica<20)
          then begin
            ErMessage:=ErMessage+'Разница Даты нострификации '+cdsOKTEMP1.FieldByName('nostra_date').AsString+
              ' и даты рождения '+cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString+' сотрудника не должна быть меньше 20  и больше возраста сотрудника';
            memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;

        end;

        if (cdsOKTEMP1.FieldByName('nostra').AsString='1') // есть
        and ((cdsOKTEMP1.FieldByName('nostra_number').IsNull) or (cdsOKTEMP1.FieldByName('nostra_date').IsNull))
        then begin
          ErMessage:=ErMessage+'Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно';
//          show message('Если указан реквизит «Наличие нострификации» как «1» (есть), то реквизиты «Номер и дата нострификации» должны быть заполнены обязательно');
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
        end;

        try
          if not (cdsOKTEMP1.FieldByName('diplom_date').IsNull)
          then
          if (cdsOKTEMP1.FieldByName('diplom_date').asdatetime>now)
          or (cdsOKTEMP1.FieldByName('diplom_date').asdatetime<
            strtodate( cdsOKTEMP1.FieldByName('end_date_dd').asstring+'.'+cdsOKTEMP1.FieldByName('end_date_mm').asstring+'.'+
                        cdsOKTEMP1.FieldByName('end_date').asstring ))
          then begin
            ErMessage:=ErMessage+'Дата выдачи диплома не должна быть больше текущей даты и меньше даты окончания учебного заведения';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        except on e:exception
          do begin
            ErMessage:=ErMessage+'(6455) Проверьте дату окончания учебного заведения';
            memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        end;

        if (cdsOKTEMP1.FieldByName('end_date').IsNull)
        and (cdsOKTEMP1.FieldByName('curs').IsNull)
        then begin
          ErMessage:=ErMessage+'Если реквизит «Дата окончания учебного заведения» не указан, то обязательно должен быть заполнен реквизит «Курс»';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
        end;

        if (cdsOKTEMP1.FieldByName('profession_personal').IsNull)
        then begin
          v:=getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','74',cdsOkPersonalcopy.fieldbyname('education_title_code').asstring);
          if not varisnull(v)
          then begin
            if ((vartostr(v)='3') or (vartostr(v)='4') or (vartostr(v)='5'))
            and (cdsOKTEMP1.FieldByName('profession_personal').IsNull)
            then begin
              ErMessage:=ErMessage+'(05962)Если реквизит «Код образования» в требовании 09-001 указан как (3,4,5), то реквизит «Специальность» должен быть указан обязательно';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
            end;
          end;
        end;


        if (cdsOKTEMP1.FieldByName('begin_date').IsNull)
        and ( (not cdsOKTEMP1.FieldByName('begin_date_mm').IsNull) or (not cdsOKTEMP1.FieldByName('begin_date_dd').IsNull) )
        then begin
          ErMessage:=ErMessage+'Если год даты поступления не указан, то число и месяц даты поступления не должны указываться';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
        end;

        if (cdsOKTEMP1.FieldByName('end_date').IsNull)
        and ( (not cdsOKTEMP1.FieldByName('end_date_mm').IsNull) or (not cdsOKTEMP1.FieldByName('end_date_dd').IsNull) )
        then begin
          ErMessage:=ErMessage+'Если год даты окончания не указан, то число и месяц даты окончания не должны указываться';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
        end;

        dd_ := cdsOKTEMP1.FieldByName('begin_date_dd').AsString;
        if dd_='' then dd_:='01';
        mm_ := cdsOKTEMP1.FieldByName('begin_date_mm').AsString;
        if mm_='' then mm_:='09';

        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          dd_ +'.'+
          mm_+'.'+
          cdsOKTEMP1.FieldByName('begin_date').AsString,
          cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
          if (strtodate(dd_+'.'+
            mm_+'.'+
            cdsOKTEMP1.FieldByName('begin_date').AsString) > now)
          or (raznica < 12)
          then begin
            ErMessage:=ErMessage+'(29504)Разница даты поступления и даты рождения должна быть больше 12 лет и меньше возраста сотрудника';
          memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        except on e:exception
          do begin
            ErMessage:=ErMessage+'Проверьте дату поступления '+cdsOKTEMP1.FieldByName('begin_date_dd').AsString+'.'+
              cdsOKTEMP1.FieldByName('begin_date_mm').AsString+'.'+
              cdsOKTEMP1.FieldByName('begin_date').AsString;
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        end;

        dd_end := cdsOKTEMP1.FieldByName('end_date_dd').AsString;
        if dd_end='' then dd_end:='01';
        mm_end := cdsOKTEMP1.FieldByName('end_date_mm').AsString;
        if mm_end='' then mm_end:='09';

        try
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          dd_end+'.'+
          mm_end+'.'+
          cdsOKTEMP1.FieldByName('end_date').AsString,
          dd_+'.'+
          mm_+'.'+
          cdsOKTEMP1.FieldByName('begin_date').AsString,
          '12');
          if (raznica > 20) //or (raznica < 1)
          then begin
            ErMessage:=ErMessage+'(05960)Разница даты окончания и даты поступления в учебное заведение не должна быть больше 20 лет'; //  и меньше 1 года
            memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        except on e:exception
          do begin
            ErMessage:=ErMessage+'Проверьте дату поступления '+cdsOKTEMP1.FieldByName('begin_date_dd').AsString+'.'+
              cdsOKTEMP1.FieldByName('begin_date_mm').AsString+'.'+
              cdsOKTEMP1.FieldByName('begin_date').AsString+' и дату окончания '+
              cdsOKTEMP1.FieldByName('end_date_dd').AsString+'.'+
              cdsOKTEMP1.FieldByName('end_date_mm').AsString+'.'+
              cdsOKTEMP1.FieldByName('end_date').AsString+ ' учебного заведения';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
          end;
        end;


       if cdsOKTEMP1.FieldByName('EDUCATION_CODE').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Образование';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Не заполнено поле '+'Образование');
//         dblcbSSOKEducation.SetFocus;
//         exit;
       end;
//
       if cdsOKTEMP1.FieldByName('BASIS_CODE').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Признак образования';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Не заполнено поле '+'Признак образования');
//         dblcbSSOKBasis.SetFocus;
//         exit;
       end;
//
       if cdsOKTEMP1.FieldByName('INSTITUTION_CODE').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Учебное заведение';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
       end;

       if cdsOKTEMP1.FieldByName('cod_vuz_prim').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Примечание (обязательно должно быть указано Учебное заведение)';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
       end;
// -
//
       if cdsOKTEMP1.FieldByName('BEGIN_DATE').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Поступление (год)';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Не заполнено поле '+'Поступление (год)');
//         medOK_beginDAte.SetFocus;
//         exit;
       end;
//
       if not cdsOKTEMP1.FieldByName('END_DATE').IsNull
       then begin
         if cdsOKTEMP1.FieldByName('BEGIN_DATE').AsInteger>
            cdsOKTEMP1.FieldByName('END_DATE').AsInteger
         then begin
           ErMessage:=ErMessage+'Ошибка: год поступления '+
             cdsOKTEMP1.FieldByName('BEGIN_DATE').asstring+
             ' не должен быть больше года окончания учебного заведения '+
             cdsOKTEMP1.FieldByName('END_DATE').asstring;
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
         end;
       end;
//
       if cdsOKTEMP1.FieldByName('PROFESSION_PERSONAL').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Специальность';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Не заполнено поле '+'Специальность');
//         dbedProfession.setFocus;
//         exit;
       end;
//
       if cdsOKTEMP1.FieldByName('QUALIFICATION_CODE').AsString=''
       then begin
         ErMessage:=ErMessage+'Не заполнено поле '+'Квалификация';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Не заполнено поле '+'Квалификация');
//         dblcbSSOKQualification.SetFocus;
//         exit;
       end;
//
       if (not(cdsOKTEMP1.FieldByName('Diplom_Date').IsNull)) and (cdsOKTEMP1.FieldByName('DIPLOM_NUM').IsNull)
       then begin
         ErMessage:=ErMessage+'Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e('Если указан реквизит «Дата выдачи диплома», то реквизит «Номер диплома» должен быть указан обязательно');
//         exit;
       end;

       check_date_message_:= check_date_yyyymmdd(cdsOKTEMP1.FieldByName('BEGIN_DATE').AsString,
         cdsOKTEMP1.FieldByName('BEGIN_DATE_mm').AsString,
         cdsOKTEMP1.FieldByName('BEGIN_DATE_dd').AsString,'N','N');

       if check_date_message_<>'1'
       then begin
         ErMessage:=ErMessage+'(26327)Образование начало '+check_date_message_;
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//         showmessag e(check_date_message_);
//         medOK_beginDAte.SetFocus;
//         exit;
       end;

       if not cdsOKTEMP1.FieldByName('END_DATE').IsNull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKTEMP1.FieldByName('END_DATE').AsString,
           cdsOKTEMP1.FieldByName('END_DATE_mm').AsString,
           cdsOKTEMP1.FieldByName('END_DATE_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
           ErMessage:=ErMessage+'(26341)Образование завершение '+check_date_message_;
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
//           showmessag e(check_date_message_);
//           medOK_endDAte.SetFocus;
//           exit;
         end;
       end;

//showmessage('cdsOKTEMP1.FieldByName(''END_DATE'')='+cdsOKTEMP1.FieldByName('END_DATE').asstring);
          v:=getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','74',cdsokpersonal.fieldbyname('education_title_code').asstring);
          if not varisnull(v)
          then begin
            education_title_code_:=vartostr(v);
          end else begin
            education_title_code_:='0';
          end;

       if (not cdsOKTEMP1.FieldByName('END_DATE').IsNull)
       and (     (education_title_code_='3')
              or (education_title_code_='4')
              or (education_title_code_='5')
           )
       then begin
         z:= getsqlresultpar('select count(*) from ok_photo where branch=:p_1 and ok_id=:p_2 and personal_code=:p_3  and priznak=:p_4',
            cdsOKTEMP1.FieldByName('branch').AsString,
            cdsOKTEMP1.FieldByName('id').AsString,
            cdsOKTEMP1.FieldByName('personal_code').AsString, '2');
         if z=0
         then begin ErMessage:=ErMessage+' отсутствует копия диплома';
              memotest.lines.add('"Образование"'+ErMessage); ErMessage:='';
         end;
       end;

       cdsOKTEMP1.next;

     End;

   end; // если капитал и нерукводящий то не проверять

// здесь
//  1: If (cdsOKacademic.State in dsEditModes) and (cdbgOKacademic.CanFocus)
{      cdsOKTEMP2.close;
      with cdsOKTEMP2.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP2, SQL_OKacademic+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP2.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP2.filtered:=true;

//     TabSheet_1Show(nil);
       if (cdsOkPersonalcopy.FieldByName('is_ACADEMIC').AsString='1')
       and (cdsOKTEMP2.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ученое звание Есть"';
  //       exit;
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
       end;

     cdsOKTEMP2.first;
     while not cdsOKTEMP2.eof do begin
// ученые звания
//
       if cdsOkPersonalcopy.FieldByName('is_ACADEMIC').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ученого звания Нет"';
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
  //       exit;
       end;

       if (cdsOKTEMP2.FieldByName('ACADEMIC_CODE').AsString='')
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Ученое звание';
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
  //       dblcbSSOKAcademic.SetFocus;
    //     exit;
       end else begin
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '76',cdsOKTEMP2.FieldByName('ACADEMIC_CODE').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'Реквизит Ученое звание должен соответствовать справочнику соответствия.';
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
  //          dblcbSSOKAcademic.SetFocus;
    //        exit;
         end;
       end;

//
       if cdsOKTEMP2.FieldByName('ACADEMIC_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученого звания)';
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
  //       dbedAcademicDate.SetFocus;
    //     exit;
       end;

       try
         if (cdsOKTEMP2.FieldByName('ACADEMIC_DATE').AsInteger<1917)
         then begin
    //       showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученого звания)='+
             cdsOKTEMP2.FieldByName('ACADEMIC_DATE').AsString;
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
//           dbedAcademicDate.SetFocus;
  //         exit;
         end;
       except on e:exception
         do begin
//           showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученого звания)'+
             cdsOKTEMP2.FieldByName('ACADEMIC_DATE').AsString;
              memotest.lines.add('"Ученое звание"'+ErMessage); ErMessage:='';
  //         dbedAcademicDate.SetFocus;
    //       exit;
         end;
       end;
//
      cdsOKTEMP2.next;

     End;


//  2: If (cdsOKDegree.State in dsEditModes) and (cdbgOKDegree.CanFocus)
{      cdsOKTEMP3.close;
      with cdsOKTEMP3.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP3, SQL_OKDegree+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP3.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP3.filtered:=true;

//     TabDegree_2Show(nil);
     cdsOKTEMP3.first;
       if (cdsOkPersonalcopy.FieldByName('is_DEGREE').AsString='1')
       and (cdsOKTEMP3.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ученая степень Есть"';
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //       exit;
       end;
     while not cdsOKTEMP3.eof do begin
// ученые степени
//
       if cdsOkPersonalcopy.FieldByName('is_DEGREE').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ученой степени Нет"';
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP3.FieldByName('DEGREE_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Ученая степень';
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //       dblcbSSOKdegree.SetFocus;
    //     exit;
       end else begin
         z:=getsqlresultpar('select count(*) from s_obraz so ,ss_ok_nci son where son.nci_id=:p_1 and so.OBR_ID=son.s_id and son.ok_id=:p_2',
                 '75',cdsOKTEMP3.FieldByName('DEGREE_CODE').AsString
          );
         if z=0
         then begin
//           showmessag e(
         ErMessage := ErMessage+'Реквизит Ученая степень должен соответствовать справочнику соответствия.';
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //          dblcbSSOKdegree.SetFocus;
    //        exit;
         end;
       end;
//
       if (cdsOKTEMP3.FieldByName('DEGREE_DATE').AsString='')
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученой степени)';
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //       dbedDegreeDate.SetFocus;
    //     exit;
       end;

       try
         if (cdsOKTEMP3.FieldByName('DEGREE_DATE').AsInteger<1917)
         then begin
//           showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученой степени)='+cdsOKTEMP3.FieldByName('DEGREE_DATE').AsString;
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //         dbedDegreeDate.SetFocus;
    //       exit;
         end;
       except on e:exception
         do begin
//           showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата присвоения (ученой степени)'+cdsOKTEMP3.FieldByName('DEGREE_DATE').AsString;
              memotest.lines.add('"Ученая степень"'+ErMessage); ErMessage:='';
  //         dbedDegreeDate.SetFocus;
    //       exit;
         end;
       end;

//
      cdsOKTEMP3.next;
     End;

//  3: If (cdsOKaward.State in dsEditModes) and (cdbgOKaward.CanFocus)
{      cdsOKTEMP4.close;
      with cdsOKTEMP4.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP4, SQL_OKaward+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP4.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP4.filtered:=true;

//     TabSheet_3Show(nil);
       if (cdsOkPersonalcopy.FieldByName('is_award').AsString='1')
       and (cdsOKTEMP4.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Награды Есть"';
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     cdsOKTEMP4.first;
     while not cdsOKTEMP4.eof do begin

// награды
//


       if cdsOkPersonalcopy.FieldByName('is_award').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Наград Нет"';
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP4.FieldByName('AWARD_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Сведения о награде';
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
  //       dbedAwardInfo.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP4.FieldByName('AWARD_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год получения (награды)';
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
  //       dbedAwardDate.SetFocus;
    //     exit;
       end;
//
       check_date_message_:= check_date_yyyymmdd(cdsOKTEMP4.FieldByName('AWARD_DATE').AsString,
         cdsOKTEMP4.FieldByName('AWARD_DATE_mm').AsString,cdsOKTEMP4.FieldByName('AWARD_DATE_dd').AsString,
         'N','Y');

//ErMessage:='c heck_date_yyyymmdd('+cdsOKTEMP4.FieldByName('AWARD_DATE').AsString+','+
//         cdsOKTEMP4.FieldByName('AWARD_DATE_mm').AsString+','+cdsOKTEMP4.FieldByName('AWARD_DATE_dd').AsString+','+
//         'N,Y)';
//memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
//memotest.lines.add('"29634" Награды='+check_date_message_);

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(29633)Награды '+check_date_message_;
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
  //       dbedAwardDate.SetFocus;
    //     exit;
       end else begin
          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKTEMP4.FieldByName('AWARD_DATE_dd').AsString+'.'+
                cdsOKTEMP4.FieldByName('AWARD_DATE_mm').AsString+'.'+
                cdsOKTEMP4.FieldByName('AWARD_DATE').AsString,
          cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
         if ( strtodate(cdsOKTEMP4.FieldByName('AWARD_DATE_dd').AsString+'.'+
                        cdsOKTEMP4.FieldByName('AWARD_DATE_mm').AsString+'.'+
                        cdsOKTEMP4.FieldByName('AWARD_DATE').AsString) >now )
         or (raznica<18)
         then begin
           ErMessage:= ErMessage+ '(29648)Награды- Разница Даты награждения и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника';
              memotest.lines.add('"Награды" '+ErMessage); ErMessage:='';
         end;
       end;


      cdsOKTEMP4.Next;

     End;

//  4: If (cdsOKScientific.State in dsEditModes) and (cdbgOKScientific.CanFocus)
//     Then begin
{      cdsOKTEMP5.close;
      with cdsOKTEMP5.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP5, SQL_OKScientific+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP5.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP5.filtered:=true;

//     TabOKScientific_4Show(nil);
     cdsOKTEMP5.first;
       if (cdsOkPersonalcopy.FieldByName('is_scientific').AsString='1')
       and (cdsOKTEMP5.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Научные работы Есть"';
              memotest.lines.add('"Научные работы" '+ErMessage); ErMessage:='';
  //       exit;
       end;
     while not cdsOKTEMP5.eof do begin

// научные работы
//
       if cdsOkPersonalcopy.FieldByName('is_scientific').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Научных работ Нет"';
              memotest.lines.add('"Научные работы" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP5.FieldByName('SCIENTIFIC_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Сведения о научной работе';
              memotest.lines.add('"Научные работы" '+ErMessage); ErMessage:='';
  //       dbedScientificInfo.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP5.FieldByName('SCIENTIFIC_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год написания (научной работы)';
              memotest.lines.add('"Научные работы" '+ErMessage); ErMessage:='';
  //       dbedScientificDate.SetFocus;
    //     exit;
       end;
//
      cdsOKTEMP5.next;

     End;

//  5: If (cdsOKVoyage.State in dsEditModes) and (cdbgOKVoyage.CanFocus)
//     Then begin
{      cdsOKTEMP6.close;
      with cdsOKTEMP6.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP6, SQL_OKvoyage+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP6.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP6.filtered:=true;

//     TabSheet_5Show(nil);

       if (cdsOkPersonalcopy.FieldByName('is_voyage').AsString='1')
       and (cdsOKTEMP6.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Зарубежные поездки Есть"';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     cdsOKTEMP6.first;
     while not cdsOKTEMP6.eof do begin

// зарубежные поездки 09_007
//
       if cdsOkPersonalcopy.FieldByName('is_voyage').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Зарубежных поездок Нет"';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       exit;
       end;

//       if cdsOKTEMP6.FieldByName('voyage_str').AsString<>''
//       then begin
//         cdsOKTEMP6.FieldByName('VOYAGE_LAND').AsString:=
//           cdsOKTEMP6.FieldByName('voyage_str_show').AsString;
//       end;
//
       if cdsOKTEMP6.FieldByName('VOYAGE_STR').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Страна по справочнику ЦБ';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       DBEdit3.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP6.FieldByName('VOYAGE_STR').AsString='860'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(05975)Реквизит «Пребывание за границей страна» не должен быть равен значению «Узбекистан»';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       exit;
       end;
//
       if cdsOKTEMP6.FieldByName('VOYAGE_INFO').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Сведения о зарубежной поездке';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       DBEdit3.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP6.FieldByName('VOYAGE_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год зарубежной поездки';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       DBEdit1.SetFocus;
    //     exit;
       end;
//
       if (cdsOKTEMP6.FieldByName('VOYAGE_DATE').Asinteger-strtoint(copy(    cdsOkPersonalcopy.fieldbyname('birthday').asstring      ,7,4))
          <18)
       or (cdsOKTEMP6.FieldByName('VOYAGE_DATE').Asinteger> strtoint(copy(bankdate,7,4)) )
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Разница даты выезда за границу и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       DBEdit1.SetFocus;
    //     exit;
       end;


//
       check_date_message_:= check_date_yyyymmdd(cdsOKTEMP6.FieldByName('VOYAGE_DATE').AsString,
         cdsOKTEMP6.FieldByName('VOYAGE_DATE_mm').AsString,
         cdsOKTEMP6.FieldByName('VOYAGE_DATE_dd').AsString,'N','N');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(26695)Зарубежные поездки '+check_date_message_;
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //       DBEdit1.SetFocus;
    //     exit;
       end;

       if (not cdsOKTEMP6.FieldByName('DATA_IN').IsNull)
       then begin
         if (cdsOKTEMP6.FieldByName('DATA_IN').AsInteger<cdsOKTEMP6.FieldByName('VOYAGE_DATE').Asinteger)
         or (cdsOKTEMP6.FieldByName('DATA_IN').Asinteger> strtoint(copy(bankdate,7,4)) )
         then begin
//           showmessag e(
         ErMessage := ErMessage+'Дата возвращения из-за границы не должна быть меньше даты выезда  и не должна быть больше текущей даты';
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //         exit;
         end;
       end;

       if (not cdsOKTEMP6.FieldByName('DATA_IN').IsNull)
       or (not cdsOKTEMP6.FieldByName('DATA_IN_mm').IsNull)
       or (not cdsOKTEMP6.FieldByName('DATA_IN_dd').IsNull)
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKTEMP6.FieldByName('DATA_IN').AsString,
           cdsOKTEMP6.FieldByName('DATA_IN_mm').AsString,
           cdsOKTEMP6.FieldByName('DATA_IN_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
//           showmessag e(
           ErMessage := ErMessage+'(26722)Зарубежные поездки возвращение '+check_date_message_;
              memotest.lines.add('"Зарубежные поездки" '+ErMessage); ErMessage:='';
  //         DBEdit57.SetFocus;
    //       exit;
         end;
       end;
      cdsOKTEMP6.Next;

     End;


//  6: If (cdsOKLanguage.State in dsEditModes) and (cdbgOKLanguage.CanFocus)
//     Then begin
{      cdsOKTEMP7.close;
      with cdsOKTEMP7.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP7, SQL_OKlanguage+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP7.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP7.filtered:=true;

//     TabSheet_6Show(nil);
     cdsOKTEMP7.first;
       if (cdsOkPersonalcopy.FieldByName('is_language').AsString='1')
       and (cdsOKTEMP7.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ин.яз. Есть"';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //       exit;
       end;

     while not cdsOKTEMP7.eof do begin

// языки
//
       if cdsOkPersonalcopy.FieldByName('is_language').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Ин.яз. Нет"';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP7.FieldByName('language_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Иностранный язык';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //       exit;
       end else begin
                z:=getsqlresultpar('select count(*) from s_langs so ,ss_ok_nci son where son.nci_id=:p_1 and so.LANG_ID=son.s_id and son.ok_id=:p_2',
                 '77',cdsOKTEMP7.FieldByName('language_code').AsString
          );
         if z=0
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Реквизит Иностранный язык должен соответствовать справочнику соответствия.';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //          exit;
         end;

       end;

       if (cdsOKTEMP7.FieldByName('cod_lang_prim').AsString='')
       and (cdsOKTEMP7.State in [dsEdit, dsInsert])
       then begin
         cdsOKTEMP7.FieldByName('cod_lang_prim').AsString:=
           cdsOKTEMP7.FieldByName('language_code_show').AsString;
       end;
//
       if cdsOKTEMP7.FieldByName('level_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Уровень владения (иностранным языком)';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //       DBLCBlanglevel.SetFocus;
    //     exit;
       end else begin
                z:=getsqlresultpar('select count(*) from s_lang so ,ss_ok_nci son where son.nci_id=:p_1 and so.UROV_ID=son.s_id and son.ok_id=:p_2',
                 '78',cdsOKTEMP7.FieldByName('level_code').AsString
          );
         if z=0
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Реквизит Уровень владения (иностранным языком) должен соответствовать справочнику соответствия.';
              memotest.lines.add('"Ин.яз." '+ErMessage); ErMessage:='';
  //          exit;
         end;

       end;
//
      cdsOKTEMP7.Next;

     End;
//  7: If (cdsOKRelation.State in dsEditModes) and (cdbgOKRelation.CanFocus)
//     Then begin
{      cdsOKTEMP8.close;
      with cdsOKTEMP8.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP8, SQL_OKrelation+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP8.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP8.filtered:=true;

//     TabSheet_7Show(nil);
   if cdsOKTEMP8.recordcount=0
   then begin ErMessage  :=ErMessage  +'отсутствуют сведения о родственниках';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
   end;
     cdsOKTEMP8.first;
     while not cdsOKTEMP8.eof do begin

// родственные отношения 09_002
//
       if cdsOKTEMP8.FieldByName('RELATION_FAMILY').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Фамилия (родственник)';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //       DBEdit701.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP8.FieldByName('RELATION_NAME').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Имя (родственник)';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  ///       DBEdit702.SetFocus;
     //    exit;
       end;
//
       if cdsOKTEMP8.FieldByName('RELATION_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Родственное отношение (родственник)';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //       exit;
       end else begin
         // взять код типа родственника из справочника соответствия
         S_ID:= getsqlresultpar('select s_id from ss_ok_nci where nci_id=:p_1 and ok_id=:p_2','81',cdsOKTEMP8.FieldByName('RELATION_CODE').AsString);
         if cdsOkPersonalcopy.fieldbyname('gender_code').asstring='1' // пол мужской родственник муж ошибка
         then begin
           if S_ID='02'   // родственник муж ошибка
           then begin
//             showmessag e(
             ErMessage := ErMessage+'Если пол сотрудника указан – «Мужской», то код степени родства не может принимать значение «Муж»';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //           exit;
           end;
         end
          // пол женский родственник жена ошибка
         else begin
           if S_ID='01'   //родственник жена ошибка
           then begin
  //           showmessag e(
             ErMessage := ErMessage+'Если пол сотрудника указан – «Женский», то код степени родства не может принимать значение «Жена»';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
//             exit;
           end;
         end;
       end;

       if cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год рождения (родственник)';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //       exit;
       end else begin
         if (cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsInteger <
               strtoint(copy( cdsOkPersonalcopy.FieldByName('BIRTHDAY').asstring ,7,4)))
         and ((S_ID='6') or (S_ID='8') or (S_ID='9') or (S_ID='10')  )
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Если родственник логически указан как младшее поколение, то год рождения родственника должен быть больше года рождения сотрудника';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //         exit;
         end;
         if (  cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsInteger >
                 strtoint( copy( cdsOkPersonalcopy.FieldByName('BIRTHDAY').asstring ,7,4))   )
         and ( (S_ID='3') or (S_ID='4') or (S_ID='5') or (S_ID='7') or (S_ID='11') or (S_ID='12')  )
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Если родственник указан как старшее поколение, то год рождения родственника должен быть меньше года рождения сотрудника';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //         exit;
         end;
         if cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsInteger<1900
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Проверьте год рождения (родственник)'+
             cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsString;
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
  //         exit;
         end;

       end;

       if cdsOKTEMP8.FieldByName('COD_STR_birth').AsString=''
       then begin
         ErMessage:=ErMessage+'(7123) Укажите «Код страны рождения» родственника '+cdsOKTEMP8.FieldByName('RELATION_FAMILY').AsString+' обязательно из справочника <Страны>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
       end else begin
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKTEMP8.FieldByName('COD_STR_birth').AsString);
         if z<1  then begin
           ErMessage:=ErMessage+'(05345)Реквизит «Код страны рождения» родственника должен соответствовать справочнику <Страны и территории>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end;

       if cdsOKTEMP8.FieldByName('COD_STR_birth').AsString='860' // узбекистан то надо область и район
       then begin
         if (cdsOKTEMP8.FieldByName('COD_OBL_birth').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны рождения» (родственник)-  «Узбекистан», то «Код области рождения» должен быть указан обязательно из справочника <Области Узбекистана>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
         if (cdsOKTEMP8.FieldByName('COD_CITY_birth').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны рождения» (родственник)-  «Узбекистан», то «Код района рождения» должен быть указан обязательно из справочника <Районы Узбекистана>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end else begin
         if (cdsOKTEMP8.FieldByName('COD_OBL_birth_prim').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны рождения» (родственник)-  Не «Узбекистан», то Примечание к «Код области рождения» должен быть указан';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
         if (cdsOKTEMP8.FieldByName('COD_CITY_birth_prim').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны рождения» (родственник)-  Не «Узбекистан», то Примечание к «Код района рождения» должен быть указан';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end;

// проживания
     if (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString='')
     and (cdsOKTEMP8.FieldByName('DD_DEATH').AsString='')
     and (cdsOKTEMP8.FieldByName('MM_DEATH').AsString='')
     then begin
       if cdsOKTEMP8.FieldByName('COD_STR_LIVE').AsString=''
       then begin
         ErMessage:=ErMessage+'(7123) Укажите «Код страны проживания» (родственник)обязательно из справочника <Страны>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
       end else begin
         z:= getsqlresultpar('select count(*) from s_str where code_str=:p_1',cdsOKTEMP8.FieldByName('COD_STR_LIVE').AsString);
         if z<1  then begin
           ErMessage:=ErMessage+'(05345)Реквизит «Код страны проживания» родственника должен соответствовать справочнику <Страны и территории>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end;

       if cdsOKTEMP8.FieldByName('COD_STR_LIVE').AsString='860' // узбекистан то надо область и район
       then begin
         if (cdsOKTEMP8.FieldByName('COD_OBL_LIVE').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны проживания» (родственник)-  «Узбекистан», то «Код области проживания» должен быть указан обязательно из справочника <Области Узбекистана>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
         if (cdsOKTEMP8.FieldByName('COD_CITY').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны проживания» (родственник)-  «Узбекистан», то «Код района проживания» должен быть указан обязательно из справочника <Районы Узбекистана>';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end else begin
         if (cdsOKTEMP8.FieldByName('COD_OBL_LIVE_prim').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны проживания» (родственник)-  Не «Узбекистан», то Примечание к «Код области проживания» должен быть указан';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
         if (cdsOKTEMP8.FieldByName('COD_CITY_prim').AsString='')
         then begin
           ErMessage:=ErMessage+'Если выбран «Код страны проживания» (родственник)-  Не «Узбекистан», то Примечание к «Код района проживания» должен быть указан';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end;
     end;

       if (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString<>'')
       then begin
         if (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsInteger <
               cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsInteger)
         or (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsInteger> strtoint(copy(bankdate,7,4)))
         then begin
  //         showmessag e(
           ErMessage := ErMessage+'Проверьте дату рождения (родственник)'+cdsOKTEMP8.FieldByName('RELATION_BIRTHDAY').AsString+
           ' и дату сметри '+
            cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString;
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
//           exit;
         end;

         if (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKTEMP8.FieldByName('DD_DEATH').AsString<>'')
         and (cdsOKTEMP8.FieldByName('MM_DEATH').AsString<>''))
         then begin
           if (strtodate( cdsOKTEMP8.FieldByName('DD_DEATH').AsString+'.'+cdsOKTEMP8.FieldByName('MM_DEATH').AsString+'.'+cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString  ) > now)
           then begin
             ErMessage:=ErMessage+'Дата смерти родственников не должна быть меньше, чем дата рождения и больше текущей даты;';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
           end;
         end;


       end else begin
         if (cdsOKTEMP8.FieldByName('RELATION_DEATHDAY').AsString='')
         and ((cdsOKTEMP8.FieldByName('DD_DEATH').AsString<>'')
         or (cdsOKTEMP8.FieldByName('MM_DEATH').AsString<>''))
         then begin
           ErMessage:=ErMessage+'(родственник)Если год смерти не указан, то число и месяц смерти не должны указываться';
              memotest.lines.add('"Родственники" '+ErMessage); ErMessage:='';
         end;
       end;

      cdsOKTEMP8.Next;

     End;

//  8: If (cdsOKPeriod.State in dsEditModes) and (cdbgOKPeriod.CanFocus)
//     Then begin
//MemoTest.lines.add('*0');
{      cdsOKTEMP9.close;
      with cdsOKTEMP9.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP9, SQL_OKperiod+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP9.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP9.filtered:=true;

//     TabSheet_8Show(nil);
     if (cdsOKTEMP9.recordcount=0)
     then begin

            cdsmaxallaSpravka.Close;
            with cdsmaxallaSpravka.Params
            do begin
                clear;
                CreateParam(ftString,'p_1' ,ptInput);
                ParamByName('p_1').Value := cdsOKAddInform.FieldByName('branch').AsString;
                CreateParam(ftString,'p_2' ,ptInput);
                ParamByName('p_2').Value := cdsOKAddInform.FieldByName('personal_code').AsString;
                CreateParam(ftString,'p_3' ,ptInput);
                ParamByName('p_3').Value :='4'; // 4 справка махалля
            end;
            LoadData(cdsmaxallaSpravka, 'select a.* from ok_photo a, ok_addinform b'+
              ' where a.branch=b.branch and a.ok_id=b.ok_id and a.personal_code=b.personal_code'+
              ' and a.branch=:p_1 and a.personal_code=:p_2 and a.priznak=:p_3' );

           if (cdsmaxallaSpravka.RecordCount=0)
           and (cdsOKTEMP9.recordcount=0)
           then begin
             ErMessage  :=ErMessage  +'отсутствуют сведения о работе и нет справки в доп.сведениях';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
           end;
     end;
     
     cdsOKTEMP9.first;
     while not cdsOKTEMP9.eof do begin

// сведения о работе
//
       if (cdsOKTEMP9.FieldByName('TYPE_PERIOD_CODE').AsString='3')
       and (cdsOKTEMP9.FieldByName('COD_BANK').AsString='')
       then begin
       // если шу банкда и код банка пусто то поставить туда текущее мфо
         ErMessage := ErMessage+'если шу банкда и код банка пусто то поставьте туда текущее мфо';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
//          cdsOKTEMP9.FieldByName('COD_BANK').AsString:=branch;
       end;
//
       if cdsOKTEMP9.FieldByName('OFFICE_NAME').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Наименование организации';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       DBEdit801.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP9.FieldByName('OFFICE_ADDRESS').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Адрес организации';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       DBEdit802.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP9.FieldByName('ESTABLISHED_POST').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Занимаемая должность';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       DBEd_poststring.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP9.FieldByName('IN_OFFICE_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата поступления';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       exit;
       end else begin
         if (cdsOKTEMP9.FieldByName('IN_OFFICE_DATE').AsDateTime<cdsOkPersonalcopy.FieldByName('birthday').AsDateTime)
         then begin
           ErMessage:=ErMessage+'Реквизит «Дата начала работы в должности» должен быть обязательно заполнен,  соответствовать формату и быть больше даты рождения';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
         end;

          raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
          cdsOKTEMP9.FieldByName('IN_OFFICE_DATE').AsString,cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
         if (cdsOKTEMP9.FieldByName('in_office_date').AsDatetime>now)
         or (raznica<12)
         then begin
           ErMessage:=ErMessage+'(30573)Разница даты начала работы в должности и даты рождения сотрудника не должна быть меньше 12 лет и не должна быть больше возраста сотрудника';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
         end;



       end;
//
       if cdsOKTEMP9.FieldByName('BASIS_DATE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата приказа/основания';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       exit;
       end else begin
         if cdsOKTEMP9.FieldByName('IN_OFFICE_DATE').AsString<>''
         then begin
           if (cdsOKTEMP9.FieldByName('BASIS_DATE').asDateTime > cdsOKTEMP9.FieldByName('IN_OFFICE_DATE').asDateTime)
           then begin
             ErMessage:=ErMessage+'Дата приказа-основания для начала работы в должности должна быть меньше или равна дате начала работы в этой должности';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
           end;
         end;
       end;

       if (cdsOKTEMP9.FieldByName('date_pr_off').asstring<>'' ) and ( cdsOKTEMP9.FieldByName('OUT_OFFICE_DATE').asstring<>'')
       then begin
           if (cdsOKTEMP9.FieldByName('date_pr_off').asDatetime > cdsOKTEMP9.FieldByName('OUT_OFFICE_DATE').AsDatetime)
           then begin
             ErMessage:=ErMessage+'Дата приказа-основания для прекращения работы в должности  должна быть меньше или равна дате прекращения работы в этой должности';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
           end;
       end;
//
       if cdsOKTEMP9.FieldByName('TYPE_PERIOD_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Код типа стажа';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       DBLcbTypePeriod.SetFocus;
    //     exit;
       end else begin
         if (cdsOKTEMP9.FieldByName('TYPE_PERIOD_CODE').AsString='1')
         and (cdsOKTEMP9.FieldByName('established_post').AsString='')
         then begin
           ErMessage:=ErMessage+'Реквизит «Должность» должен быть обязательно заполнен, если реквизит «Признак системы» указан как «другое» (Бошка тизимида)';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
         end;
       end;

       if (cdsOKTEMP9.FieldByName('post_CODE').AsString='')
       and (cdsOKTEMP9.FieldByName('established_post').AsString='')
       then begin
         ErMessage:=ErMessage+'На самом деле Заполняется или код должности или Должность Одно из 2-х обязательно должно быть заполнено';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
       end;

//
       if cdsOKTEMP9.FieldByName('BASIS_NUM').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Номер приказа/основания';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
  //       DBEdit811.SetFocus;
    //     exit;
       end;
//

       if (cdsOKTEMP9.FieldByName('date_attest').AsString<>'')
       and (cdsOKTEMP9.FieldByName('resh_attest').AsString='')
       then begin
         ErMessage:=ErMessage+'Если указан реквизит «Дата аттестации», то реквизит «Решение аттестационной комиссии» должен быть заполнен';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
       end;

       if (cdsOKTEMP9.FieldByName('date_pr_kvl').AsString<>'')
       and (cdsOKTEMP9.FieldByName('numb_pr_kvl').AsString='')
       then begin
         ErMessage:=ErMessage+'Если указан реквизит «Дата  прохождения Квалификационной комиссии Центрального банка», то реквизит «Номер протокола Квалификационной комиссии Центрального банка о соответствии должности, на которую выдвигается» должен быть заполнен';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
       end;

       if (cdsOKTEMP9.FieldByName('date_utv_km').AsString<>'')
       and (cdsOKTEMP9.FieldByName('numb_utv_km').AsString='')
       then begin
         ErMessage:=ErMessage+'Если указан реквизит «Дата утверждения Кабинетом Министров», то реквизит «Номер постановления Кабинета Министров об утверждении в занимаемой должности» должен быть заполнен';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
       end;

       if (cdsOKTEMP9.FieldByName('out_office_date').AsString<>'')
       and (cdsOKTEMP9.FieldByName('in_office_date').AsString<>'')
       then begin
         if (cdsOKTEMP9.FieldByName('cod_pr_off').AsString='')
         and (cdsOKTEMP9.FieldByName('pr_off').AsString='')
         then begin
           ErMessage:=ErMessage+'Если реквизит «Код причины прекращения работы в должности» не указан, то обязательно должен быть заполнен реквизит «Причина прекращения работы в должности»';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
         end;
         if (cdsOKTEMP9.FieldByName('out_office_date').AsDatetime>now)
         or (cdsOKTEMP9.FieldByName('out_office_date').AsDatetime<cdsOKTEMP9.FieldByName('in_office_date').AsDatetime)
         then begin
           ErMessage:=ErMessage+'Дата прекращения работы в должности не должна быть больше текущей даты и меньше даты начала работы в этой должности';
              memotest.lines.add('"Сведения о работе" '+ErMessage); ErMessage:='';
         end;
       end;

      cdsOKTEMP9.Next;

     End;

//  9: If (cdsOKRise.State in dsEditModes) and (cdbgOKRise.CanFocus)
//     Then begin
{      cdsOKTEMP10.close;
      with cdsOKTEMP10.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP10, SQL_OKrise+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP10.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP10.filtered:=true;

//     Tabokrise_9Show(nil);
     cdsOKTEMP10.first;
       if (cdsOkPersonalcopy.FieldByName('is_rise').AsString='1')
       and (cdsOKTEMP10.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Квалификация Есть"';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     while not cdsOKTEMP10.eof do begin

// квалификация
//
       if cdsOkPersonalcopy.FieldByName('is_rise').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Квалификация Нет"';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP10.FieldByName('rise_info').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Сведения о повышении (квалификации)';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //       DBEdit12.SetFocus;
    //     exit;
       end;
//
//
       check_date_message_:= check_date_yyyymmdd(cdsOKTEMP10.FieldByName('rise_date_year').AsString,
         cdsOKTEMP10.FieldByName('rise_date_mm').AsString,cdsOKTEMP10.FieldByName('rise_date_dd').AsString,
         'N','Y');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(30738) Квалификация '+check_date_message_;
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //       DBEdit46.SetFocus;
    //     exit;
       end;

       if cdsOKTEMP10.FieldByName('rise_date_year').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год прохождения (квалификации)';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //       DBEdit46.SetFocus;
    //     exit;
       end else begin
         if (cdsOKTEMP10.FieldByName('rise_date_year').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKTEMP10.FieldByName('rise_date_year').AsInteger- strtoint(copy( cdsOkPersonalcopy.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
//           showmessag e(
           ErMessage := ErMessage+'Разница даты повышения квалификации и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
  //         exit;
         end;

         if  (cdsOKTEMP10.FieldByName('rise_date_year').AsString<>'')
         and (cdsOKTEMP10.FieldByName('rise_date_mm').AsString<>'')
         and (cdsOKTEMP10.FieldByName('rise_date_dd').AsString<>'')
         then begin
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKTEMP10.FieldByName('rise_date_dd').AsString+'.'+
                cdsOKTEMP10.FieldByName('rise_date_mm').AsString+'.'+
                cdsOKTEMP10.FieldByName('rise_date_year').AsString,
           cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKTEMP10.FieldByName('rise_date_dd').AsString+'.'+
                          cdsOKTEMP10.FieldByName('rise_date_mm').AsString+'.'+
                          cdsOKTEMP10.FieldByName('rise_date_year').AsString) >now )
           or (raznica<18)
           then begin
             ErMessage:= ErMessage+ '(05982)Разница Даты повышения квалификации и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника';
              memotest.lines.add('"Квалификация" '+ErMessage); ErMessage:='';
           end;

         end;
       end;
//

      cdsOKTEMP10.Next;

     End;

// 10: If (cdsOKElection.State in dsEditModes) and (cdbgOKElection.CanFocus)
//     Then begin
{      cdsOKTEMP11.close;
      with cdsOKTEMP11.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP11, SQL_OKElection+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP11.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP11.filtered:=true;

//     TabSheet_10Show(nil);
     cdsOKTEMP11.first;
       if (cdsOkPersonalcopy.FieldByName('is_Election').AsString='1')
       and (cdsOKTEMP11.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Избрание Есть"';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     while not cdsOKTEMP11.eof do begin

// избрание
//
       if cdsOkPersonalcopy.FieldByName('is_Election').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Избрание Нет"';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP11.FieldByName('election_post').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Должность';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       DBEdit48.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP11.FieldByName('election_date_begin').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Начало(год)';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       DBEdit47.SetFocus;
    //     exit;
       end else begin
         if (cdsOKTEMP11.FieldByName('election_date_begin').AsInteger> strtoint(copy(bankdate,7,4))  )
         or ((cdsOKTEMP11.FieldByName('election_date_begin').AsInteger- strtoint(copy( cdsOkPersonalcopy.fieldbyname('birthday').asstring,7,4))<18 ))
         then begin
//           showmessag e(
         ErMessage := ErMessage+'Разница даты избрания и даты рождения сотрудника не должна быть меньше 18  и больше возраста сотрудника';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //         exit;
         end;
         if  (cdsOKTEMP11.FieldByName('election_date_begin').AsString<>'')
         and (cdsOKTEMP11.FieldByName('election_date_begin_mm').AsString<>'')
         and (cdsOKTEMP11.FieldByName('election_date_begin_dd').AsString<>'')
         then begin
           raznica:=getsqlresultpar('select trunc(months_between(:p_1,:p_2)/:p_3) from dual',
                cdsOKTEMP11.FieldByName('election_date_begin_dd').AsString+'.'+
                cdsOKTEMP11.FieldByName('election_date_begin_mm').AsString+'.'+
                cdsOKTEMP11.FieldByName('election_date_begin').AsString,
           cdsOkPersonalcopy.FieldByName('BIRTHDAY').AsString,'12');
           if ( strtodate(cdsOKTEMP11.FieldByName('election_date_begin_dd').AsString+'.'+
                          cdsOKTEMP11.FieldByName('election_date_begin_mm').AsString+'.'+
                          cdsOKTEMP11.FieldByName('election_date_begin').AsString) >now )
           or (raznica<18)
           then begin
             ErMessage:= ErMessage+ '(05974)Разница Даты избрания и даты рождения сотрудника  должна быть больше 18  и меньше либо равна возрасту сотрудника';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
           end;

         end;

       end;
//
//
       if cdsOKTEMP11.FieldByName('election_date_end').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Завершение(год)';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       DBEdit14.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP11.FieldByName('election_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Исполнительный орган';
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
//         DBLCBelection.SetFocus;
  //       exit;
       end;
//
       check_date_message_:= check_date_yyyymmdd(cdsOKTEMP11.FieldByName('election_date_begin').AsString,
         cdsOKTEMP11.FieldByName('election_date_begin_mm').AsString,cdsOKTEMP11.FieldByName('election_date_begin_dd').AsString,
         'N','N');

       if check_date_message_<>'1'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'(30900) Избрание '+check_date_message_;
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //       DBEdit47.SetFocus;
    //     exit;
       end;


       if not cdsOKTEMP11.FieldByName('election_date_end').isnull
       then begin
         check_date_message_:= check_date_yyyymmdd(cdsOKTEMP11.FieldByName('election_date_end').AsString,
           cdsOKTEMP11.FieldByName('election_date_end_mm').AsString,
           cdsOKTEMP11.FieldByName('election_date_end_dd').AsString,'Y','N');

         if check_date_message_<>'1'
         then begin
//           showmessag e(
           ErMessage := ErMessage+'(30916)Избрание завершение '+check_date_message_;
              memotest.lines.add('"Избрание" '+ErMessage); ErMessage:='';
  //         DBEdit14.SetFocus;
    //       exit;
         end;
       end;
      cdsOKTEMP11.next;

     End;

// 11: If (cdsOKPremium.State in dsEditModes) and (cdbgOKPremium.CanFocus)
//     Then begin
{      cdsOKTEMP12.close;
      with cdsOKTEMP12.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP12, SQL_OKPremium+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP12.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP12.filtered:=true;

//     TabSheet_11Show(nil);

       if (cdsOkPersonalcopy.FieldByName('is_Premium').AsString='1')
       and (cdsOKTEMP12.RecordCount=0)
       then begin
  //       showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Гос премии Есть"';
              memotest.lines.add('"Гос премии" '+ErMessage); ErMessage:='';
//         exit;
       end;

     cdsOKTEMP12.first;

     while not cdsOKTEMP12.eof do begin

// гос премии
//
       if cdsOkPersonalcopy.FieldByName('is_Premium').AsString='2'
       then begin
  //       showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Гос премии Нет"';
              memotest.lines.add('"Гос премии" '+ErMessage); ErMessage:='';
//         exit;
       end;

       if cdsOKTEMP12.FieldByName('premium_name').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Наименование';
              memotest.lines.add('"Гос премии" '+ErMessage); ErMessage:='';
  //       dbedit15.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP12.FieldByName('premium_date').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год получения';
              memotest.lines.add('"Гос премии" '+ErMessage); ErMessage:='';
//         dbedit16.SetFocus;
  //       exit;
       end;
//
      cdsOKTEMP12.next;

     End;

// 12: If (cdsOKArmy.State in dsEditModes) and (cdbgOKArmy.CanFocus)
//     Then begin
{      cdsOKTEMP13.close;
      with cdsOKTEMP13.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP13, SQL_OKArmy+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP13.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP13.filtered:=true;

//     TabSheet_12Show(nil);
       if (cdsOkPersonalcopy.FieldByName('is_Army').AsString='1')
       and (cdsOKTEMP13.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Армия Есть"';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     cdsOKTEMP13.first;
     while not cdsOKTEMP13.eof do begin

   if (headbranch_='09049') and (rukovod_=0)
   then begin

   end else begin
// воинская служба
//
       if cdsOkPersonalcopy.FieldByName('is_Army').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Армия Нет"';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP13.FieldByName('army_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Отношение';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
//         DBLookupComboBox7.SetFocus;
  //       exit;
       end;
//
     if cdsOKTEMP13.Fields.FieldByName('army_code').AsString='1'
     then begin
//
       if cdsOKTEMP13.FieldByName('fitness_army_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Годность';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       DBLookupComboBox6.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('staff_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Вид состава';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       DBLcbStaff.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('type_force_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Род войск';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       DBLCBtypeforce.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('army_group_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Группа учета';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       DBLCBtypeforce.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('category_army_code').AsString=''
       then begin
    //     showmessag e (
         ErMessage := ErMessage+'Не заполнено поле '+'Категория учета';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
//         DBLCBcategoryarmy.SetFocus;
  //       exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('special_army').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'В/Специальность';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       dbedit52.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('number_vus').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Номер ВУС';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       dbedit50.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('military_rank_code').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'В/Звание';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       DBLCBmilitaryrank.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('code_army_post').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Код должности и особые признаки в/службы';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
//         dbedit18.SetFocus;
  //       exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('name_army_office').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Военкомат';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
//         dbedit55.SetFocus;
  //       exit;
       end;
//
//
       if cdsOKTEMP13.FieldByName('specreg_number').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Спец.учет N';
              memotest.lines.add('"Армия" '+ErMessage); ErMessage:='';
  //       dbedit53.SetFocus;
    //     exit;
       end;
//

      end;

      cdsOKTEMP13.Next;

     End;
   end; // если капитал и не рукводящий то не проверять

// 13: If (cdsOKParty.State in dsEditModes) and (cdbgOKParty.CanFocus)
//     Then begin
{      cdsOKTEMP14.close;
      with cdsOKTEMP14.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP14, SQL_OKParty+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP14.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP14.filtered:=true;

//     TabSheet_13Show(nil);
     cdsOKTEMP14.first;
       if (cdsOkPersonalcopy.FieldByName('is_Party').AsString='1')
       and (cdsOKTEMP14.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Партия Есть"';
              memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
  //       exit;
       end;
     while not cdsOKTEMP14.eof do begin

// партии
//
       if cdsOkPersonalcopy.FieldByName('is_Party').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Партия Нет"';
              memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP14.FieldByName('party_CODE').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Партия';
              memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
  //       DBLCBparty.SetFocus;
    //     exit;
       end;
//
//       if cdsOKTEMP14.FieldByName('code_partii_prim').AsString=''
//       then begin
//         cdsOKTEMP14.FieldByName('code_partii_prim').AsString :=
//           cdsOKTEMP14.FieldByName('party_code_show').AsString;
//       end;
//
       party_code_show := getsqlresultpar('select party_name from ss_ok_party where party_code=:p_1',cdsOKTEMP14.FieldByName('party_code').AsString);
       if (uppercase(party_code_show)='ПАРТИЯСИЗ')
       or (uppercase(party_code_show)='БЕСПАРТИЙНЫЙ')
       or ((party_code_show)='Партиясиз')
       or ((party_code_show)='Беспартийный')
       or ((party_code_show)='партиясиз')
       or ((party_code_show)='беспартийный')
       then begin
       // беспартийный
       end else begin
           if cdsOKTEMP14.FieldByName('party_date').AsString=''
           then begin
    //         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Год вступления в партию';
              memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//             dbedit73.SetFocus;
  //           exit;
           end;
    //
           if (cdsOKTEMP14.FieldByName('party_date').AsInteger<1917)
           or (cdsOKTEMP14.FieldByName('party_date').AsInteger>strtoint(copy(bankdate,7,4) ) )
           then begin
    //         showmessag e(
             ErMessage := ErMessage+'Неправильный='+cdsOKTEMP14.FieldByName('party_date').AsString+' Год вступления в партию';
              memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//             dbedit73.SetFocus;
  //           exit;
           end;
    //
    //
           if cdsOKTEMP14.FieldByName('punishment_motive').AsString<>''
           then begin
             if cdsOKTEMP14.FieldByName('punishment_date').AsString=''
             then begin
    //           showmessag e(
               ErMessage := ErMessage+'Вы ввели Причину партийного наказания,'+
                 cdsOKTEMP14.FieldByName('punishment_motive').AsString+
                 'но Не заполнили поле '+
                 'Год парт.наказания';
               memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//               dbed_gpn.SetFocus;
  //             exit;
             end;
           end;

           if  cdsOKTEMP14.FieldByName('punishment_date').AsString<>''
           then begin
             if cdsOKTEMP14.FieldByName('punishment_motive').AsString=''
             then begin
    //           showmessag e(
               ErMessage := ErMessage+'Вы ввели Год парт.наказания,'+
                 cdsOKTEMP14.FieldByName('punishment_date').AsString+
                 'но Не заполнили поле '+
                 'Причина парт.наказания';
               memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//               DBEd_ppn.SetFocus;
  //             exit;
             end;
           end;
    //
    //
           if  cdsOKTEMP14.FieldByName('out_party').AsString<>''
           then begin
             if cdsOKTEMP14.FieldByName('party_outdate').AsString=''
             then begin
    //           showmessag e(
               ErMessage := ErMessage+'Вы ввели Причину выхода из партии,'+
                 cdsOKTEMP14.FieldByName('out_party').AsString+
                 'но Не заполнили поле '+
                 'Год выхода из партии';
                memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//               dbed_gvp.SetFocus;
  //             exit;
             end;
           end;
    //
           if cdsOKTEMP14.FieldByName('party_outdate').AsString<>''
           then begin
             if cdsOKTEMP14.FieldByName('out_party').AsString=''
             then begin
    //           showmessag e(
               ErMessage := ErMessage+'Вы ввели Год выхода из партии,'+
                 cdsOKTEMP14.FieldByName('party_outdate').ASstring +
                 'но Не заполнили поле '+
                 'Причина выхода из партии';
               memotest.lines.add('"Партия" '+ErMessage); ErMessage:='';
//               dbed_pvp.SetFocus;
  //             exit;
             end;
           end;
    //
       end;

      cdsOKTEMP14.next;

     End;

// 15: If (cdsOKLeave.State in dsEditModes) and (cdbgOKLeave.CanFocus)
//     Then begin
{      cdsOKTEMP15.close;
      with cdsOKTEMP15.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP15, SQL_OKleave+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP15.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP15.filtered:=true;

//     TabSheet_16Show(nil);
     cdsOKTEMP15.first;
     while not cdsOKTEMP15.eof do begin

// отпуска
//
       if cdsOKTEMP15.FieldByName('leave_CODE').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Вид отпуска';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
//         DBLookupComboBox13.SetFocus;
  //       exit;
       end;
//
//
       if cdsOKTEMP15.FieldByName('period_leave').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Кол-во дней отпуска';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
  //       dbedit63.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP15.FieldByName('num_basis').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Номер приказа';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
  //       dbedit62.SetFocus;
    //     exit;
       end;
//
       if cdsOKTEMP15.FieldByName('begin_year').AsString=''
       then begin
    //     showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Рабочий год- начало';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
//         dbedit60.SetFocus;
  //       exit;
       end;
//
//
       if cdsOKTEMP15.FieldByName('end_year').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Р/ год- окончание';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
  //       dbedit61.SetFocus;
    //     exit;
       end;
//
//
       if    (cdsOKTEMP15.FieldByName('leave_CODE').AsString<>'4')
         and (cdsOKTEMP15.FieldByName('leave_CODE').AsString<>'7')
       then begin
           if cdsOKTEMP15.FieldByName('date_in_leave').AsString=''
           then begin
//             showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата выхода в отпуск';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
  //           DBEDdate_in_leave.SetFocus;
    //         exit;
           end;
           if cdsOKTEMP15.FieldByName('date_out_leave').AsString=''
           then begin
//             showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Дата выхода из отпуска';
              memotest.lines.add('"Отпуск" '+ErMessage); ErMessage:='';
  //           dbedit26.SetFocus;
    //         exit;
           end;
       end;
//

      cdsOKTEMP15.Next;

     End;

// 16: If (cdsOKConvictions.State in dsEditModes) and (cdbgOKConvictions.CanFocus)
//     Then begin
{      cdsOKTEMP16.close;
      with cdsOKTEMP16.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsOkPersonalcopy.FieldByName('personal_code').AsString;
      end;
      LoadData(cdsOKTEMP16, SQL_OKConvictions+' where branch=:p_1 and personal_code=:p_2');
}     cdsOKTEMP16.filter:='personal_code='+cdsOkPersonalcopy.FieldByName('personal_code').AsString;
     cdsOKTEMP16.filtered:=true;

//     TabSheet_17Show(nil);
       if (cdsOkPersonalcopy.FieldByName('is_Convictions').AsString='1')
       and (cdsOKTEMP16.recordcount=0)
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Судимость Есть"';
              memotest.lines.add('"Судимость" '+ErMessage); ErMessage:='';
  //       exit;
       end;

     cdsOKTEMP16.first;
     while not cdsOKTEMP16.eof do begin

// судимости
//
       if cdsOkPersonalcopy.FieldByName('is_Convictions').AsString='2'
       then begin
//         showmessag e(
         ErMessage := ErMessage+'В Сведениях для ИИАС указано "Судимости Нет"';
              memotest.lines.add('"Судимость" '+ErMessage); ErMessage:='';
  //       exit;
       end;

       if cdsOKTEMP16.FieldByName('convictions_motive').AsString=''
       then begin
//         showmessag e(
         ErMessage := ErMessage+'Не заполнено поле '+'Причина';
              memotest.lines.add('"Судимость" '+ErMessage); ErMessage:='';
  //       dbedit27.SetFocus;
    //     exit;
       end;
//
//
       if cdsOKTEMP16.FieldByName('convictions_date').AsString=''
       then begin
//         showmessag e('Не заполнено поле '+'год');
  //       dbedit28.SetFocus;
    //     exit;
         ErMessage := ErMessage+'Не заполнено поле '+'год';
              memotest.lines.add('"Судимость" '+ErMessage); ErMessage:='';
       end;
//
//
      cdsOKTEMP16.next;

     end;

/////////////////////--------\\\\\\\\\\\\\\\\\\\\\\

//  if ErMessage<>'' then  ErMessage := ErMessage+ErMessage;

//  if ErMessage <> '' then
//  begin
//    ShowMessage( ErMessage);
//  end;
    ///////////////////////////////////////
    cdsOkPersonalcopy.next;
  end; // end of while not cdsOkPersonalcopy.eof


  MemoTest.lines.add(datetostr(now)+' '+TimeToStr(Time));
  MemoTest.lines.SaveToFile('C:\NCI Bank\OK\Temp\err_okN1.txt');


        try
          WinExec('notepad C:\NCI Bank\OK\Temp\err_okN1.txt', SW_MAXIMIZE);
        except
          showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_okN1.txt"');
        end;

  cdsOKTEMP1.Close;
  cdsOKTEMP2.Close;
  cdsOKTEMP3.Close;
  cdsOKTEMP4.Close;
  cdsOKTEMP5.Close;
  cdsOKTEMP6.Close;
  cdsOKTEMP7.Close;
  cdsOKTEMP8.Close;
  cdsOKTEMP9.Close;
  cdsOKTEMP10.Close;
  cdsOKTEMP11.Close;
  cdsOKTEMP12.Close;
  cdsOKTEMP13.Close;
  cdsOKTEMP14.Close;
  cdsOKTEMP15.Close;
  cdsOKTEMP16.close;

end;

procedure TBOKForm.bbDoljnostiClick(Sender: TObject);
var  sql_  :string;
  MyRange: OLEVariant;
 //Range,
 V: Variant; // , Cell1, Cell2, ArrayData
 row,row_j:integer;  // begin_row,j,end_row, col,  ,nn , row_k
 NumFormat,DateFormat,StrFormat: String;
// fil_schema: String;
 department_code_old, code_,name_,count_stat_,count_fakt_ : string;
 itogo_count_stat_, itogo_count_fakt_ : double;
begin



 Try
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;
  row:=1;
  StrFormat  := '@';
  try
    V.Cells[row,3].NumberFormat := '00.0';
    NumFormat := '# ##0.00_р_.';
    DateFormat := 'dd.mm.yyyy';
  except
    NumFormat := '# ##0,00_р_.';
    DateFormat := 'ДД.ММ.ГГГГ';
  end;

//  MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
//  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
//  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
    V.Cells[row,2].Value:='Должности';


    inc(row);
    inc(row);
    row_j:=1;

//    V.Cells[row,row_j].ColumnWidth := 5;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:='       N';
//    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' МФО ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' Код ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 35;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' Наименование ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' По штату ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' По факту';
    inc(row_j);

//    V.Cells[row,row_j].ColumnWidth := 20;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:=' ';
//    inc(row_j);

//    V.Cells[row,row_j].ColumnWidth := 20;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:=' ';

    row_j:=1;
    inc(row);




      try

        sql_:=
        ' select sop.post_code,''11''||sop.post_name, sum(nvl(okp.zp_rate_code,8)/8) '+
        ' from ss_ok_post sop, ok_personal okp'+
        ' where sop.post_code=okp.post_code (+)'+
        ' and okp.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and (okp.branch= :p_1 or okp.branch is null)'+
        ' and (okp.status_code in ( :p_2 , :p_3 ) or okp.status_code is null)'+
        ' group by sop.post_code,sop.post_name'+
        ' union all'+
        ' select sop.post_code,''00''||sop.post_name, sum(nvl(oks.quantity_post,0))'+
        ' from ss_ok_post sop, ok_stat oks'+
        ' where sop.post_code=oks.post_code (+)'+
        ' and oks.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' group by sop.post_code,sop.post_name'+
        ' order by 1,2';

        ExecPrc.Close;
        with ExecPrc.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value :=branch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value :='2';
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value :='5';
        end;
//
        loaddata(ExecPrc,sql_);

        ExecPrc.First;
        department_code_old:='-1';

        while not ExecPrc.eof
        do begin

          if copy( Trim(ExecPrc.Fields[1].AsString) ,1,2)='00'
          then begin
            // по штату
              code_ := Trim(ExecPrc.Fields[0].AsString);
              name_ := copy( Trim(ExecPrc.Fields[1].AsString) ,3, length(Trim(ExecPrc.Fields[1].AsString)) );
              count_stat_ := Trim(ExecPrc.Fields[2].AsString);
              itogo_count_stat_ := itogo_count_stat_+  ExecPrc.Fields[2].AsFloat;
              if department_code_old<>code_
              then begin
                department_code_old := code_;
                inc(row);
//*                V.Cells[row,1].Value := CDS_DBBranch.fieldbyname('branch').asstring+
  //*                                 ' '+ CDS_DBBranch.fieldbyname('BANK_NAME').asstring;
                V.Cells[row,1].Value := branch;
                V.Cells[row,2].Value := code_;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := name_;
                V.Cells[row,4].Value := count_stat_;
              end else begin
                V.Cells[row,4].Value := count_stat_;
              end;
          end;

          if copy( Trim(ExecPrc.Fields[1].AsString) ,1,2)='11'
          then begin
            // по факту
              code_ := Trim(ExecPrc.Fields[0].AsString);
              name_ := copy( Trim(ExecPrc.Fields[1].AsString) ,3, length(Trim(ExecPrc.Fields[1].AsString)) );
              count_fakt_ := Trim(ExecPrc.Fields[2].AsString);
              itogo_count_fakt_ := itogo_count_fakt_+  ExecPrc.Fields[2].AsFloat;
              if department_code_old<>code_
              then begin
                department_code_old := code_;
                inc(row);
//*                V.Cells[row,1].Value := CDS_DBBranch.fieldbyname('branch').asstring+
  //*                                 ' '+ CDS_DBBranch.fieldbyname('BANK_NAME').asstring;
                V.Cells[row,1].Value := branch;
                V.Cells[row,2].Value := code_;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := name_;
                V.Cells[row,5].Value := count_fakt_;
              end else begin
                V.Cells[row,5].Value := count_fakt_;
              end;
          end;

          ExecPrc.next;
        end;

      except on e:exception
        do begin
//          MemoProt.visible:=true;
//          MemoProt.clear;
//          MemoProt.lines.add(sql_);
  //        MemoProt.lines.add(e.Message);
          showmessage('ошибка. '+#13+
            sql_+#13+
            e.Message+#13);
    //      exit;
        end;
      end;



///////////////////////////////////////////
// добавить игого
                inc(row);
//*                V.Cells[row,1].Value := ''''+CDS_DBBranch.fieldbyname('branch').asstring;
                V.Cells[row,1].Value := ''''+branch;
//                V.Cells[row,2].Value := ;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := 'Итого';
                V.Cells[row,4].Value := itogo_count_stat_;
                V.Cells[row,5].Value := itogo_count_fakt_;
///////////////////////////////////////////
///////////////////////////////////////////

  Application.ProcessMessages;
//  V.Cells.Select;
//  V.Columns.AutoFit;
//*  Range := V.Range[numto(1)+'8:'+numto(11)+inttostr(row+1)];
//*  Range.Select;
//*  Range.Columns.AutoFit;
 Finally
  V.Visible := True; //так быстрее
 End;
//  MemoProt.lines.add(TimeToStr(Time));

end;

procedure TBOKForm.bbDepClick(Sender: TObject);
var  sql_  :string;
  MyRange: OLEVariant;
 //Range,
 V: Variant; // , Cell1, Cell2, ArrayData
 row,row_j:integer;  // begin_row,j,end_row, col,  ,nn , row_k
 NumFormat,DateFormat,StrFormat: String;
// fil_schema: String;
 department_code_old, code_,name_,count_stat_,count_fakt_ : string;
 itogo_count_stat_,itogo_count_fakt_ : double;
begin


 Try
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;
  row:=1;
  StrFormat  := '@';
  try
    V.Cells[row,3].NumberFormat := '00.0';
    NumFormat := '# ##0.00_р_.';
    DateFormat := 'dd.mm.yyyy';
  except
    NumFormat := '# ##0,00_р_.';
    DateFormat := 'ДД.ММ.ГГГГ';
  end;

//  MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
//  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
//  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
//    V.Cells[row,2].Value:=' ';
  inc(row); MyRange:= V.Range[numto(2)+inttostr(row)+':'+numto(11)+inttostr(row)];  MyRange.Merge;
    V.Cells[row,2].Value:='Подразделения';


    inc(row);
    inc(row);
    row_j:=1;

//    V.Cells[row,row_j].ColumnWidth := 5;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:='       N';
//    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' МФО ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' Код ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 35;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' Наименование ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' По штату ';
    inc(row_j);

    V.Cells[row,row_j].ColumnWidth := 10;
    V.Cells[row,row_j].WrapText := true;
    V.Cells[row,row_j].Value:=' По факту';
    inc(row_j);

//    V.Cells[row,row_j].ColumnWidth := 20;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:=' ';
//    inc(row_j);

//    V.Cells[row,row_j].ColumnWidth := 20;
//    V.Cells[row,row_j].WrapText := true;
//    V.Cells[row,row_j].Value:=' ';

    row_j:=1;
    inc(row);



    itogo_count_stat_ :=0;
    itogo_count_fakt_ :=0;

      try

        sql_:=
        ' select sop.department_code,''11''||sop.department_name, sum(nvl(okp.zp_rate_code,8)/8) '+
        ' from ss_ok_department sop, ok_personal okp'+
        ' where sop.department_code=okp.department_code (+)'+
        ' and sop.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and (okp.branch= :p_1 or okp.branch is null)'+
        ' and (okp.status_code in ( :p_2 , :p_3 ) or okp.status_code is null)'+
        ' group by sop.department_code,sop.department_name'+
        ' union all'+
        ' select sop.department_code,''00''||sop.department_name, sum(nvl(oks.quantity_post,0))'+
        ' from ss_ok_department sop, ok_stat oks'+
        ' where sop.department_code=oks.department_code (+)'+
        ' and sop.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' group by sop.department_code,sop.department_name'+
        ' order by 1,2';

        ExecPrc.Close;
        with ExecPrc.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value :=branch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value :='2';
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value :='5';
        end;
//
        loaddata(ExecPrc,sql_);

        ExecPrc.First;
        department_code_old:='-1';


        while not ExecPrc.eof
        do begin

          if copy( Trim(ExecPrc.Fields[1].AsString) ,1,2)='00'
          then begin
            // по штату
              code_ := Trim(ExecPrc.Fields[0].AsString);
              name_ := copy( Trim(ExecPrc.Fields[1].AsString) ,3, length(Trim(ExecPrc.Fields[1].AsString)) );
              count_stat_ := Trim(ExecPrc.Fields[2].AsString);
              itogo_count_stat_ := itogo_count_stat_+  ExecPrc.Fields[2].AsFloat;
              if department_code_old<>code_
              then begin
                department_code_old := code_;
                inc(row);
//*                V.Cells[row,1].Value := CDS_DBBranch.fieldbyname('branch').asstring+
   //*                                ' '+ CDS_DBBranch.fieldbyname('BANK_NAME').asstring;
                V.Cells[row,1].Value := branch;
                V.Cells[row,2].Value := code_;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := name_;
                V.Cells[row,4].Value := count_stat_;
              end else begin
                V.Cells[row,4].Value := count_stat_;
              end;
          end;

          if copy( Trim(ExecPrc.Fields[1].AsString) ,1,2)='11'
          then begin
            // по факту
              code_ := Trim(ExecPrc.Fields[0].AsString);
              name_ := copy( Trim(ExecPrc.Fields[1].AsString) ,3, length(Trim(ExecPrc.Fields[1].AsString)) );
              count_fakt_ := Trim(ExecPrc.Fields[2].AsString);
              itogo_count_fakt_ := itogo_count_fakt_+  ExecPrc.Fields[2].AsFloat;
              if department_code_old<>code_
              then begin
                department_code_old := code_;
                inc(row);
//*                V.Cells[row,1].Value := CDS_DBBranch.fieldbyname('branch').asstring+
  //*                                 ' '+ CDS_DBBranch.fieldbyname('BANK_NAME').asstring;
                V.Cells[row,1].Value := branch;
                V.Cells[row,2].Value := code_;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := name_;
                V.Cells[row,5].Value := count_fakt_;
              end else begin
                V.Cells[row,5].Value := count_fakt_;
              end;
          end;

          ExecPrc.next;
        end;

      except on e:exception
        do begin
//          MemoProt.visible:=true;
//          MemoProt.clear;
//          MemoProt.lines.add(sql_);
  //        MemoProt.lines.add(e.Message);
          showmessage('ошибка. '+#13+
            sql_+#13+
            e.Message+#13);
    //      exit;
        end;
      end;



///////////////////////////////////////////
// добавить игого
                inc(row);
//*                V.Cells[row,1].Value := ''''+CDS_DBBranch.fieldbyname('branch').asstring;
                V.Cells[row,1].Value := ''''+branch;

//                V.Cells[row,2].Value := ;
                V.Cells[row,3].WrapText := true;
                V.Cells[row,3].Value := 'Итого';
                V.Cells[row,4].Value := itogo_count_stat_;
                V.Cells[row,5].Value := itogo_count_fakt_;
///////////////////////////////////////////
///////////////////////////////////////////

  Application.ProcessMessages;
//  V.Cells.Select;
//  V.Columns.AutoFit;
//*  Range := V.Range[numto(1)+'8:'+numto(11)+inttostr(row+1)];
//*  Range.Select;
//*  Range.Columns.AutoFit;
 Finally
  V.Visible := True; //так быстрее
 End;
//  MemoProt.lines.add(TimeToStr(Time));

end;

procedure TBOKForm.BitBtn179Click(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant;
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname,oldpost: String;
  total_count,
  total_sum,total_sum2,total_count2:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].Value := 'Наименование';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'Тарифный';
  inc(i);
  V.Cells[row, i ].Value := 'Количество';
  inc(i);
  V.Cells[row, i ].Value := 'Размер';
  inc(i);
  V.Cells[row, i ].Value := 'Всего';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'отделов,';
  inc(i);
  V.Cells[row, i ].Value := 'Разряд';
  inc(i);
  V.Cells[row, i ].Value := 'Коэффициент';
  inc(i);
  V.Cells[row, i ].Value := 'рабочих';
  inc(i);
  V.Cells[row, i ].Value := 'должностного';
  inc(i);
  V.Cells[row, i ].Value := 'за';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'должностей';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'мест';
  inc(i);
  V.Cells[row, i ].Value := 'оклада';
  inc(i);
  V.Cells[row, i ].Value := 'месяц';

  total_count:=0;
  total_count2:=0;
  total_sum:=0;
  total_sum2:=0;

  olddepname:='x';
  oldpost:='x';
  While not cdsTempSource.Eof
  do begin
    if (headbranch_='09006')
    then begin
        sql_:='select '+
           ' c.post_name field1 ,d.category_name field2,d.category_rate,'+
           ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' round(( nvl( to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'' ),0) )*nvl(d.salary,0),2) zarpl, '+
           ' to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'') float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_post_category f'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
          ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.department_code=okp.department_code'+
           ' and a.branch=okp.branch'+
           ' and a.post_code=okp.post_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
          ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
          ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
        end;

    end else begin
        sql_:='select '+
           ' c.post_name field1 ,d.category_name field2,d.category_rate,'+
           ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' round(( nvl( to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'' ),0) )*nvl(d.salary,0),2) zarpl, '+
           ' to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''99999999999.99'') float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
          ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.department_code=okp.department_code'+
           ' and a.branch=okp.branch'+
           ' and a.post_code=okp.post_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
           ' and c.category_code=d.category_code (+)'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
        end;
      end;
      loaddata(cdsTemp,sql_);

      While not cdsTemp.Eof
      do begin

          if (olddepname <>cdsTemp.Fields[6].AsString)
          then begin
            inc(row);
            inc(row);
            V.Cells[row, 1 ].NumberFormat := StrFormat;
            V.Cells[row, 1 ].Value := cdsTemp.Fields[6].AsString;
          end;
          olddepname :=cdsTemp.Fields[6].AsString;

         if (oldpost <>cdsTemp.Fields[0].AsString)
         then begin
          inc(row);
          inc(row);
          i := 1;
          For col:=0 To 5
          Do Begin

              case cdsTemp.Fields[col].DataType Of
                ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
                ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
                ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
              end;
              V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
              inc(i);
          if col=3
          then total_count:= total_count+ cdsTemp.Fields[col].Asfloat;
          if col= 5
          then begin
            total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
          end;
         end;

         oldpost :=cdsTemp.Fields[0].AsString;

        End;

        inc(row);
        V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('fio').asstring;
        V.Cells[row, 4 ].Value := cdsTemp.fieldbyname('stavka').asstring;
        V.Cells[row, 5 ].Value := cdsTemp.fieldbyname('zarpl').asstring;
        total_sum2:= total_sum2+  cdsTemp.fieldbyname('zarpl').Asfloat;
        total_count2:=  total_count2   +  cdsTemp.fieldbyname('float_stavka').Asfloat;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


    inc(row);
    inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=floattostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count2);
      V.Cells[row+1,4].NumberFormat := NumFormat;
      V.Cells[row+1,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count-total_count2);
      if (total_count-total_count2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;


      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum2);
      V.Cells[row+1,6].NumberFormat := NumFormat;
      V.Cells[row+1,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum-total_sum2);
      if (total_sum-total_sum2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Штатное расписание';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.BitBtn181Click(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant; // ,Range
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname: String;
  total_count,
  total_sum:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;


  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);



  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].Value := 'Наименование';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'Тарифный';
  inc(i);
  V.Cells[row, i ].Value := 'Количество';
  inc(i);
  V.Cells[row, i ].Value := 'Размер';
  inc(i);
  V.Cells[row, i ].Value := 'Всего';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'отделов,';

  inc(i);
  V.Cells[row, i ].Value := 'Разряд';

  inc(i);
  V.Cells[row, i ].Value := 'Коэффициент';

  inc(i);
  V.Cells[row, i ].Value := 'рабочих';

  inc(i);
  V.Cells[row, i ].Value := 'должностного';

  inc(i);
  V.Cells[row, i ].Value := 'за';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'должностей';

  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'мест';

  inc(i);
  V.Cells[row, i ].Value := 'оклада';

  inc(i);
  V.Cells[row, i ].Value := 'месяц';

  V.Range['A'+inttostr(row-3)+':'+'F'+inttostr(row)].Select;
  V.Columns.AutoFit;
//  selection.autofit;


  total_count:=0;
  total_sum:=0;

  olddepname:='x';

  While not cdsTempSource.Eof
  do begin
    if (headbranch_='09006')
    then begin
      sql_:='select '+
       ' c.post_name field1 , d.category_name field2,d.category_rate,'+
       ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ss_ok_post_category f'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and c.state_notes=:p_4'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
       ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
       ' order by d.category_code';

      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
      end;

    end else begin
      sql_:='select '+
       ' c.post_name field1 , d.category_name field2,d.category_rate,'+
       ' quantity_post,d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and c.state_notes=:p_4'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and c.category_code=d.category_code (+)'+
       ' order by d.category_code';

      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
      end;
    end;
    loaddata(cdsTemp,sql_);
    While not cdsTemp.Eof
    do begin

        if (olddepname <>cdsTemp.Fields[6].AsString)
        then begin
          inc(row);
          inc(row);
          V.Cells[row, 1 ].NumberFormat := StrFormat;
          V.Cells[row, 1 ].Value := cdsTemp.Fields[6].AsString;
        end;
        olddepname :=cdsTemp.Fields[6].AsString;

        i := 1;
        inc(row);
        For col:=0 To 5
        Do Begin
            case cdsTemp.Fields[col].DataType Of
              ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
              ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
              ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
            end;
            V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
//            V.Cells[row, i ].select;
//            V.selection.autofit;
            inc(i);
            if col=3
            then total_count:= total_count+ cdsTemp.Fields[col].AsFloat;
            if col= 5
            then total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
        End;
     V.Range['A'+inttostr(row)+':'+'F'+inttostr(row)].Select;
     V.Columns.AutoFit;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=Floattostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Штатное расписание';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';


//  V.Cells.Select;
//  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.BitBtn184Click(Sender: TObject);
var
 Save_Cursor:TCursor;
 MyRange,V: Variant;
 i, col,row:integer; //,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,olddepname,oldpost: String; // sum2_,
//  total_count:integer;
//  total_sum,total_sum2,total_count2:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2 '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';


      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  // формирование шапки

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'ФИО';
  inc(i);
  V.Cells[row, i ].Value := 'Должность';
  inc(i);
  V.Cells[row, i ].Value := 'Специализация';
  inc(i);
  V.Cells[row, i ].Value := 'Разряд';
  inc(i);
  V.Cells[row, i ].Value := 'Общий';
  inc(i);
  V.Cells[row, i ].Value := 'Не банковский';
  inc(i);
  V.Cells[row, i ].Value := 'Внутри-системный';
  inc(i);
  V.Cells[row, i ].Value := 'Банковский';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';
  inc(i);
  V.Cells[row, i ].Value := 'стаж';

//  total_count:=0;
//  total_count2:=0;
//  total_sum:=0;
//  total_sum2:=0;

  olddepname:='x';
  oldpost:='x';
  While not cdsTempSource.Eof
  do begin
// сделать селект с параметрами
    if (headbranch_='09006')
    then begin
        sql_:='select '+
         ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
         ' c.post_name field1, sos.special_name,substr( d.category_name,1,decode((instr(d.category_name,''.'')-1),-1, length(d.category_name) ,instr(d.category_name,''.'')-1))  field2,'+
         ' ok_service.GET_WORK_PERIOD(okp.branch,okp.personal_code,info.getday) "Общий стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,1) "Не банковский стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,3) "Внутри-системный стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,5) "Банковский стаж" '+
         ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_special sos, ss_ok_post_category f'+
         ' where okp.branch = :P_BRANCH'+
         ' and a.department_code= :P_DEP'+
         ' and a.department_code=b.department_code'+
         ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
         ' and b.state_notes= :P_A'+
         ' and a.post_code=c.post_code'+
         ' and a.department_code=okp.department_code'+
         ' and a.special_code=sos.special_code'+
         ' and okp.special_code=sos.special_code'+
         ' and a.post_code=okp.post_code'+
         ' and okp.status_code in ( :P_2 , :P_5 )'+
         ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
         ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
         ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params do
        begin
          Clear;
          CreateParam(ftString,'P_BRANCH',ptInput);
          ParamByName('P_BRANCH').Value:=branch;
          CreateParam(ftInteger,'P_DEP',ptInput);
          ParamByName('P_DEP').Value:= cdsTempSource.fieldbyname('DEPARTMENT_CODE').asinteger;
          CreateParam(ftString,'P_A',ptInput);
          ParamByName('P_A').Value:='A';
          CreateParam(ftInteger,'P_2',ptInput);
          ParamByName('P_2').Value:= 2;
          CreateParam(ftInteger,'P_5',ptInput);
          ParamByName('P_5').Value:= 5;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
        end;
    end else begin
        sql_:='select '+
         ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
         ' c.post_name field1, sos.special_name,substr( d.category_name,1,decode((instr(d.category_name,''.'')-1),-1, length(d.category_name) ,instr(d.category_name,''.'')-1))  field2,'+
         ' ok_service.GET_WORK_PERIOD(okp.branch,okp.personal_code,info.getday) "Общий стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,1) "Не банковский стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,3) "Внутри-системный стаж",'+
         ' ok_service.GET_WORK_PERIOD_BY_TYPE(okp.branch,okp.personal_code,info.getday,5) "Банковский стаж" '+
         ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_special sos'+
         ' where okp.branch = :P_BRANCH'+
         ' and a.department_code= :P_DEP'+
         ' and a.department_code=b.department_code'+
         ' and b.DEPARTMENT_CODE in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
         ' and b.state_notes= :P_A'+
         ' and a.post_code=c.post_code'+
         ' and a.department_code=okp.department_code'+
         ' and a.special_code=sos.special_code'+
         ' and okp.special_code=sos.special_code'+
         ' and a.post_code=okp.post_code'+
         ' and okp.status_code in ( :P_2 , :P_5 )'+
         ' and c.category_code=d.category_code (+)'+
         ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params do
        begin
          Clear;
          CreateParam(ftString,'P_BRANCH',ptInput);
          ParamByName('P_BRANCH').Value:=branch;
          CreateParam(ftInteger,'P_DEP',ptInput);
          ParamByName('P_DEP').Value:= cdsTempSource.fieldbyname('DEPARTMENT_CODE').asinteger;
          CreateParam(ftString,'P_A',ptInput);
          ParamByName('P_A').Value:='A';
          CreateParam(ftInteger,'P_2',ptInput);
          ParamByName('P_2').Value:= 2;
          CreateParam(ftInteger,'P_5',ptInput);
          ParamByName('P_5').Value:= 5;
        end;
      end;

      loaddata(cdsTemp,sql_);
      While not cdsTemp.Eof
      do begin

          if (olddepname <>cdsTemp.Fields[0].AsString)
          then begin
            inc(row);
            inc(row);
               MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(5)+inttostr(row)];
               MyRange.select;
               MyRange.Merge;
               MyRange.HorizontalAlignment := 3;
               MyRange.Font.Bold := True;

            V.Cells[row, 1 ].NumberFormat := StrFormat;
            V.Cells[row, 1 ].Value := cdsTemp.Fields[0].AsString;
          end;
          olddepname :=cdsTemp.Fields[0].AsString;

//          inc(row);
          inc(row);
          i := 1;
          For col:=1 To 8
          Do Begin

              case cdsTemp.Fields[col].DataType Of
                ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
                ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
                ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
              end;
              V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
              inc(i);
         end;


//        inc(row);
//        V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('fio').asstring;
//        V.Cells[row, 4 ].Value := cdsTemp.fieldbyname('stavka').asstring;
//        V.Cells[row, 5 ].Value := cdsTemp.fieldbyname('zarpl').asstring;
//        total_sum2:= total_sum2+  cdsTemp.fieldbyname('zarpl').Asfloat;
//        total_count2:=  total_count2   +  cdsTemp.fieldbyname('float_stavka').Asfloat;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;

{
    inc(row);
    inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Всего по филиалу';

      sum2_:=inttostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count2);
      V.Cells[row+1,4].NumberFormat := NumFormat;
      V.Cells[row+1,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count-total_count2);
      if (total_count-total_count2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;


      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum2);
      V.Cells[row+1,6].NumberFormat := NumFormat;
      V.Cells[row+1,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum-total_sum2);
      if (total_sum-total_sum2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;
}
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Главный бухгалтер';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Директор  Департамента по работе';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'с персоналом';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Председатель Правления';
{
  inc(row);
      sum2_:=inttostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Всего по штату';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Фонд оплаты труда';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';
}
  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'СВЕДЕНИЯ О СОТРУДНИКАХ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  V.Cells.Select;
  V.Columns.AutoFit;
  V.Visible := True; //так быстрее

 FINALLY
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;
//

end;

procedure TBOKForm.cdsOKStatAfterPost(DataSet: TDataSet);
begin
 if ((HeadBranch_ ='09004') or ((HeadBranch_ ='00394'))) and (copy(lbfilial.caption,1,5)<>'(EDB)')
 then begin
            ExecSQL('ROLLBACK');
            TCLientDataSet(DataSet).UndoLastChange(True);
    showmessage(lbfilial.caption);
            Abort;
 end else begin

      Try
        SaveData(DataSet);
        ExecSQL('COMMIT');
        DataSet.Refresh;
      Except
        on E: Exception do
          Begin
            ExecSQL('ROLLBACK');
            TCLientDataSet(DataSet).UndoLastChange(True);
            ShowMessage('Ошибка при сохранении.'+#13+E.Message);
            Abort;
          End;
      End;

 end;
       
end;

procedure TBOKForm.dbedIronMaidenStagChange(Sender: TObject);
begin
  if (cdsokpersonal.fieldbyname('gender_code').asstring='1')
  and (dbedIronMaidenStag.Text<>'')
  then begin
    ShowMessage('"Нельзя ввести "'+Label191stag.caption+'" - вы ввели пол Мужской"');
  end;

end;

procedure TBOKForm.BitBtn163Click(Sender: TObject);
begin
  execsqlpar('update ok_personal set PRICH_ID=null, NAME_PR=null where branhc=:p_1 and personal_code=:p_2',
    cdsOKPeriod.fieldbyname('branch').asstring, cdsOKPeriod.fieldbyname('personal_code').asstring
  );
  if not(cdsOKPeriod.state=dsedit)
  then cdsOKPeriod.edit;

  cdsOKPeriod.fieldbyname('cod_type_prn').asstring:='';
  cdsOKPeriod.fieldbyname('cod_pr_off').asstring:='';
  cdsOKPeriod.fieldbyname('date_pr_off').asstring:='';
  cdsOKPeriod.fieldbyname('num_pr_off').asstring:='';
  cdsOKPeriod.fieldbyname('pr_off').asstring:='';


end;

procedure TBOKForm.BitBtn189Click(Sender: TObject);
begin
//
// (определяется уровень- район,обл,р-ка)
// 1) у кого должность неактивна или отсутствует  в спр-ке
// 2) у кого отдел неактивен или отсутствует  в спр-ке
// 3) у кого специализация неактивна или отсутствует  в спр-ке
// 4) у кого должность + отдел + специализация не соответствует штату
// 5) в штатном найдены неактивные(отсутствующие) должность или отдел или специализация

end;

procedure TBOKForm.BitBtn190Click(Sender: TObject);
var sql_,sql_2 : string;
  cdsOKTEMP1  : TClientDataSet;
  cnt_ : integer;
begin

  memotest.LineS.Clear;
  MemoTest.lines.add(datetostr(now)+' '+TimeToStr(Time));
  application.processmessages;
  cdsOKTEMP1:=tclientdataset.Create(Self);


//
// (определяется уровень- район,обл,р-ка)
//      BossLevel := '1'; Республика
//      BossLevel := '2'; FiltrLevel:= '2';      FiltrLevelName:='Область';
//      BossLevel := '3'; FiltrLevel:='3';      FiltrLevelName:='Район';

// 1) у кого должность неактивна или отсутствует  в спр-ке
// 2) у кого отдел неактивен или отсутствует  в спр-ке
// 3) у кого специализация неактивна или отсутствует  в спр-ке
// 4) у кого должность + отдел + специализация не соответствует штату
      MemoTest.lines.add('Сотрудники');

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := '2';
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := '5';

          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
          CreateParam(ftString,'p_5' ,ptInput);
          ParamByName('p_5').Value := BossLevel;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := 'A';
//          CreateParam(ftString,'p_7' ,ptInput);
  //        ParamByName('p_7').Value := BossLevel;
          CreateParam(ftString,'p_8' ,ptInput);
          ParamByName('p_8').Value := 'A';

          CreateParam(ftString,'p_9' ,ptInput);
          ParamByName('p_9').Value := branch;

          CreateParam(ftString,'p_10' ,ptInput);
          ParamByName('p_10').Value := 'A';
          CreateParam(ftString,'p_11' ,ptInput);
          ParamByName('p_11').Value := BossLevel;
          CreateParam(ftString,'p_12' ,ptInput);
          ParamByName('p_12').Value := 'A';
//          CreateParam(ftString,'p_13' ,ptInput);
  //        ParamByName('p_13').Value := BossLevel;
          CreateParam(ftString,'p_14' ,ptInput);
          ParamByName('p_14').Value := 'A';
      end;

{      sql_ := 'select * from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_4 and LEVEL_DEPARTMENT_CODE=:p_5)'+
              ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_6 and LEVEL_DEPARTMENT_CODE=:p_7)'+
              ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_8)'+
              ' or (department_code,post_code,special_code) not in (select department_code,post_code,special_code from ok_stat where branch=:p_9) '+
              ' or (department_code,post_code,special_code) in (select department_code,post_code,special_code from ok_stat where branch=:p_9 '+
                    ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_10 and LEVEL_DEPARTMENT_CODE=:p_11)'+
                         ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_12 and LEVEL_DEPARTMENT_CODE=:p_13)'+
                         ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_14)'+
                         ')'+
              ')) order by tabno';
}      sql_ := 'select * from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_4 and LEVEL_DEPARTMENT_CODE=:p_5)'+
              ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_6 )'+
              ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_8)'+
              ' or (department_code,post_code,special_code) not in (select department_code,post_code,special_code from ok_stat where branch=:p_9) '+
              ' or (department_code,post_code,special_code) in (select department_code,post_code,special_code from ok_stat where branch=:p_9 '+
                    ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_10 and LEVEL_DEPARTMENT_CODE=:p_11)'+
                         ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_12 )'+
                         ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_14)'+
                         ')'+
              ')) order by tabno';
      LoadData(cdsTempSource,sql_, True);

      While not cdsTempSource.Eof do
      Begin
        MemoTest.lines.add('');
        MemoTest.lines.add(' Таб.номер:'+cdsTempSource.fieldbyname('tabno').asstring+
          ' - Фамилия: '+cdsTempSource.fieldbyname('family').asstring);
//////////////////////////////////////////////////////
// отдел
        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_4 and LEVEL_DEPARTMENT_CODE=:p_5)'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5','A',bosslevel
        );

        if cnt_>0 then begin
          MemoTest.lines.add('Проверьте Отдел:'+cdsTempSource.fieldbyname('department_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_DEPARTMENTNAME(:p_1) from dual',cdsTempSource.fieldbyname('department_code').asstring));
        end;
//////////////////////////////////////////////////////
// должность
{        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_4 and LEVEL_DEPARTMENT_CODE=:p_5)'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5','A',bosslevel
        );
}        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_4  )'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5','A'
        );

        if cnt_>0 then begin
          MemoTest.lines.add('Проверьте Должность:'+cdsTempSource.fieldbyname('post_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_POSTNAME(:p_1) from dual',cdsTempSource.fieldbyname('post_code').asstring));
        end;
//////////////////////////////////////////////////////
// специализация
        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_4)'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5','A'
        );

        if cnt_>0 then begin
          MemoTest.lines.add('Проверьте Специализацию:'+cdsTempSource.fieldbyname('special_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_SPECIALNAME(:p_1) from dual',cdsTempSource.fieldbyname('special_code').asstring));
        end;
//////////////////////////////////////////////////////
// Нет в штатном расписании
        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and ( (department_code,post_code,special_code) not in (select department_code,post_code,special_code from ok_stat where branch=:p_4) '+
             ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5',branch
        );

        if cnt_>0 then begin
          MemoTest.lines.add('Нет в штатном расписании:');
          MemoTest.lines.add('Отдел:'+cdsTempSource.fieldbyname('department_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_DEPARTMENTNAME(:p_1) from dual',cdsTempSource.fieldbyname('department_code').asstring));
          MemoTest.lines.add('Должность:'+cdsTempSource.fieldbyname('post_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_POSTNAME(:p_1) from dual',cdsTempSource.fieldbyname('post_code').asstring));
          MemoTest.lines.add('Специализация:'+cdsTempSource.fieldbyname('special_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_SPECIALNAME(:p_1) from dual',cdsTempSource.fieldbyname('special_code').asstring));
        end;
//////////////////////////////////////////////////////
{        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (department_code,post_code,special_code) in (select department_code,post_code,special_code from ok_stat where branch=:p_4 '+
                    ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_5 and LEVEL_DEPARTMENT_CODE=:p_6)'+
                         ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_7 and LEVEL_DEPARTMENT_CODE=:p_8)'+
                         ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_9)'+
                         ')'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5',branch,'A',bosslevel,'A',bosslevel,'A'
        );
}        sql_2:='select count(tabno) from ok_personal where branch=:p_1 and status_code in (:p_2,:p_3)'+
        ' and (department_code,post_code,special_code) in (select department_code,post_code,special_code from ok_stat where branch=:p_4 '+
                    ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_5 and LEVEL_DEPARTMENT_CODE=:p_6)'+
                         ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_7)'+
                         ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_8)'+
                         ')'+
              ')';
        cnt_:= getsqlresultpar(sql_2, branch,'2','5',branch,'A',bosslevel,'A','A'
        );

        if cnt_>0 then begin
          MemoTest.lines.add('В штатном расписании указаны неактивный Отдел или Должность или Специализация');
          MemoTest.lines.add('Отдел:'+cdsTempSource.fieldbyname('department_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_DEPARTMENTNAME(:p_1) from dual',cdsTempSource.fieldbyname('department_code').asstring));
          MemoTest.lines.add('Должность:'+cdsTempSource.fieldbyname('post_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_POSTNAME(:p_1) from dual',cdsTempSource.fieldbyname('post_code').asstring));
          MemoTest.lines.add('Специализация:'+cdsTempSource.fieldbyname('special_code').asstring+
          ' - '+getsqlresultpar('select ok_service.GET_SPECIALNAME(:p_1) from dual',cdsTempSource.fieldbyname('special_code').asstring));
        end;
//////////////////////////////////////////////////////

        cdsTempSource.next;
      End;

      if cdsTempSource.recordcount=0
      then begin
        MemoTest.lines.add('OK');
      end;


// 5) в штатном найдены неактивные(отсутствующие) должность или отдел или специализация
      MemoTest.lines.add('');
      MemoTest.lines.add('Штатное расписание');

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := BossLevel;
          CreateParam(ftString,'p_4' ,ptInput);
          ParamByName('p_4').Value := 'A';
//          CreateParam(ftString,'p_5' ,ptInput);
  //        ParamByName('p_5').Value := BossLevel;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := 'A';
      end;

{      sql_ := 'select * from ok_stat where branch=:p_1 '+
        ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_2 and LEVEL_DEPARTMENT_CODE=:p_3)'+
              ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_4 and LEVEL_DEPARTMENT_CODE=:p_5)'+
              ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_6)'+
              ') order by department_code';
}      sql_ := 'select * from ok_stat where branch=:p_1 '+
        ' and (department_code not in (select department_code from ss_ok_department where STATE_NOTES=:p_2 and LEVEL_DEPARTMENT_CODE=:p_3)'+
              ' or post_code not in (select post_code from ss_ok_post where STATE_NOTES=:p_4  )'+
              ' or special_code not in (select special_code from ss_ok_special where STATE_NOTES=:p_6)'+
              ') order by department_code';

      LoadData(cdsTempSource,sql_, True);

      While not cdsTempSource.Eof do
      Begin
        MemoTest.lines.add('Неверные Отдел Код='+cdsTempSource.fieldbyname('department_code').asstring+' , Должность Код='+cdsTempSource.fieldbyname('post_code').asstring+' ,  Специализация Код='+cdsTempSource.fieldbyname('special_code').asstring);
        cdsTempSource.next;
      End;

      if cdsTempSource.recordcount=0
      then begin
        MemoTest.lines.add('OK');
      end;

  cdsOKTEMP1.close;
  MemoTest.lines.add(datetostr(now)+' '+TimeToStr(Time));
  MemoTest.lines.SaveToFile('C:\NCI Bank\OK\Temp\err_stat.txt');


        try
          WinExec('notepad C:\NCI Bank\OK\Temp\err_stat.txt', SW_MAXIMIZE);
        except
          showmessage('Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_stat.txt"');
        end;

end;

procedure TBOKForm.BitBtn191Click(Sender: TObject);
var
  MyRange: OLEVariant;
 Save_Cursor:TCursor;
 V: Variant;
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname,oldpost: String;
  total_count,
  total_sum,total_sum2,total_count2:double;
begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;

  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Лавозим номи';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Штат бирлиги';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Мехнатга хак тулаш разряди';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Лавозим маоши';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Ойлик иш хаки';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
{
  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'отделов,';
  inc(i);
  V.Cells[row, i ].Value := 'Разряд';
  inc(i);
  V.Cells[row, i ].Value := 'Коэффициент';
  inc(i);
  V.Cells[row, i ].Value := 'рабочих';
  inc(i);
  V.Cells[row, i ].Value := 'должностного';
  inc(i);
  V.Cells[row, i ].Value := 'за';

  inc(row);
  i:=1;
  V.Cells[row, i ].Value := 'должностей';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := ' ';
  inc(i);
  V.Cells[row, i ].Value := 'мест';
  inc(i);
  V.Cells[row, i ].Value := 'оклада';
  inc(i);
  V.Cells[row, i ].Value := 'месяц';
}
  total_count:=0;
  total_count2:=0;
  total_sum:=0;
  total_sum2:=0;

  olddepname:='x';
  oldpost:='x';
  While not cdsTempSource.Eof
  do begin
    if (headbranch_='09006')
    then begin
        sql_:='select '+
           ' c.post_name field1 ,nvl(quantity_post,0), d.category_name field2,'+
           ' nvl(d.SALARY,0), round(nvl(quantity_post,0)*nvl(d.SALARY,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' nvl(round(to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''999.00'')*nvl(d.SALARY,0),2),0) zarpl, '+
           ' nvl(to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''999.00''),0) float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp, ss_ok_post_category f'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
           ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.branch=okp.branch'+
           ' and a.department_code=okp.department_code'+
           ' and a.post_code=okp.post_code'+
           ' and a.special_code=okp.special_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
       ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
       ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
        end;
    end else begin
        sql_:='select '+
           ' c.post_name field1 ,nvl(quantity_post,0), d.category_name field2,'+
           ' nvl(d.SALARY,0), round(nvl(quantity_post,0)*nvl(d.SALARY,0),2) field5,'+
           ' b.department_name,FAMILY||'' ''||FIRST_NAME||'' ''||nvl(PATRONYMIC,'' '') fio,'+
           ' ok_service.GET_STAVKA(okp.branch,okp.personal_code) stavka,'+
           ' nvl(round(to_number(nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''999.00'')*nvl(d.SALARY,0),2),0) zarpl, '+
           ' nvl(to_number( nvl(ok_service.GET_STAVKA(okp.branch,okp.personal_code),0),''999.00''),0) float_stavka '+
           ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ok_personal okp'+
           ' where okp.branch=:p_1'+  // '+''''+curBranch +''''+
           ' and a.department_code=:p_2'+ // cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
           ' and a.department_code=b.department_code'+
           ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
           ' and b.state_notes=:p_3'+ //''A'' '+
           ' and a.post_code=c.post_code'+
           ' and a.branch=okp.branch'+
           ' and a.department_code=okp.department_code'+
           ' and a.post_code=okp.post_code'+
           ' and a.special_code=okp.special_code'+
           ' and okp.status_code in (:p_4,:p_5)'+ //(2,5)'+
           ' and c.category_code=d.category_code (+)'+
           ' order by d.category_code';
        cdsTemp.close;
        with cdsTemp.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := curBranch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring;
            CreateParam(ftString,'p_3' ,ptInput);
            ParamByName('p_3').Value := 'A';
            CreateParam(ftInteger,'p_4' ,ptInput);
            ParamByName('p_4').Value := 2;
            CreateParam(ftInteger,'p_5' ,ptInput);
            ParamByName('p_5').Value := 5;
        end;
      end;
      loaddata(cdsTemp,sql_);

      While not cdsTemp.Eof
      do begin

          if (olddepname <>cdsTemp.Fieldbyname('department_name').AsString)
          then begin
            inc(row);
            inc(row);
            V.Cells[row, 1 ].NumberFormat := StrFormat;
            MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(5)+inttostr(row)];
            MyRange.Merge;
            MyRange.Font.Bold := True;
            V.Cells[row, 1 ].Value := cdsTemp.Fieldbyname('department_name').AsString;
          end;
          olddepname :=cdsTemp.Fieldbyname('department_name').AsString;

         if (oldpost <>cdsTemp.Fields[0].AsString)
         then begin
          inc(row);
          inc(row);
          i := 1;
          For col:=0 To 4
          Do Begin

              case cdsTemp.Fields[col].DataType Of
                ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
                ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
                ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
              end;
              V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);
              inc(i);
          if col=1
          then total_count:= total_count+ cdsTemp.Fields[col].Asfloat;
          if col= 4
          then begin
            total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
          end;
         end;

         oldpost :=cdsTemp.Fields[0].AsString;

        End;

        inc(row);
        V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('fio').asstring;
        V.Cells[row, 3 ].Value := cdsTemp.fieldbyname('stavka').asstring;
        V.Cells[row, 4 ].Value := cdsTemp.fieldbyname('zarpl').asstring;
        total_sum2:= total_sum2+  cdsTemp.fieldbyname('zarpl').Asfloat;
        total_count2:=  total_count2   +  cdsTemp.fieldbyname('float_stavka').Asfloat;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


    inc(row);
    inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Жами филиали буйича'; // Всего по филиалу

      sum2_:= floattostr(total_count);
      V.Cells[row,4].NumberFormat := NumFormat;
      V.Cells[row,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count2);
      V.Cells[row+1,4].NumberFormat := NumFormat;
      V.Cells[row+1,4].Value:= trim(sum2_);

      sum2_:=floattostr(total_count-total_count2);
      if (total_count-total_count2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;


      sum2_:=floattostr(total_sum);
      V.Cells[row,6].NumberFormat := NumFormat;
      V.Cells[row,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum2);
      V.Cells[row+1,6].NumberFormat := NumFormat;
      V.Cells[row+1,6].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum-total_sum2);
      if (total_sum-total_sum2)<>0
      then begin
        V.Cells[row+2,6].NumberFormat := NumFormat;
        V.Cells[row+2,6].Value:= trim(sum2_);
      end;

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' '; // Главный бухгалтер
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Банкни бизнес ва стратегик ривожлантириш'; // Директор  Департамента по работе
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'департаменти директори в.б.'; // с персоналом

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Бошкарув Раиси уринбосари'; // Председатель Правления

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'ЖАМИ'; // Всего по штату


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Иш хаки фонди'; // Фонд оплаты труда

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'ШТАТ ЖАДВАЛИ';

  inc(row);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := '  '+bankdate; // по состоянию на

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  V.Cells.Select;
  V.Columns.AutoFit;

 FINALLY
   V.Visible := True; //так быстрее
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;

end;

procedure TBOKForm.BitBtn192Click(Sender: TObject);
var
 Save_Cursor:TCursor;
 V: Variant; // ,Range
 i, col,row:integer; // ,nn
 sql_,sql2_,NumFormat,DateFormat,StrFormat,sum2_,olddepname: String;
  total_count,            total_count_DEP,            total_sum_DEP,
  total_sum:double;
  MyRange:olevariant;

begin

 Save_Cursor := Screen.Cursor;
 Screen.Cursor := crHourGlass;    { Show hourglass cursor }

 TRY
    { Do some lengthy operation }
  V := CreateOleObject('Excel.Application');
  V.Workbooks.Add;


  sql2_ := '  select level, b.department_id id, b.DEPARTMENT_CODE ,'+
        ' b.department_name,  b.department_type_code,'+
        ' b.high_dep_code, b.level_department_code, b.department_num'+
        ' from ss_ok_department b'+
        ' where b.DEPARTMENT_CODE in (select distinct DEPARTMENT_CODE from ok_stat'+
            ' where branch=:p_1)'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
        ' and b.state_notes=:p_2' + //''A'' '+
        ' connect by b.high_dep_code = prior b.department_code'+
        ' start with b.high_dep_code is null';

      cdsTempSource.close;
      with cdsTempSource.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := 'A';
      end;
  loaddata(cdsTempSource,sql2_);
  row:=1;
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);
  inc(row);



  StrFormat  := '@';
  try
//    V.Cells[row,3].NumberFormat := '00.0';
//    NumFormat := '# ##0.00_р_.';

//    V.Cells[7,2].
    DateFormat := 'dd.mm.yyyy';

  except
//    NumFormat := '# ##0,00_р_.';

//    V.Cells[7,2].
    DateFormat := 'ДД.ММ.ГГГГ';

  end;

//  nn:=cdsTempSource.FieldCount-1;
  i:=1;
  // формирование шапки
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Лавозим номи';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Штат бирлиги';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Мехнатга хак тулаш разряди';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Лавозим маоши';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;
  inc(i);
  V.Cells[row, i ].WrapText := True;
  V.Cells[row, i ].Value := 'Ойлик иш хаки';
  V.Cells[row, i ].VerticalAlignment := 2;
  V.Cells[row, i ].HorizontalAlignment := 3;
  V.Cells[row, i ].Font.Bold := True;


  total_count:=0;
  total_sum:=0;

  olddepname:='x';
            total_count_DEP:=0;
            total_sum_DEP:=0;

  While not cdsTempSource.Eof
  do begin
    if (headbranch_='09006')
    then begin
      sql_:='select '+
       ' c.post_name||'' "''||e.special_name||''"'' field1 , quantity_post, d.category_name field2,'+
       ' d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ss_ok_special e, ss_ok_post_category f'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and a.post_code=f.post_code'+
           ' and d.category_code=f.category_code'+
       ' and f.MFO_CATEGORY_TYPE_CODE=:p_6'+
       ' and a.special_code=e.special_code'+
       ' order by d.category_code';
      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
          CreateParam(ftString,'p_6' ,ptInput);
          ParamByName('p_6').Value := MFO_CATEGORY_TYPE_CODE;
      end;

    end else begin

      sql_:='select '+
       ' c.post_name||'' "''||e.special_name||''"'' field1 , quantity_post, d.category_name field2,'+
       ' d.salary, round(nvl(quantity_post,0)*nvl(d.salary,0),2) field5,'+
       ' b.department_name'+
       ' from ok_stat a, ss_ok_department b, ss_ok_post c, ss_ok_category d, ss_ok_special e'+
       ' where a.branch=:p_1'+ //''''+curBranch +''''+
       ' and a.department_code=:p_2'+ //cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring+
       ' and a.department_code=b.department_code'+
        ' and b.DEPARTMENT_CODE NOT in (select DEPARTMENT_CODE from ss_ok_stat_over)'+
       ' and b.state_notes=:p_3'+ //''A'' '+
       ' and a.post_code=c.post_code'+
       ' and c.category_code=d.category_code (+)'+
       ' and a.special_code=e.special_code'+
       ' order by d.category_code';
      cdsTemp.close;
      with cdsTemp.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := curBranch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := cdsTempSource.fieldbyname('DEPARTMENT_CODE').asstring ;
          CreateParam(ftString,'p_3' ,ptInput);
          ParamByName('p_3').Value := 'A';
      end;
    end;
    loaddata(cdsTemp,sql_);
    While not cdsTemp.Eof
    do begin

        if (olddepname <>cdsTemp.fieldbyname('department_name').AsString)
        then begin
          //inc(row);
          if olddepname <>'x'
          then begin
            inc(row);
            V.Cells[row, 1 ].Value:='Жами';
            V.Cells[row, 2 ].NumberFormat := StrFormat;
            V.Cells[row, 2 ].Value := floattostr(total_count_DEP);
            V.Cells[row, 5 ].NumberFormat := StrFormat;
            V.Cells[row, 5 ].Value := floattostr(total_sum_DEP);
            total_count_DEP:=0;
            total_sum_DEP:=0;
          end;
          inc(row);
          V.Cells[row, 1 ].NumberFormat := StrFormat;
            MyRange:= V.Range[numto(1)+inttostr(row)+':'+numto(5)+inttostr(row)];
            MyRange.Merge;
            MyRange.Font.Bold := True;
          V.Cells[row, 1 ].Value := cdsTemp.fieldbyname('department_name').AsString;
        end;
        olddepname :=cdsTemp.fieldbyname('department_name').AsString;

        i := 1;
        inc(row);
        For col:=0 To 4
        Do Begin
            case cdsTemp.Fields[col].DataType Of
              ftString :     V.Cells[row, i ].NumberFormat := StrFormat;
              ftFloat  :     V.Cells[row, i ].NumberFormat := NumFormat;
              ftDateTime:    V.Cells[row, i ].NumberFormat := StrFormat;
            end;
            V.Cells[row, i ].Value := Trim(cdsTemp.Fields[col].AsString);

            inc(i);
            if col=1
            then begin
              total_count:= total_count+ cdsTemp.Fields[col].Asfloat;
              total_count_DEP:=total_count_DEP+ cdsTemp.Fields[col].Asfloat;
            end;

            if col= 4
            then begin
              total_sum:= total_sum+   cdsTemp.Fields[col].Asfloat;
              total_sum_DEP:=total_sum_DEP+ cdsTemp.Fields[col].Asfloat;
            end;

        End;
     V.Range['A'+inttostr(row)+':'+'E'+inttostr(row)].Select;
     V.Columns.AutoFit;

        cdsTemp.Next;
     end;
     cdsTempSource.Next;

     Application.ProcessMessages;

  end;


            inc(row);
            V.Cells[row, 1 ].Value:='Жами';
            V.Cells[row, 2 ].NumberFormat := StrFormat;
            V.Cells[row, 2 ].Value := floattostr(total_count_DEP);
            V.Cells[row, 5 ].NumberFormat := StrFormat;
            V.Cells[row, 5 ].Value := floattostr(total_sum_DEP);
//            total_count_DEP:=0;
//            total_sum_DEP:=0;

      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Жами филиали буйича';

      sum2_:=floattostr(total_count);
      V.Cells[row,2].NumberFormat := NumFormat;
      V.Cells[row,2].Value:= trim(sum2_);

      sum2_:=floattostr(total_sum);
      V.Cells[row,5].NumberFormat := NumFormat;
      V.Cells[row,5].Value:= trim(sum2_);

      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';
      inc(row);
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'Банкни бизнес ва стратегик ривожлантириш';
      inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := 'департаменти директори в.б.';

  row:=1;
  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := 'Бошкарув Раиси уринбосари';

  inc(row);
      sum2_:=floattostr(total_count);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);

      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'ЖАМИ';


  inc(row);
      sum2_:=floattostr(total_sum);
      V.Cells[row,3].NumberFormat := NumFormat;
      V.Cells[row,3].Value:= trim(sum2_);
      V.Cells[row, 2 ].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := 'Иш хаки фонди';

  inc(row);
      V.Cells[row, 2].NumberFormat := StrFormat;
      V.Cells[row, 2 ].Value := ' ';

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
      V.Cells[row, 5 ].NumberFormat := StrFormat;
      V.Cells[row, 5 ].Value := bankdate;
  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';

  inc(row);
//      V.Cells[row, 2 ].NumberFormat := StrFormat;
//      V.Cells[row, 2 ].Value := 'Штатное расписание';

  inc(row);
//      V.Cells[row, 2 ].NumberFormat := StrFormat;
//      V.Cells[row, 2 ].Value := ' по состоянию на '+bankdate;

  inc(row);
      V.Cells[row, 1 ].NumberFormat := StrFormat;
      V.Cells[row, 1 ].Value := ' ';


//  V.Cells.Select;
//  V.Columns.AutoFit;

 FINALLY
   V.Visible := True; //так быстрее
   Screen.Cursor := Save_Cursor;  { Always restore to normal }
 END;
 
end;

procedure TBOKForm.Button20Click(Sender: TObject);
begin
 Obiektivka23('4','pril_03_v3.doc');

end;

procedure TBOKForm.tbCopyPersClick(Sender: TObject);
begin
  LastPanel := 'TabCopyPers';
  pcmainok.ActivePage := TabCopyPers;
  actForm.Checked := True;

  actCopyPers.Checked     := False ;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=False;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;

end;

procedure TBOKForm.DBEdit31KeyPress(Sender: TObject; var Key: Char);
begin
      if (Key in ['a'..'z'])
      or (Key in ['A'..'Z'])
      then begin
        // хорошо
      end else begin
        key:=#0;
      end;


end;

procedure TBOKForm.DBEdit93KeyPress(Sender: TObject; var Key: Char);
begin
      if (Key in ['a'..'z'])
      or (Key in ['A'..'Z'])
      then begin
        // хорошо
      end else begin
        key:=#0;
      end;

end;

procedure TBOKForm.DBEdit213KeyPress(Sender: TObject; var Key: Char);
begin
      if (Key in ['a'..'z'])
      or (Key in ['A'..'Z'])
      then begin
        // хорошо
      end else begin
        key:=#0;
      end;

end;

procedure TBOKForm.BitBtn193Click(Sender: TObject);
begin
  cdsPensioner.insert;
  cdsPensioner.fieldbyname('status_code').asstring:='7';
  cdsPensioner.fieldbyname('id').asstring:=getsqlresult('select SEQ_OK_personal.Nextval from dual');
  cdsPensioner.fieldbyname('branch').asstring:=branch;
  cdsPensioner.fieldbyname('INS_DATE').asdatetime:=getsqlresult('select sysdate from dual');
  cdsPensioner.fieldbyname('EMP_CODE').asstring:=USERID;
  cdsPensioner.fieldbyname('personal_code').asstring:=getsqlresult('select max(personal_code)+1 from ok_personal');

  try
    if DBEdit218.canfocus then DBEdit218.setfocus;
  except
  end;

end;

procedure TBOKForm.BitBtn194Click(Sender: TObject);
var count_ : Integer;
begin
  count_:=getsqlresultpar('select count(*) from ok_personal where branch=:p_1 and tabno=:p_2',
       branch,DBEd_PensionerTabnoNEW.text);
  if count_ >0
  then begin
    showmessage('МФО '+branch+' Сотрудник с таб.номером '+DBEd_PensionerTabnoNEW.text+' уже существует.');
  end else begin
    cdsPensioner.post;
  end;

end;

procedure TBOKForm.BitBtn195Click(Sender: TObject);
var count_2:integer;
begin
  ExecSQLPAR('update ok_personal set status_code=:p_1 where branch=:p_2 and personal_code=:p_3'+
     ' and status_code=:p_4',
                            '4'
                            cdspensioner.FieldByName('branch').AsString,
                            cdspensioner.FieldByName('personal_code').AsString,
                            '7');
          execsql('commit');

      count_2:=getsqlresultpar('select count(*) from ok_personal where branch=:p_1 and tabno=:p_2'+
         ' and status_code=:p_3',
         branch,edPensionerTabno.text,'4');
      if (count_2>0)
      then begin
        showmessage('(364077) МФО '+branch+' Сотрудник с таб.номером '+edPensionerTabno.text+' теперь в состоянии "4-Уволен".');
      end else begin
        showmessage('(ошибка 36079) МФО '+branch+' Сотрудник с таб.номером '+edPensionerTabno.text+' не найден или не в состоянии "4-Уволен".');
      end;

  cdsPensioner.Close;
      with cdsPensioner.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := '7';
      end;
  loaddata(cdsPensioner,'select * from ok_personal where branch=:p_1 and status_code=:p_2');
   
end;

procedure TBOKForm.bbApplicationRotationClick(Sender: TObject);
var
  doljn_counter_  : integer; // ,checking_fail_
  ErMessage, doljn_educ_,post_name_,educ_name_,educ_name_pers_ : string;
      text_f : textfile;
  rukovod_,proverka_for_idiots: integer;
begin

  if cdsOKPersonal.FieldByName('status_code').AsString<>'2'
  then begin
    showmessage('(36264) Ротация-перемещение. Можно переместить только принятого сотрудника!');
    exit;
  end;

  if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='29')
  and ((HeadBranch_='09006') or (HeadBranch_='09004') or (HeadBranch_='09049'))  //  подтв. в ГО
  then begin
//если халк то
    showmessage('(23216)"Нельзя изменить- данные о сотруднике в состоянии отправлен в ГО."');
    exit;
  end else begin
    proverka_:=0;
// будет "отправлен в ГО"
//  требуется разрешение ГО
//
    proverka_for_idiots:=getsqlresultpar(
       ' select count(state_code)'+
       ' from okedb_appoints'+
       ' where branch=:p_1'+
       ' and personal_code=:p_2'+
       ' and department_code_new=:p_3'+
       ' and post_code_new=:p_4'+
       ' and rownum<:p_5',
       cdsOKPersonal.FieldByName('branch').AsString,
       cdsOKPersonal.FieldByName('personal_code').AsString
       cdsOKPersonal.FieldByName('department_code_new').AsString,
       cdsOKPersonal.FieldByName('post_code_new').AsString,
       '2'
       );
    if proverka_for_idiots=0
    then begin
      execsqlpar('update ok_personal set GOSUBMIT_CODE=null'+
         ' where branch=:p_1'+
         ' and personal_code=:p_2',
         cdsOKPersonal.FieldByName('branch').AsString,
         cdsOKPersonal.FieldByName('personal_code').AsString
                );
      execsql('commit');
    end;

    cdsOKPersonal.refresh;

    if (cdsOKPersonal.FieldByName('GOsubmit_code').AsString='22')
  //  and (cdsOKPersonal.FieldByName('GOsubmit_code').AsString<>'')
    then begin
      proverka_:=proverka_+1;
      showmessage('(23241)Нельзя отправить заявку, сотрудник в состоянии '+dblcbGOsubmit.text);
      exit;
    end;

    ErMessage:='';
    if not chbSvetaOnly.checked
    then begin
          proverka(2,1);

  /////////////////////////
  //  проверка в халке
  // если признак-научная степень-да то проверить ее  наличие, если -нет- то ее  не должно быть
  // если признак-научное звание -да то проверить его наличие, если -нет- то его не должно быть
  // образование должно соответствовать указанным в ok_education учебным заведениям
  /////////////////////////
    if  ( cdsOKPersonal.FieldByName('reg_type_code').AsString='2')
    and (   cdsOKPersonal.FieldByName('REG_DATE_END').AsString='')
    then begin
      ErMessage := ErMessage+' "укажите * Срок временной прописки" ';
      proverka_:=proverka_+1;
    end;

        if cdsOKPersonal.FieldByName('TRUD_SOGL').AsString=''
        then begin
          ErMessage := ErMessage+' "По трудовому соглашению" ';
          proverka_:=proverka_+1;
        end;

        if cdsOKPersonal.FieldByName('profmember').AsString=''
        then begin
          ErMessage := ErMessage+' "Профсоюз" ';
          proverka_:=proverka_+1;
        end;
        if cdsOKPersonal.FieldByName('telefon').AsString=''
        then begin
          ErMessage := ErMessage+' "Телефон(проставьте банковский если нет)" ';
          proverka_:=proverka_+1;
        end;
        try
          strtoint64(cdsOKPersonal.FieldByName('telefon').AsString);
        except
          ErMessage := ErMessage+' "Телефон '+cdsOKPersonal.FieldByName('telefon').AsString+' должен быть только из цифр для ИИАС" ';
          proverka_:=proverka_+1;
        end;

        if ( strtoint(copy(datetostr(now),7,4))-
              strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
              <45)    // в этом году сотруднику меньше 45 летия сотрудника проверять дату истечения
        or (( strtoint(copy(datetostr(now),7,4))-
              strtoint(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,7,4))
              =45) and (now< strtodate(copy(cdsokpersonal.FieldByName('BIRTHDAY').AsString,1,6)+copy(datetostr(now),7,4))  )
        )
        then begin
          if (cdsokpersonal.FieldByName('PASS_DATE_END').AsString='') // Паспорт Действителен До..
          then begin
            ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
            proverka_:=proverka_+1;
          end else begin
            if (cdsokpersonal.FieldByName('PASS_DATE_END').AsDateTime < now)
            then begin
              ErMessage := ErMessage+' "Паспорт Действителен До..'+cdsokpersonal.FieldByName('PASS_DATE_END').AsString+'" ';
              proverka_:=proverka_+1;
            end;
          end;
        end;

  end;

     //        \\
    // проверка \\
   //            \\
    try
      if chbSvetaOnly.checked
      then begin
//        showmessage('Только для Светы: проверка "CHECKW" отключена.');
        if proverka_=0
        then begin
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_BRANCH',curbranch);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_PERSONAL_CODE',cdsOKPersonal.fieldbyname('personal_code').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE_NEW',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE_NEW',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_USERID',UserId);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_VDATE',bankdate);
        execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_CHECK','1'); // check_=1 проверять вакансию
    //    execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','','');
        execSQL('begin OK_SERVICE.NEW_appoint; end;');
        ExecSQL('COMMIT');
        end else begin
          Showmessage('Исправьте все ошибки указанные в отчете.'+#13+'не меньше '+inttostr(proverka_));
        end;
      end else begin
        rukovod_ :=0;
        if cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                 '79',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
        if cdsOKPersonal.fieldbyname('POST_CODE').asstring<>''
        then rukovod_ := rukovod_ + getsqlresultpar('select count(ok_id) from SS_OK_NCI where NCI_ID=:p_1 and ok_id=:p_2',
                '79',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
        if (rukovod_=0)
        then begin
          // 25.02.2014 если новая должность НЕ руководящая, то не проверять фото и образование
        end else begin
        // наличие фото  \
          doljn_counter_ := getsqlresultpar('select count(*) from ok_photo where branch=:p_1 '+
            ' and personal_code=:p_2 and (priznak is null or priznak=:p_3)',
             curbranch, cdsOKPersonal.fieldbyname('personal_code').asstring,'1'
            );
          if doljn_counter_=0
          then begin
           ErMessage:=ErMessage+' отсутствует фото ';
           proverka_:=proverka_+1;
          end;

          // наличие образования
          doljn_counter_ := getsqlresultpar('select count(*) from ok_education where branch=:p_1 '+
            ' and personal_code=:p_2',
             curbranch, cdsOKPersonal.fieldbyname('personal_code').asstring
            );
          if doljn_counter_=0
          then begin
            ErMessage:=ErMessage+' отсутствует образование в доп.сведениях ';
            proverka_:=proverka_+1;
          end;

          if cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring=''
          then begin
            ErMessage:=ErMessage+' отсутствует * Образование Сотрудника ( Наименование ) на вкладке "Информация по сотруднику" ';
            proverka_:=proverka_+1;
          end else begin
            doljn_educ_ := getsqlresultpar('select nvl(Education_Title_CODE,0) from ss_ok_post where post_code=:p_1',
                cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring
              );
            if doljn_educ_<>'0'
            then begin
              if doljn_educ_<> cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring
              then begin
                post_name_:=getsqlresultpar('select post_name from ss_ok_post where post_code=:p_1',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
                educ_name_:=getsqlresultpar('select Education_Title_name from ss_ok_Education_Title where Education_Title_code=:p_1',
                    doljn_educ_
                  );
                educ_name_pers_:=getsqlresultpar('select Education_Title_name from ss_ok_Education_Title where Education_Title_code=:p_1',
                  cdsOKPersonal.fieldbyname('Education_Title_CODE').asstring
                  );
                ErMessage:=ErMessage+'для должности '+post_name_+' необходимо образование '+educ_name_+' а не '+educ_name_pers_;
                proverka_:=proverka_+1;
              end;
            end;
          end;
        end;
        /////////

        if ErMessage<>''
        then begin
          showmessage(ErMessage);
          proverka_:=proverka_+1;
      ////
          if 1=1
          then begin
            If not DirectoryExists('C:\NCI Bank\') Then ForceDirectories('C:\NCI Bank\');
            If not DirectoryExists('C:\NCI Bank\Ok\') Then ForceDirectories('C:\NCI Bank\Ok\');            If not DirectoryExists('C:\NCI Bank\Ok\Temp\') Then ForceDirectories('C:\NCI Bank\Ok\Temp\');
            try
              System.AssignFile(text_f,'C:\NCI Bank\OK\Temp\err_ok3.txt');
              System.Rewrite(text_f);

              Try
                System.Writeln(text_f,ErMessage);
              Finally
                System.CloseFile(text_f);
              End;
            except
              showmessage('Не удалось сохранить данные в файл "C:\NCI Bank\OK\Temp\err_ok3.txt"');              raise;
            end;

            try
              WinExec('notepad C:\NCI Bank\OK\Temp\err_ok3.txt', SW_MAXIMIZE);
            except
              showmessage('(23200)Не удалось открыть в блокноте "notepad C:\NCI Bank\OK\Temp\err_ok3.txt"');            end;
          end;
      ////


          ExecSQL('BEGIN ok_service.checkw;  END;');
        end else begin
          ExecSQL('BEGIN ok_service.checkw;  END;');
          if proverka_=0
          then begin
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_BRANCH',curbranch);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_PERSONAL_CODE',cdsOKPersonal.fieldbyname('personal_code').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE',cdsOKPersonal.fieldbyname('POST_CODE').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_DEPARTMENT_CODE_NEW',cdsOKPersonal.fieldbyname('DEPARTMENT_CODE_NEW').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_POST_CODE_NEW',cdsOKPersonal.fieldbyname('POST_CODE_NEW').asstring);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_USERID',UserId);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_VDATE',bankdate);
            execSQLpar('begin Param.SetParam(:p_1,:p_2); end;','P_CHECK','0'); // check_=0 НЕ проверять вакансию
            execSQL('begin OK_SERVICE.NEW_appoint; end;');
            ExecSQL('COMMIT');
          end else begin
            Showmessage('Исправьте все ошибки указанные в отчете.'+#13+'не меньше '+inttostr(proverka_));
          end;

        end;
      end;


    except
      on E: Exception do
      begin
        ExecSQL('rollback');

        n23click(sender);
        Showmessage('Исправьте все ошибки указанные в отчете.'+#13+e.Message);
      // не прошел проверку, выходит отчет об ошибках
        exit;

      end;
    end;




          cdsOKPersonalAfterScroll(nil);
  end; // если отправлен в го

      cdsokpersonal.Refresh;

end;

procedure TBOKForm.ToolButton27Click(Sender: TObject);
begin
  LastPanel := 'TabPensioner';
  pcmainok.ActivePage := TabPensioner;
  actForm.Checked := True;

  actCopyPers.Checked     := False ;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=False;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;

  cdsPensioner.Close;
      with cdsPensioner.Params
      do begin
          clear;
          CreateParam(ftString,'p_1' ,ptInput);
          ParamByName('p_1').Value := branch;
          CreateParam(ftString,'p_2' ,ptInput);
          ParamByName('p_2').Value := '7';
      end;
  loaddata(cdsPensioner,'select * from ok_personal where branch=:p_1 and status_code=:p_2');

end;

procedure TBOKForm.BitBtn129Click(Sender: TObject);
begin
  cdsPensioner.cancel;

end;

procedure TBOKForm.cdsPensionerAfterOpen(DataSet: TDataSet);
begin
    cdsPensioner.FieldByName('pass_date').EditMask := '!09/09/0099;1;_';

end;

procedure TBOKForm.BitBtn196Click(Sender: TObject);
var count_2  :integer; // count_, , personal_code_
begin

//    personal_code_ := getsqlresult('select max(personal_code)+1 from ok_personal');

//    count_:=getsqlresultpar('select count(*) from ok_personal where branch=:p_1 and tabno=:p_2',
  //       branch,edPensionerTabnoNEW.text);
{      exec sql par('insert into ok_personal (tabno,status_code,branch,INS_DATE,id,EMP_CODE,personal_code,'+
         ' FAMILY,FIRST_NAME,PATRONYMIC,GENDER_CODE,BIRTHDAY,REGION_ID,DISTR,NATIONALITY_CODE,FAMILY_STATUS_CODE,'+
         ' REG_TYPE_CODE,HOME_ADDRESS,HOME_ADDRESSFACT,PASS_SERIYA,PASS_NUM,PASS_DATE,PASS_REG,RECORD_BOOK_NUMBER,'+
         ' RECORD_BOOK_SERIES,TELEFON,PROFMEMBER,EDUCATION_TITLE_CODE,BIRTHPLACE,LEAVE_CODE,NPS_ID,INN,COD_DISTR_UVD,'+
         ' COD_DISTR_PRIM,COD_STR_BIRTH,COD_OBL_PRIM,COD_PLACE_BIRTH_PRIM,COD_SITIZENT,COD_STR_SITIZENT,COD_STR_LIVE,'+
         ' COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_DISTR_LIVE,COD_DISTR_LIVE_PRIM,CODE_NACI_PRIM,HOME_ADDRESSFACT_REGION_ID,'+
         ' HOME_ADDRESSFACT_DISTR,HOME_ADDRESS_REGION_ID,HOME_ADDRESS_DISTR,PASSPORT_TYPE_CODE,REGPLACE_CODE,'+
         ' PASS_DATE_END,LIVE_PLACE,BIRTHPLACE_POINT,MAIDEN_FAMILY,REG_DATE_END,TRUD_SOGL,MAIDENSTAG,'+
         ' FAMILY_LAT,FIRST_NAME_LAT,PATRONYMIC_LAT'+
         ') select :p_1,:p_2,branch,sysdate,SEQ_OK_personal.Nextval,:p_3,:p_4, '+
         ' FAMILY,FIRST_NAME,PATRONYMIC,GENDER_CODE,BIRTHDAY,REGION_ID,DISTR,NATIONALITY_CODE,FAMILY_STATUS_CODE,'+
         ' REG_TYPE_CODE,HOME_ADDRESS,HOME_ADDRESSFACT,PASS_SERIYA,PASS_NUM,PASS_DATE,PASS_REG,RECORD_BOOK_NUMBER,'+
         ' RECORD_BOOK_SERIES,TELEFON,PROFMEMBER,EDUCATION_TITLE_CODE,BIRTHPLACE,LEAVE_CODE,NPS_ID,INN,COD_DISTR_UVD,'+
         ' COD_DISTR_PRIM,COD_STR_BIRTH,COD_OBL_PRIM,COD_PLACE_BIRTH_PRIM,COD_SITIZENT,COD_STR_SITIZENT,COD_STR_LIVE,'+
         ' COD_OBL_LIVE,COD_OBL_LIVE_PRIM,COD_DISTR_LIVE,COD_DISTR_LIVE_PRIM,CODE_NACI_PRIM,HOME_ADDRESSFACT_REGION_ID,'+
         ' HOME_ADDRESSFACT_DISTR,HOME_ADDRESS_REGION_ID,HOME_ADDRESS_DISTR,PASSPORT_TYPE_CODE,REGPLACE_CODE,'+
         ' PASS_DATE_END,LIVE_PLACE,BIRTHPLACE_POINT,MAIDEN_FAMILY,REG_DATE_END,TRUD_SOGL,MAIDENSTAG,'+
         ' FAMILY_LAT,FIRST_NAME_LAT,PATRONYMIC_LAT'+
         ' from ok_personal '+
         ' where branch=:p_5 and tabno=:p_6 and status_code<>:p_7',
         edPensionerTabnoNEW.text,'7',USERID,inttostr(personal_code_),
         branch,edPensionerTabno.text,'7');
}

    count_2:=getsqlresultpar('select count(*) from ok_personal where branch=:p_1 and tabno=:p_2'+
         ' and status_code=:p_3',
         branch,edPensionerTabno.text,'4');

    if (count_2=0)
    then begin
        showmessage('(ошибка 36422) МФО '+branch+' Сотрудник с таб.номером '+edPensionerTabno.text+' не уволен или не найден.');
    end else begin

      execsqlpar('update ok_personal set status_code=:p_1 '+
         ' where branch=:p_2 and tabno=:p_3 and status_code=:p_4',
         '7', branch,edPensionerTabno.text,'4');
      execsql('commit');

      count_2:=getsqlresultpar('select count(*) from ok_personal where branch=:p_1 and tabno=:p_2'+
         ' and status_code=:p_3',
         branch,edPensionerTabno.text,'7');
      if (count_2>0)
      then begin
        showmessage('(36460) МФО '+branch+' Сотрудник с таб.номером '+edPensionerTabno.text+' теперь Пенсионер.');
      end else begin
        showmessage('(ошибка 36462) МФО '+branch+' Сотрудник с таб.номером '+edPensionerTabno.text+' не найден или не в состоянии 7-Пенсионер.');
      end;

    end;

    cdsPensioner.Close;
        with cdsPensioner.Params
        do begin
            clear;
            CreateParam(ftString,'p_1' ,ptInput);
            ParamByName('p_1').Value := branch;
            CreateParam(ftString,'p_2' ,ptInput);
            ParamByName('p_2').Value := '7';
        end;

  loaddata(cdsPensioner,'select * from ok_personal where branch=:p_1 and status_code=:p_2');

end;

procedure TBOKForm.bCancelClick(Sender: TObject);
begin
  bclear.click;
  TBTable.click;

end;

procedure TBOKForm.bClearClick(Sender: TObject);
begin
  MemoRotation1.clear;
  MemoRotation2.clear;
  SL1.Clear;
  SL2.Clear;
  SL_rotation.Clear;
  
end;

procedure TBOKForm.ToolButton26Click(Sender: TObject);
var d: tdata;
begin
//showmessage('(36517)не готово');
  LastPanel := 'TabRotation';
  pcmainok.ActivePage := TabRotation;
  actForm.Checked := True;

  actCopyPers.Checked     := False ;
  actTable.Checked   := False;
  actTabel.Checked     := False ;
  actKurs.Checked     := False ;
  actNew.Checked     := False;
  actRef.Checked     := False;
  actRef2.Checked     := False;
  actDetails.Checked := False;
  actReAccept.Checked  := False;
  cdsOKPersonal.ReadOnly:=False;
  OptionsPanel.Visible := False;
  ActDetailUndoExecute(nil);
  actiias.Checked := false;

  edOfficeAddressNowR.Text := bOKform.edOfficeAddress.Text;
  edOfficeNameR.Text := bOKform.edFILIAL.Text;

  SL1:= TStringList.Create;
  SL1.Clear;

  SL2:= TStringList.Create;
  SL2.Clear;

  SL_rotation:= TStringList.Create;
  SL_rotation.Clear;

  BOKForm.source.close;
  with BOKForm.source.Params
  do begin
      clear;
      CreateParam(ftString,'p_1' ,ptInput);
      ParamByName('p_1').Value := 'A';
  end;
  LoadData(Source,'select a.base_move_code id,'+
  ' lpad(to_char(a.base_move_code),3,'' '')||'') ''||a.base_move_name name '+
  ' from ss_ok_base_move a where'+
  ' a.state_notes=:p_1'); //''A'' ',True);

  CBBaseMoveR.clear;
  Source.first;
  while not Source.Eof do
  begin
      D := TData.Create;
      with D do
      begin
        Id := Source.FieldByName('id').AsString;
        Name := Source.FieldByName('name').AsString;
      end;
      CBBaseMoveR.Items.AddObject(Source.FieldByName('name').AsString, D);
//showmessage(Source.FieldByName('name').AsString);
      Source.Next;
  end;


end;

procedure TBOKForm.bbTabno1Click(Sender: TObject);
begin
  edtabno1.text:=cdsokpersonal.fieldbyname('tabno').asstring;
end;

procedure TBOKForm.bbTabno2Click(Sender: TObject);
begin
  edtabno2.text:=cdsokpersonal.fieldbyname('tabno').asstring;
end;

procedure TBOKForm.BitBtn200Click(Sender: TObject);
var line1_,line2_ : string;
 line1_r,line2_r : string;
begin
  if (edtabno1.text=edtabno2.text)
  or (edtabno1.text='')
  or (edtabno2.text='')
  then begin
    showmessage('Правильно введите пару табельных номеров.');
  end else begin
    memorotation1.lines.add(edtabno1.text+'>>'+edtabno2.text);


    line1_:=edtabno1.text+'/'+getsqlresultpar('select family||'' ''||first_name||'' ''||patronymic||''/''||'+
      'department_code||''/''||ok_service.GET_DEPARTMENTNAME(department_code)||''/''||'+
      'post_code||''/''||ok_service.GET_POSTNAME(post_code)||''/''||'+
      'special_code||''/''||ok_service.GET_SPECIALNAME(special_code)||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno1.text);

    line1_r:=edtabno1.text+'/'+getsqlresultpar('select personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno1.text);

    SL1.add(getsqlresultpar('select status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno1.text));

    line2_:=edtabno2.text+'/'+getsqlresultpar('select family||'' ''||first_name||'' ''||patronymic||''/''||'+
      'department_code||''/''||ok_service.GET_DEPARTMENTNAME(department_code)||''/''||'+
      'post_code||''/''||ok_service.GET_POSTNAME(post_code)||''/''||'+
      'special_code||''/''||ok_service.GET_SPECIALNAME(special_code)||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno2.text);

    line2_r:=edtabno2.text+'/'+getsqlresultpar('select personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno2.text);

    SL2.add(getsqlresultpar('select status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'' f1'+
      ' from ok_personal where branch=:p_1 and tabno=:p_2',
      branch,edtabno2.text));

    SL_rotation.add(line1_r+'>'+line2_r);
    MemoTestR.lines.add(line1_r+'>'+line2_r);
    memorotation2.lines.add(line1_+'>'+line2_);

  end;

end;

procedure TBOKForm.BitBtn197Click(Sender: TObject);
var ErMessage,ArticleCode, BaseMoveCode : string;
    test_line_, final_line_
   // PersonalCode_,STATUSCODE, Specialcode,PostCode, DepCode
    : string;
    tabno1, PersonalCode_1,STATUSCODE1, Specialcode1,  PostCode1, DepCode1: string;
    tabno2, PersonalCode_2,STATUSCODE2, Specialcode2,  PostCode2, DepCode2: string;
     line_ ,line_temp1_ ,line_temp2_ ,line_temp3_: string;
    n:integer;
 n2,i:integer;
const
  ERROR_NO = 'ORA-20000: ';
begin
  final_line_:=' ';
    SL1.sort;
    SL2.sort;
    ErMessage:=' ';
    FOR n2 := 0 TO SL1.Count - 1
    DO BEGIN
      if (SL1[n2]<>SL2[n2]) and (ErMessage=' ')
      then begin
        ErMessage:=ErMessage+'Несовпадение состояния,отдела,должности,специализации в списке перемещений(ротации)'+#10#13;
        for i:=0 to memorotation2.lines.count-1
        do begin
        ErMessage:=ErMessage+memorotation2.lines[i]+#10#13;
        end;
        ErMessage:=ErMessage+SL1[n2]+#10#13;
        ErMessage:=ErMessage+SL2[n2]+#10#13;
      end;
    END;

  try
    strtodate(medAppointmentDate.EditText);
  except
    ErMessage := ErMessage +'Дату перемещения'+#10#13;
  end;

  if edOfficeAddressNowR.Text = '' then
  begin
    ErMessage := ErMessage +'Адрес офиса'+#10#13;
  end;

  if edOfficeNameR.Text = '' then
  begin
    ErMessage := ErMessage +'Наименование офиса' +#10#13;
  end;

// проверка валидности Дата приказа/осн-я:
  try
    strtodate(medBasisDate.EditText);
  except
    ErMessage := ErMessage +'Дату приказа/основания'+#10#13;
  end;

  if strtodate(medBasisDate.EditText) > strtodate(medAppointmentDate.EditText)
  then begin
    ErMessage := ErMessage +'Дата перемещения должна быть больше или равна дате приказа/основания'+#10#13;
  end;

// проверка заполнения
//поля ввода   Номер приказа:
  if edBasisNum.Text = '' then
  begin
    ErMessage := ErMessage +'Номер приказа '+#10#13;
  end;

  if CBBaseMoveR.ItemIndex = -1 then
  begin
    ErMessage := ErMessage +'Основание перемещения'+#10#13;
  end;

    FOR n := 0 TO SL_rotation.Count - 1
    DO BEGIN // (36663) в цикле по таб.номеру назначается каждый сотрудник
      // разрезать и узнать код сотрудника,статус и кого на какую должность
      line_:= SL_rotation[n];
      test_line_:= 'line_='+line_ ;
      memotestr.lines.add(test_line_);
{
таб.номер / personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'''+
'>'+
таб.номер / personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'''+
}
// табно код статус отдел должность специализация из левой части
      line_temp1_ := line_;
//showmessage('line_='+line_+#10#13+'pos(''/'',line_temp1_)'+inttostr(pos('/',line_temp1_)));
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      tabno1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'tabno1='+tabno1+' pos(''/'',line_temp1_)-1='+inttostr(pos('/',line_temp1_)-1) ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      personalcode_1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'personalcode_1='+personalcode_1 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      STATUSCODE1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'STATUSCODE1='+STATUSCODE1 ;
      memotestr.lines.add(test_line_);

      if STATUSCODE1<>'2' then
      begin
        ErMessage := ErMessage +'Сотрудник Таб.номер '+tabno1+' должен быть в состоянии 2-Принят'+#10#13;
      end;

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      DepCode1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'DepCode1='+DepCode1 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      PostCode1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'PostCode1='+PostCode1 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      SpecialCode1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'SpecialCode1='+SpecialCode1 ;
      memotestr.lines.add(test_line_);

// табно код статус отдел должность специализация из правой части
      line_temp3_:= copy(line_,pos('>',line_)+1,length(line_)-pos('>',line_));

      line_temp1_ := line_temp3_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      tabno2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'tabno2='+tabno2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      personalcode_2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'personalcode_2='+personalcode_2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      STATUSCODE2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'STATUSCODE2='+STATUSCODE2 ;
      memotestr.lines.add(test_line_);

      if STATUSCODE2<>'2' then
      begin
        ErMessage := ErMessage +'Сотрудник Таб.номер '+tabno2+' должен быть в состоянии 2-Принят'+#10#13;
      end;

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      DepCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'DepCode2='+DepCode2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      PostCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'PostCode2='+PostCode2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      SpecialCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'SpecialCode2='+SpecialCode2 ;
      memotestr.lines.add(test_line_);

    END;

  if ErMessage <> ' '  then
  begin
    ShowMessage('Пожалуйста, укажите '+#10#13+ErMessage);
    exit;
  end;

  BaseMoveCode := TData(CBBaseMoveR.Items.Objects[CBBaseMoveR.ItemIndex]).Id;
  ArticleCode := '';

  try
    for n := 0 to SL_rotation.Count - 1
    DO BEGIN // (36645) в цикле по таб.номеру назначается каждый сотрудник
      line_:= SL_rotation[n];
MemoTestR.lines.add('(36822)line_='+line_);
      // разрезать и узнать код сотрудника,статус и кого на какую должность
//showmessage('разрезать и узнать код сотрудника,статус и кого на какую должность');
{
personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'''+
'>'+
personal_code||''/''||status_code||''/''||department_code||''/''||'+
      'post_code||''/''||special_code||''/'''+
}
// код и статус из левой части
      line_temp1_ := line_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      tabno1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'tabno1='+tabno1 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      personalcode_1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'personalcode_1='+personalcode_1 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      STATUSCODE1:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'STATUSCODE1='+STATUSCODE1 ;
      memotestr.lines.add(test_line_);

// отдел должность специализация из правой части
      line_temp3_:= copy(line_,pos('>',line_)+1,length(line_)-pos('>',line_));

      line_temp1_ := line_temp3_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      tabno2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'tabno2='+tabno2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      personalcode_2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'personalcode_2='+personalcode_2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      STATUSCODE2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'STATUSCODE2='+STATUSCODE2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      DepCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'DepCode2='+DepCode2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      PostCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'PostCode2='+PostCode2 ;
      memotestr.lines.add(test_line_);

      line_temp1_:=line_temp2_;
      line_temp2_:=copy(line_temp1_,pos('/',line_temp1_)+1, length(line_temp1_)-pos('/',line_temp1_));
      SpecialCode2:= copy(line_temp1_,1,pos('/',line_temp1_)-1);
      test_line_:=  'SpecialCode2='+SpecialCode2 ;
      memotestr.lines.add(test_line_);

      BOKForm.execSQL('begin param.ClearParam; end;');
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'OFFICE_NAME', edOfficeNameR.Text );      //
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'OFFICE_ADDRESS', edOfficeAddressNowR.Text );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'BRANCH',curBranch );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'IN_OFFICE_DATE', medAppointmentDate.EditText );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'BASE_MOVE_CODE', BaseMoveCode  );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'BASIS_DATE', medBasisDate.EditText );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'BASIS_NUM', edBasisNum.Text );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'ARTICLE_CODE', Articlecode );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'EMP_CODE', UserId );//
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'ROTATION', '1' );//

      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'PERSONAL_CODE', personalcode_1 );
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'DEPARTMENT_CODE', DepCode2 );
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'POST_CODE', PostCode2 );
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'SPECIAL_CODE', SpecialCode2 );
      BOKForm.execSQLpar('begin Param.SetParam(:p_1,:p_2); end;', 'STATUS_CODE', STATUSCODE1 );

      BOKForm.execSQL('begin OK_SERVICE.APPOINT_COLLEAGUE; end;');

                    BOKForm.source.close;
                    with BOKForm.source.Params
                    do begin
                        clear;
                        CreateParam(ftString,'p_1' ,ptInput);
                        ParamByName('p_1').Value := curBranch;
                        CreateParam(ftString,'p_2' ,ptInput);
                        ParamByName('p_2').Value := personalcode_1;
                    end;
  BOKForm.LoadData(BOKForm.Source,'SELECT family,first_name,patronymic,'+
                 ' ok_service.get_departmentname(department_code) department_show,'+
                 ' ok_service.get_postname(post_code) post_show,'+
                 ' ok_service.get_specialname(special_code) special_show'+
                     ' FROM ok_personal'+
                     ' WHERE branch=:p_1'+ //curBranch+
                     ' and personal_code=:p_2'); //+personalcode_,True);

      final_line_:= final_line_+
          BOKForm.Source.FieldByName('family').AsString +
          BOKForm.Source.FieldByName('first_name').AsString +
          BOKForm.Source.FieldByName('patronymic').AsString +
        ' >> '+  BOKForm.Source.FieldByName('department_show').AsString +
         BOKForm.Source.FieldByName('post_show').AsString +
          BOKForm.Source.FieldByName('special_show').AsString + #10#13
        ;


    END; // (36645) в цикле по таб.номеру назначается каждый сотрудник

    BOKForm.ExecSQL('COMMIT');
    if final_line_ <> ' '  then
    begin
      ShowMessage(final_line_);
    end;


  except
    on E: Exception do
    Begin
      BOKForm.ExecSQL('ROLLBACK');
      If Pos(ERROR_NO, E.Message) <> 0 Then
      Begin
        erMessage := Copy(E.Message, Pos(ERROR_NO, E.Message) + Length(ERROR_NO), Length(E.Message));
        erMessage := Copy(erMessage, 1, Pos(#10, erMessage) - 1);
        E.Message := StringReplace(E.Message, #13, '', [rfReplaceAll]);
        E.Message := StringReplace(E.Message, #10, #13#10, [rfReplaceAll]);
        ShowErrorBox(erMessage,E.Message,Self.Caption);
      End
      Else  ShowMessage(e.Message);
              exit;
    End;
  end;


  ErMessage := '';

  bCancel.click;
    if bokform.cdsOKPeriod.Active
    then begin
      bokform.cdsOKPeriod.refresh;
    end;

end;

procedure TBOKForm.BitBtn201Click(Sender: TObject);
var ErMessage : string;
 n,i:integer;
begin

  try
    strtodate(medAppointmentDate.EditText);
  except
    ErMessage := ErMessage +'Дату перемещения'+#10#13;
  end;

  if edOfficeAddressNowR.Text = '' then
  begin
    ErMessage := ErMessage +'Адрес офиса'+#10#13;
  end;

  if edOfficeNameR.Text = '' then
  begin
    ErMessage := ErMessage +'Наименование офиса' +#10#13;
  end;

// проверка валидности Дата приказа/осн-я:
  try
    strtodate(medBasisDate.EditText);
  except
    ErMessage := ErMessage +'Дату приказа/основания'+#10#13;
  end;

  if strtodate(medBasisDate.EditText) > strtodate(medAppointmentDate.EditText)
  then begin
    ErMessage := ErMessage +'Дата перемещения должна быть больше или равна дате приказа/основания'+#10#13;
  end;

// проверка заполнения
//поля ввода   Номер приказа:
  if edBasisNum.Text = '' then
  begin
    ErMessage := ErMessage +'Номер приказа '+#10#13;
  end;

  if CBBaseMoveR.ItemIndex = -1 then
  begin
    ErMessage := ErMessage +'Основание перемещения'+#10#13;
  end;

    SL1.sort;
    SL2.sort;
    ErMessage:=' ';
    FOR n := 0 TO SL1.Count - 1
    DO BEGIN
      if (SL1[n]<>SL2[n]) and (ErMessage=' ')
      then begin
        ErMessage:=ErMessage+'Несовпадение состояния,отдела,должности,специализации в списке перемещений(ротации)'+#10#13;
        for i:=0 to memorotation2.lines.count-1
        do begin
        ErMessage:=ErMessage+memorotation2.lines[i]+#10#13;
        end;
        ErMessage:=ErMessage+SL1[n]+#10#13;
        ErMessage:=ErMessage+SL2[n]+#10#13;
      end;
    END;

  if ErMessage=' '
  then begin
    showmessage('Нет ошибок.');
  end else begin
    showmessage(ErMessage);
  end;

end;

procedure TBOKForm.DBEdit230Change(Sender: TObject);
begin
// если есть вышестоящие отделы то все равно сделать одинаковым-
// т.к. если начали редактировать значит и полное наименование изменят
  if (cdsOKPeriod.state in dseditmodes)
  then begin
    cdsOKPeriod.fieldbyname('established_department').asstring:=cdsOKPeriod.fieldbyname('department').asstring;
  end;
end;

procedure TBOKForm.DBEdit42Change(Sender: TObject);
begin
//
  if (cdsOKrelation.fieldbyname('relation_deathday').asstring<>'')
  then begin
    if (cdsOKrelation.state in dseditmodes)
    then begin
      cdsOKrelation.fieldbyname('COD_STR_LIVE').asstring:='';
      cdsOKrelation.fieldbyname('COD_OBL_LIVE').asstring:='';
      cdsOKrelation.fieldbyname('COD_CITY').asstring:='';
      cdsOKrelation.fieldbyname('COD_STR_LIVE_PRIM').asstring:='';
      cdsOKrelation.fieldbyname('COD_OBL_live_PRIM').asstring:='';
      cdsOKrelation.fieldbyname('COD_CITY_PRIM').asstring:='';
    end;
  end;

end;

procedure TBOKForm.DBEdit156Change(Sender: TObject);
begin
// Если 860 Узбекистан то примечания пусто
end;

procedure TBOKForm.FormKeyPress(Sender: TObject; var Key: Char);
begin
//
//    #161:begin
//         key:=#211; // Ў = У
//       end;
//    #162:begin
//         key:=#243; // Ў = у
//       end;
  if key=#161 then key:=#211;
  if key=#162 then key:=#243;
  

end;

procedure TBOKForm.actOtpuskExecute(Sender: TObject);
var erMessage   : string;
    sql_, DepartmentCode, PostCode : string;
    v : variant;
// motive_dismissial_code,  ArticleCode
const
  ERROR_NO = 'ORA-20000: ';
begin


  if cdsOKPersonal.FieldByName('status_code').AsString<>'2'
  then begin
    showmessage('Можно отправить в отпуск только принятого сотрудника!');
    exit;
  end;

  If fmSaveOKOtpusk = nil Then fmSaveOKOtpusk := TfmOKOtpusk.Create(Self);
  With fmSaveOKOtpusk do
    Begin
      Caption := ' Отпуск ';
      gbDismiss.Caption  := ' Код сотрудника: '+cdsOKPersonal.FieldByName('personal_code').AsString;
      lbFamily.Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
      lbName.Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
      lbPatronymic.Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;

      DepartmentCode := '';
{      sql_ :='select department_name from ss_ok_department '+
                ' where department_code='+cdsOKPERSONAL.FieldByName('Department_Code').AsString+
                ' and state_notes=''A'' ';
}      sql_ :='select department_name from ss_ok_department '+
                ' where department_code=:p_1'+ //cdsOKPERSONAL.FieldByName('Department_Code').AsString+
                ' and state_notes=:p_2'; //''A'' ';
      try
          v := GetSQLResultpar(sql_,cdsOKPERSONAL.FieldByName('Department_Code').AsString,'A');

          If not VarIsNull(v) then begin
            DepartmentCode := v;
            lbDepartment.Caption := DepartmentCode;
          end else begin
            //
          end;
      except
//            showmessage('*1'+sql_);
      end;


      PostCode := '';
{      sql_:= 'select post_name from ss_ok_post '+
                ' where post_code='+cdsOKPERSONAL.FieldByName('Post_Code').AsString+
                ' and state_notes=''A'' ';
}      sql_:= 'select post_name from ss_ok_post '+
                ' where post_code=:p_1'+ //cdsOKPERSONAL.FieldByName('Post_Code').AsString+
                ' and state_notes=:p_2'; //'A'' ';
      try
          v := GetSQLResultpar(sql_,cdsOKPERSONAL.FieldByName('Post_Code').AsString,'A');
          If not VarIsNull(v) then begin
            PostCode := v;
            lbPost.Caption := PostCode;
          end else begin
            //
          end;
      except
//            showmessage('*2'+sql_);
      end;

      if cdsOKPost.Active then
      begin
        If cdsOKPost.State in [dsEdit, dsInsert] then cdsOKPost.Cancel;
      end;
      if cdsOKPersonal.Active then
      begin
        If cdsOKPersonal.State in [dsEdit, dsInsert] then cdsOKPersonal.Cancel;
      end;

      If ShowModal = mrOk Then
      Begin

      End;
    End;

  if ErMessage = ''
  then begin
    fmSaveOKOtpusk.Close;
    fmSaveOKOtpusk := nil;

  end;
//
end;

procedure TBOKForm.actOtpuskOutExecute(Sender: TObject);
var erMessage,sql_   : string;
//var  motive_dismissial_code, ArticleCode   : string;
//    sql_, DepartmentCode, PostCode : string;
//    v : variant;
  lbFamily_Caption,lbName_Caption,lbPatronymic_Caption : string;
//  YesOrNo : boolean;
  YourChoice_ : integer;
const
  ERROR_NO = 'ORA-20000: ';
begin

  if cdsOKPersonal.FieldByName('status_code').AsString<>'8'
  then begin
    showmessage('Сотрудник не в отпуске.');
    exit;
  end;

//  If Application.MessageBox(PChar('Вы действительно хотите вывести'+
//    ' сотрудника из декретного отпуска?'),
//    PChar('Выход из декрета'), MB_YESNO or MB_ICONQUESTION) = mrNo
//    then exit;


  YourChoice_:= Application.MessageBox(PChar('YES - Переместить на другую должность при выходе из отпуска,'+#13+
    'NO - Восстановить в той же должности.'+#13+'CANCEL - Отмена.'),
    PChar('Выход из отпуска'), MB_YESNOCANCEL or MB_ICONQUESTION);
  If YourChoice_=mrYes
  Then Begin

  If fmSaveOKAppoint = nil Then fmSaveOKAppoint := TfmOKAppoint.Create(Self);
  With fmSaveOKAppoint do
    Begin
      Caption:='Перемещение при выходе из отпуска';
      If ShowModal = mrOk Then
      Begin
//        cdsOKPersonal.Refresh;
      End;
  End;
  fmSaveOKAppoint.Close;
  fmSaveOKAppoint := nil;
//  bCancel.click;
  end;

  If YourChoice_=mrNo
  Then Begin

//  ErMessage:='';
//  lbFamily_Caption     := cdsOKPERSONAL.FieldByName('family').AsString;
//  lbName_Caption       := cdsOKPERSONAL.FieldByName('first_name').AsString;
//  lbPatronymic_Caption := cdsOKPERSONAL.FieldByName('patronymic').AsString;
  try
    sql_:= 'begin param.ClearParam; end;';
    BOKForm.execSQL(sql_);

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'PERSONAL_CODE',BOKForm.cdsOKPERSONAL.FieldByName('PERSONAL_CODE').AsString );

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'BRANCH',branch);

    BOKForm.execSQLPAR('begin Param.SetParam(:p_1,:p_2); end;',
      'EMP_CODE', UserId );

    sql_:= 'begin OK_SERVICE.OtpuskOut; end;';
    BOKForm.execSQL(sql_);

    sql_:= 'begin Param.ClearParam; end;';
    BOKForm.execSQL(sql_);

    sql_:= 'COMMIT';
    BOKForm.execSQL(sql_);

    BOKForm.cdsOKPersonal.Refresh;
          if     BOKForm.cdsOKPost.Active
          then begin
                BOKForm.cdsOKPost.Refresh;
          end;

        except
          on E: Exception do
            Begin
              ExecSQL('ROLLBACK');
//showmessage(sql_);
              If Pos(ERROR_NO, E.Message) <> 0 Then
                Begin
                  erMessage := Copy(E.Message, Pos(ERROR_NO, E.Message) + Length(ERROR_NO), Length(E.Message));
                  erMessage := Copy(erMessage, 1, Pos(#10, erMessage) - 1);
                  E.Message := StringReplace(E.Message, #13, '', [rfReplaceAll]);
                  E.Message := StringReplace(E.Message, #10, #13#10, [rfReplaceAll]);
                  ShowErrorBox(erMessage,E.Message,Self.Caption);
                End
              Else If pos('ORA-01400', E.Message) > 0 Then ShowMessage('Ошибка при сохранении(12911). Пожалуйста, заполните пустые поля!'+#13+e.messAge)
                   else ShowMessage(e.Message);
              exit;
            End;
          end;

  showmessage(lbFamily_Caption+' '+
    lbName_Caption+' '+lbPatronymic_Caption+'. Отпуск закончен.');


  end;
  cdsOKPersonal.Refresh;
//
end;

initialization
  RegisterClass(TBOKForm);
finalization
  UnRegisterClass(TBOKForm);
end.
