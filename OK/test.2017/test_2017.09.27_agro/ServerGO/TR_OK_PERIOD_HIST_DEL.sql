CREATE OR REPLACE TRIGGER TR_OK_PERIOD_HIST_DEL
 BEFORE
 DELETE
 ON OK_PERIOD
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
declare
 Version constant char(12) := '#~27092017~#';
User_name_ VARCHAR2(50);
dostup_ number(5);
BEGIN
--
  User_name_:=USER;
  select count(*) into dostup_ from s_mfo
  where bank_id  in (select branch from sets) and header_id='09004';
  if dostup_>0 and substr(User_name_,1,4)<>'U004'
  then
    if deleting then
      raise_application_error(-20000,'Нет доступа. Нельзя удалить сведения о работе.');
    end if;
  end if;
--
  if deleting then
    insert into OK_PERIOD_HIST_DEL (
ID,
BRANCH,
PERSONAL_CODE,
IN_OFFICE_DATE,
OUT_OFFICE_DATE,
OFFICE_NAME,
OFFICE_ADDRESS,
ESTABLISHED_POST,
ESTABLISHED_DEPARTMENT,
BASE_MOVE_CODE,
TYPE_PERIOD_CODE,
ARTICLE_CODE,
BASIS_NUM,
BASIS_DATE,
EMP_CODE,
INS_DATE,
PRIZ_SYSTEM,
COD_BANK,
COD_TYPE_PRN,
COD_PR_OFF,
PR_OFF,
DATE_UTV_KM,
NUMB_UTV_KM,
DATE_PR_KVL,
NUMB_PR_KVL,
DATE_ATTEST,
RESH_ATTEST,
DOLJN_ID,
NUM_PR_OFF,
DATE_PR_OFF,
POST_CODE,
DEPARTMENT_CODE)
select
:OLD.ID,
:OLD.BRANCH,
:OLD.PERSONAL_CODE,
:OLD.IN_OFFICE_DATE,
:OLD.OUT_OFFICE_DATE,
:OLD.OFFICE_NAME,
:OLD.OFFICE_ADDRESS,
:OLD.ESTABLISHED_POST,
:OLD.ESTABLISHED_DEPARTMENT,
:OLD.BASE_MOVE_CODE,
:OLD.TYPE_PERIOD_CODE,
:OLD.ARTICLE_CODE,
:OLD.BASIS_NUM,
:OLD.BASIS_DATE,
:OLD.EMP_CODE,
:OLD.INS_DATE,
:OLD.PRIZ_SYSTEM,
:OLD.COD_BANK,
:OLD.COD_TYPE_PRN,
:OLD.COD_PR_OFF,
:OLD.PR_OFF,
:OLD.DATE_UTV_KM,
:OLD.NUMB_UTV_KM,
:OLD.DATE_PR_KVL,
:OLD.NUMB_PR_KVL,
:OLD.DATE_ATTEST,
:OLD.RESH_ATTEST,
:OLD.DOLJN_ID,
:OLD.NUM_PR_OFF,
:OLD.DATE_PR_OFF,
:OLD.POST_CODE,
:OLD.DEPARTMENT_CODE
from dual;
  end if;
END;
/

